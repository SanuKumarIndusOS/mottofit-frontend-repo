{"version":3,"sources":["component/TrainerOnBoard/TrainerBackground/index.js","assets/files/SVG/Arrow Back.svg","assets/files/SVG/Location Icon.svg","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js"],"names":["TrainerBackground","connect","state","details","trainerReducer","trainerPersonalData","data","dispatch","bindActionCreators","updateTrainerDetails","getTrainerDetails","React","useState","checkedBoxing","setCheckedBoxing","checkedHIIT","setCheckedHIIT","checkedYoga","setCheckedYoga","checkedPilates","setCheckedPilates","workMode","workLocation","currentExperiencee","setCurrentExperiencee","areaOfExpertise","previousExperience","certification","clientAssessment","trainingProcess","interestInMotto","currentExperience","trainerbackgroundData","setTrainerbackgroundData","orgnization","job","years","inputFields","setInputField","certificate","year","upload","inputCertificatesFields","setinputCertificatesField","handleChangeInput","index","event","values","target","name","value","console","log","handleChangeCertificateInput","useEffect","Object","keys","length","tempData","className","src","ArrowBack","alt","to","ArrowNext","checked","onChange","e","indexOf","splice","style","color","map","input","type","placeholder","onClick","inputCertificatesField","required","disabled","selected","textDecoration","storeData","history","push","WaterMark","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","createSvgIcon","d","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","props","ref","_props$checkedIcon","checkedIcon","classes","_props$color","_props$icon","icon","iconProp","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","indeterminateIconProp","inputProps","_props$size","size","other","_objectWithoutProperties","SwitchBase","_extends","root","clsx","concat","capitalize","fontSize","undefined","withStyles","theme","palette","text","secondary","colorPrimary","primary","main","backgroundColor","fade","action","hoverOpacity","colorSecondary"],"mappings":"qRAwtBMA,EAAoBC,aAfF,SAACC,GAAD,MAAY,CAChCC,QAASD,EAAME,eAAeD,QAC9BE,oBAAqBH,EAAME,eAAeE,SAGnB,SAACC,GACxB,OAAOC,YACH,CACIC,4CACAC,uCAEJH,KAIkBN,EArrBE,SAAC,GAAuC,IAAD,EAApCQ,EAAoC,EAApCA,qBAAsBN,EAAc,EAAdA,QACjD,EAA0CQ,IAAMC,UAAS,GAAzD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsCH,IAAMC,UAAS,GAArD,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAsCL,IAAMC,UAAS,GAArD,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA4CP,IAAMC,UAAS,GAA3D,mBAAOO,EAAP,KAAuBC,EAAvB,KAEA,EAAoDR,mBAAS,CACzDS,SAAU,GACVC,aAAc,KAFlB,mBAAOC,EAAP,KAA2BC,EAA3B,KAIA,EAA0DZ,mBAAS,CAC/Da,gBAAiB,GACjBC,mBAAoB,GACpBC,cAAe,GACfC,iBAAkB,GAClBC,gBAAiB,GACjBC,gBAAiB,GACjBC,kBAAmB,KAPvB,mBAAOC,EAAP,KAA8BC,EAA9B,KAUA,EAAoCtB,IAAMC,SAAS,IAAnD,mBAIA,GAJA,UAI0CA,mBAAS,MAAnD,mBACA,GADA,UACqCA,mBAAS,CAC1C,CACIsB,YAAa,GACbC,IAAK,GACLC,MAAO,OAJf,mBAAOC,EAAP,KAAoBC,EAApB,KAQA,EAA6D1B,mBAAS,CAClE,CACI2B,YAAa,GACbC,KAAM,GACNC,OAAQ,MAJhB,mBAAOC,EAAP,KAAgCC,EAAhC,KAOMC,GAAoB,SAACC,EAAOC,GAC9B,IAAMC,EAAM,YAAOV,GACnBU,EAAOF,GAAOC,EAAME,OAAOC,MAAQH,EAAME,OAAOE,MAChDZ,EAAcS,GAEdI,QAAQC,IAAIf,GAEZJ,EAAyB,2BAClBD,GADiB,IAEpBN,mBAAoBW,MAGtBgB,GAA+B,SAACR,EAAOC,GACzC,IAAMC,EAAM,YAAOL,GACnBK,EAAOF,GAAOC,EAAME,OAAOC,MAAQH,EAAME,OAAOE,MAChDP,EAA0BI,GAG1Bd,EAAyB,2BAClBD,GADiB,IAEpBL,cAAee,MAyEvB,OAxBAY,qBAAU,WACN,GAAIC,OAAOC,KAAKrD,GAASsD,OAAS,EAAG,CACjC,IAAIC,EAAW,CACXjC,iBAAwB,OAAPtB,QAAO,IAAPA,OAAA,EAAAA,EAASsB,kBAAmB,GAC7CC,oBAA2B,OAAPvB,QAAO,IAAPA,OAAA,EAAAA,EAASuB,qBAAsB,GACnDC,eAAsB,OAAPxB,QAAO,IAAPA,OAAA,EAAAA,EAASoC,cAAe,GACvCX,iBAAkBzB,EAAQyB,iBAC1BC,gBAAiB1B,EAAQ0B,gBACzBC,gBAAiB3B,EAAQ2B,iBAG7B3B,EAAQ4B,mBACJP,EAAsBrB,EAAQ4B,mBAElC5B,EAAQuB,oBACJY,EAAcnC,EAAQuB,oBAE1BvB,EAAQwB,eACJgB,EAA0BxC,EAAQwB,eAEtCM,EAAyByB,MAE9B,IAGC,mCACI,qBAAKC,UAAU,sBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,sBAAKA,UAAU,eAAf,UACI,qBAAKC,IAAKC,UAAWC,IAAI,SACzB,sBAAKH,UAAU,cAAf,UACI,eAAC,IAAD,CAAMI,GAAG,iBAAT,UACK,IADL,uBAIA,8BAGR,sBAAKJ,UAAU,eAAf,UACI,sBAAKA,UAAU,cAAf,UACI,cAAC,IAAD,CAAMI,GAAG,wBAAT,gCAGA,2BAEJ,qBAAKH,IAAKI,UAAWF,IAAI,eAGjC,qBAAKH,UAAU,eAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,qEAEA,sBAOA,qBAAKA,UAAU,mBAAf,SACI,iCACI,sBAAKA,UAAU,QAAf,UACI,6FAIA,sBAAKA,UAAU,oBAAf,UACI,cAAC,IAAD,CACIM,QAASlD,EACTmD,SAAU,SAACC,GAQP,GAPAnD,EACImD,EAAEnB,OAAOiB,SAEbd,QAAQC,IACJe,EAAEnB,OAAOiB,SAGTE,EAAEnB,OAAOiB,QACThC,EAAyB,2BAEdD,GAFa,IAGhBP,gBAAgB,GAAD,mBAEJO,EAAsBP,iBAFlB,CAGP,uBAKhB0B,QAAQC,IACJpB,EAAsBP,qBAEvB,CACH,IAAMoB,EACFb,EAAsBP,gBAAgB2C,QAClC,mBAGJvB,GAAS,GACTb,EAAsBP,gBAAgB4C,OAClCxB,EACA,GAGRM,QAAQC,IACJpB,EAAsBP,iBAI9B0B,QAAQC,IACJpB,IAGRsC,MAAO,CACHC,MAAO,aAOf,qBAAKZ,UAAU,iBAAf,6BAGA,cAAC,IAAD,CACIM,QAASpD,EAETqD,SAAU,SAACC,GAQP,GAPArD,EACIqD,EAAEnB,OAAOiB,SAEbd,QAAQC,IACJe,EAAEnB,OAAOiB,SAGTE,EAAEnB,OAAOiB,QACTd,QAAQC,IACJ,aAEJnB,EAAyB,2BAEdD,GAFa,IAGhBP,gBAAgB,GAAD,mBAEJO,EAAsBP,iBAFlB,CAGP,cAKhB0B,QAAQC,IACJpB,EAAsBP,qBAEvB,CACH0B,QAAQC,IACJ,eAGJ,IAAMP,EACFb,EAAsBP,gBAAgB2C,QAClC,UAGJvB,GAAS,GACTb,EAAsBP,gBAAgB4C,OAClCxB,EACA,GAGRM,QAAQC,IACJpB,EAAsBP,iBAI9B0B,QAAQC,IACJpB,IAGRsC,MAAO,CACHC,MAAO,aAGf,qBAAKZ,UAAU,iBAAf,oBAGA,cAAC,IAAD,CACIM,QAAShD,EACTiD,SAAU,SAACC,GAKP,GAJAjD,EACIiD,EAAEnB,OAAOiB,SAGTE,EAAEnB,OAAOiB,QACThC,EAAyB,2BAEdD,GAFa,IAGhBP,gBAAgB,GAAD,mBAEJO,EAAsBP,iBAFlB,CAGP,gBAIb,CACH,IAAMoB,EACFb,EAAsBP,gBAAgB2C,QAClC,QAGJvB,GAAS,GACTb,EAAsBP,gBAAgB4C,OAClCxB,EACA,KAKhByB,MAAO,CACHC,MAAO,aAGf,qBAAKZ,UAAU,iBAAf,kBAGA,cAAC,IAAD,CACIM,QAAS9C,EACT+C,SAAU,SAACC,GAKP,GAJA/C,EACI+C,EAAEnB,OAAOiB,SAGTE,EAAEnB,OAAOiB,QACThC,EAAyB,2BAEdD,GAFa,IAGhBP,gBAAgB,GAAD,mBAEJO,EAAsBP,iBAFlB,CAGP,mBAIb,CACH,IAAMoB,EACFb,EAAsBP,gBAAgB2C,QAClC,WAGJvB,GAAS,GACTb,EAAsBP,gBAAgB4C,OAClCxB,EACA,KAKhByB,MAAO,CACHC,MAAO,aAGf,qBAAKZ,UAAU,iBAAf,2BAKR,sBAAKA,UAAU,QAAf,UACI,qDACCtB,EAAYmC,KAAI,SAACC,EAAO5B,GACrB,OACI,sBACIc,UAAU,oBADd,UAII,uBACIe,KAAK,OACLC,YAAY,iCACZzB,MACIuB,EAAMvC,YAEVe,KAAK,cACLiB,SAAU,SAACpB,GAAD,OACNF,GACIC,EACAC,MAIZ,uBACI4B,KAAK,OACLC,YAAY,YACZzB,MAAOuB,EAAMtC,IACbc,KAAK,MACLiB,SAAU,SAACpB,GAAD,OACNF,GACIC,EACAC,MAIZ,uBACI4B,KAAK,SACLC,YAAY,QACZ1B,KAAK,QACLC,MAAOuB,EAAMrC,MACb8B,SAAU,SAACpB,GAAD,OACNF,GACIC,EACAC,QApCPD,MA4CjB,oBAAI+B,QAAS,WApW7CtC,EAAc,GAAD,mBACND,GADM,CAET,CAAEH,YAAa,GAAIC,IAAK,GAAIC,MAAO,QAkWP,sCAWJ,sBAAKuB,UAAU,QAAf,UACI,gDACCjB,EAAwB8B,KACrB,SAACK,EAAwBhC,GAAzB,OACI,sBACIc,UAAU,oBADd,UAII,uBACIe,KAAK,OACLC,YAAY,sBACZzB,MACI2B,EAAuBtC,YAE3BU,KAAK,cACLiB,SAAU,SAACpB,GAAD,OACNO,GACIR,EACAC,MAIZ,uBACI4B,KAAK,OACLC,YAAY,0BACZzB,MACI2B,EAAuBrC,KAE3BS,KAAK,OACLiB,SAAU,SAACpB,GAAD,OACNO,GACIR,EACAC,QA1BPD,MAmDjB,oBACI+B,QAnaL,WAC/BjC,EAA0B,GAAD,mBAClBD,GADkB,CAErB,CAAEH,YAAa,GAAIC,KAAM,GAAIC,OAAQ,OAGzCU,QAAQC,IAAIV,IA4ZoB,oCAMJ,sBAAKiB,UAAU,QAAf,UACI,iGAIA,qBAAKA,UAAU,oBAAf,SACI,0BACIe,KAAK,OACLzB,KAAK,UACL0B,YAAY,oDAIxB,sBAAKhB,UAAU,QAAf,UACI,wFAIA,sBAAKA,UAAU,oBAAf,UACI,yBACIA,UAAU,kBACVmB,UAAQ,EACR7B,KAAK,SACLC,MACI3B,EAAmBF,SAEvB6C,SAAU,SAACC,GACP3C,EAAsB,2BACfD,GADc,IAEjBF,SACI8C,EAAEnB,OAAOE,UAXzB,UAiBI,wBACIA,MAAM,GACN6B,UAAQ,EACRC,UAAQ,EAHZ,gCAOA,wBAAQ9B,MAAM,MAAd,iBACA,wBAAQA,MAAM,KAAd,mBAIJ,QADC3B,EAAmBF,SAEhB,mCACI,uBACIqD,KAAK,OACLC,YAAY,sBACZzB,MACI3B,EAAmBD,aAEvB2B,KAAK,SACLiB,SAAU,SAACC,GACP3C,EAAsB,2BAEXD,GAFU,IAGbD,aACI6C,EAAEnB,OACGE,SAGjBjB,EAAyB,2BAEdD,GAFa,IAGhBD,kBACIR,UAMxB,WAGZ,sBAAKoC,UAAU,QAAf,UACI,0EAIA,qBAAKA,UAAU,oBAAf,SACI,0BACIe,KAAK,OACLzB,KAAK,UACL0B,YAAY,kDACZzB,MACIlB,EAAsBF,gBAE1BoC,SAAU,SAACC,GAAD,OACNlC,EAAyB,2BAClBD,GADiB,IAEpBF,gBACIqC,EAAEnB,OAAOE,iBAMjC,sBAAKS,UAAU,QAAf,UACI,8FAIA,qBAAKA,UAAU,oBAAf,SACI,0BACIe,KAAK,OACLzB,KAAK,UACL0B,YAAY,kDACZzB,MACIlB,EAAsBJ,iBAE1BsC,SAAU,SAACC,GAAD,OACNlC,EAAyB,2BAClBD,GADiB,IAEpBJ,iBACIuC,EAAEnB,OAAOE,iBAMjC,sBAAKS,UAAU,QAAf,UACI,6EAIA,qBAAKA,UAAU,oBAAf,SACI,0BACIe,KAAK,OACLzB,KAAK,UACL0B,YAAY,kDACZzB,MACIlB,EAAsBH,gBAE1BqC,SAAU,SAACC,GAAD,OACNlC,EAAyB,2BAClBD,GADiB,IAEpBH,gBACIsC,EAAEnB,OAAOE,iBAOjC,qBAAKS,UAAU,gBAAf,SACI,4BACIe,KAAK,SACLJ,MAAO,CACHW,eAAgB,OAChBV,MAAO,YAJf,qBAMS,UANT,yBA/iBf,WACjB,IAAMW,EAAY,CACd/E,QAAQ,2BACDA,GADA,IAEHsB,gBAAiBO,EAAsBP,gBACvCC,mBAAoBM,EAAsBN,mBAC1CC,cAAeK,EAAsBL,cACrCC,iBAAkBI,EAAsBJ,iBACxCC,gBAAiBG,EAAsBH,gBACvCC,gBAAiBE,EAAsBF,gBACvCC,kBAAmBR,KAI3Bd,EAAqByE,GAErBC,UAAQC,KAAR,4BA+hBgC,qCAeI,cAAC,UAAD,MAfJ,gBAsBpB,qBAAKxB,IAAKyB,UAAWvB,IAAI,OAAOH,UAAU,2BA2B/C3D,a,iCC7tBf,OAAe,cAA0B,wC,iCCAzC,OAAe,cAA0B,2C,kHCI1B,SAASsF,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYtC,OAAOoC,GAAO,OAAOH,MAAMM,KAAKH,GFIvD,CAAgBJ,IAAQ,OAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE,K,6FIC/EC,cAA4BtF,gBAAoB,OAAQ,CACrEuF,EAAG,+FACD,wBCFWD,cAA4BtF,gBAAoB,OAAQ,CACrEuF,EAAG,wIACD,Y,SCFWD,cAA4BtF,gBAAoB,OAAQ,CACrEuF,EAAG,kGACD,yB,kBCwDAC,EAAkCxF,gBAAoByF,EAAc,MACpEC,EAA2B1F,gBAAoB2F,EAA0B,MACzEC,EAAwC5F,gBAAoB6F,EAA2B,MACvFC,EAAwB9F,cAAiB,SAAkB+F,EAAOC,GACpE,IAAIC,EAAqBF,EAAMG,YAC3BA,OAAqC,IAAvBD,EAAgCT,EAAqBS,EACnEE,EAAUJ,EAAMI,QAChBC,EAAeL,EAAMnC,MACrBA,OAAyB,IAAjBwC,EAA0B,YAAcA,EAChDC,EAAcN,EAAMO,KACpBC,OAA2B,IAAhBF,EAAyBX,EAAcW,EAClDG,EAAuBT,EAAMU,cAC7BA,OAAyC,IAAzBD,GAA0CA,EAC1DE,EAAwBX,EAAMY,kBAC9BC,OAAkD,IAA1BF,EAAmCd,EAA2Bc,EACtFG,EAAad,EAAMc,WACnBC,EAAcf,EAAMgB,KACpBA,OAAuB,IAAhBD,EAAyB,SAAWA,EAC3CE,EAAQC,YAAyBlB,EAAO,CAAC,cAAe,UAAW,QAAS,OAAQ,gBAAiB,oBAAqB,aAAc,SAExIO,EAAOG,EAAgBG,EAAwBL,EAC/CI,EAAoBF,EAAgBG,EAAwBV,EAChE,OAAoBlG,gBAAoBkH,IAAYC,YAAS,CAC3DpD,KAAM,WACNoC,QAAS,CACPiB,KAAMC,YAAKlB,EAAQiB,KAAMjB,EAAQ,QAAQmB,OAAOC,YAAW3D,KAAU6C,GAAiBN,EAAQM,eAC9FnD,QAAS6C,EAAQ7C,QACjBc,SAAU+B,EAAQ/B,UAEpBR,MAAOA,EACPiD,WAAYM,YAAS,CACnB,qBAAsBV,GACrBI,GACHP,KAAmBtG,eAAmBsG,EAAM,CAC1CkB,cAAkCC,IAAxBnB,EAAKP,MAAMyB,UAAmC,UAATT,EAAmBA,EAAOT,EAAKP,MAAMyB,WAEtFtB,YAA0BlG,eAAmB2G,EAAmB,CAC9Da,cAA+CC,IAArCd,EAAkBZ,MAAMyB,UAAmC,UAATT,EAAmBA,EAAOJ,EAAkBZ,MAAMyB,WAEhHxB,IAAKA,GACJgB,OAiGUU,iBA5LK,SAAgBC,GAClC,MAAO,CAELP,KAAM,CACJxD,MAAO+D,EAAMC,QAAQC,KAAKC,WAI5BxE,QAAS,GAGTc,SAAU,GAGVqC,cAAe,GAGfsB,aAAc,CACZ,YAAa,CACXnE,MAAO+D,EAAMC,QAAQI,QAAQC,KAC7B,UAAW,CACTC,gBAAiBC,YAAKR,EAAMC,QAAQI,QAAQC,KAAMN,EAAMC,QAAQQ,OAAOC,cAEvE,uBAAwB,CACtBH,gBAAiB,iBAIvB,aAAc,CACZtE,MAAO+D,EAAMC,QAAQQ,OAAOhE,WAKhCkE,eAAgB,CACd,YAAa,CACX1E,MAAO+D,EAAMC,QAAQE,UAAUG,KAC/B,UAAW,CACTC,gBAAiBC,YAAKR,EAAMC,QAAQE,UAAUG,KAAMN,EAAMC,QAAQQ,OAAOC,cAEzE,uBAAwB,CACtBH,gBAAiB,iBAIvB,aAAc,CACZtE,MAAO+D,EAAMC,QAAQQ,OAAOhE,cA8IF,CAChC9B,KAAM,eADOoF,CAEZ5B","file":"static/js/14.267ca849.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport ArrowBack from \"../../../assets/files/SVG/Arrow Back.svg\";\r\nimport ArrowNext from \"../../../assets/files/SVG/Arrow Next.svg\";\r\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport WaterMark from \"../../../assets/files/SVG/M Watermark.svg\";\r\nimport Location from \"../../../assets/files/SVG/Location Icon.svg\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { updateTrainerDetails, getTrainerDetails } from \"action/trainerAct\";\r\nimport { history } from \"helpers\";\r\n\r\n/* areaOfExpertise\r\n   previousExperience\r\n   currentExperience\r\n   interestInMotto\r\n   trainingProcess\r\n   clientAssessment\r\n   \"myMotto\":\"\",\r\n   certification\r\n\r\n   hoursPerWeek\r\n   preferedTrainingMode\r\n//    serviceableCity\r\n   servicableLocation\r\n   trainingFacilityLocation\r\n   willingToTravel\r\n\r\n\r\n   \r\n*/\r\n\r\nconst TrainerBackgroundFC = ({ updateTrainerDetails, details }) => {\r\n    const [checkedBoxing, setCheckedBoxing] = React.useState(false);\r\n    const [checkedHIIT, setCheckedHIIT] = React.useState(false);\r\n    const [checkedYoga, setCheckedYoga] = React.useState(false);\r\n    const [checkedPilates, setCheckedPilates] = React.useState(false);\r\n\r\n    const [currentExperiencee, setCurrentExperiencee] = useState({\r\n        workMode: \"\",\r\n        workLocation: \"\",\r\n    });\r\n    const [trainerbackgroundData, setTrainerbackgroundData] = useState({\r\n        areaOfExpertise: [],\r\n        previousExperience: [],\r\n        certification: [],\r\n        clientAssessment: \"\",\r\n        trainingProcess: \"\",\r\n        interestInMotto: \"\",\r\n        currentExperience: \"\",\r\n    });\r\n\r\n    const [checkstate, setCheckState] = React.useState(\"\");\r\n\r\n    // const history = useHistory();\r\n\r\n    const [selectedValue, setSelectedValue] = useState(\"a\");\r\n    const [inputFields, setInputField] = useState([\r\n        {\r\n            orgnization: \"\",\r\n            job: \"\",\r\n            years: \"\",\r\n        },\r\n    ]);\r\n\r\n    const [inputCertificatesFields, setinputCertificatesField] = useState([\r\n        {\r\n            certificate: \"\",\r\n            year: \"\",\r\n            upload: \"\",\r\n        },\r\n    ]);\r\n    const handleChangeInput = (index, event) => {\r\n        const values = [...inputFields];\r\n        values[index][event.target.name] = event.target.value;\r\n        setInputField(values);\r\n\r\n        console.log(inputFields);\r\n\r\n        setTrainerbackgroundData({\r\n            ...trainerbackgroundData,\r\n            previousExperience: inputFields,\r\n        });\r\n    };\r\n    const handleChangeCertificateInput = (index, event) => {\r\n        const values = [...inputCertificatesFields];\r\n        values[index][event.target.name] = event.target.value;\r\n        setinputCertificatesField(values);\r\n\r\n        // console.log(inputCertificatesFields);\r\n        setTrainerbackgroundData({\r\n            ...trainerbackgroundData,\r\n            certification: inputCertificatesFields,\r\n        });\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setSelectedValue(event.target.value);\r\n    };\r\n\r\n    const handleAddFields = () => {\r\n        setInputField([\r\n            ...inputFields,\r\n            { orgnization: \"\", job: \"\", years: \"\" },\r\n        ]);\r\n    };\r\n\r\n    const handleAddCertificateFields = () => {\r\n        setinputCertificatesField([\r\n            ...inputCertificatesFields,\r\n            { certificate: \"\", year: \"\", upload: \"\" },\r\n        ]);\r\n\r\n        console.log(inputCertificatesFields);\r\n    };\r\n\r\n    // const handleRemoveFields = (index) => {\r\n    //     const values = [...inputFields];\r\n    //     values.splice(index, 1);\r\n    //     setInputField(values);\r\n    // };\r\n\r\n    const handleSubmit = () => {\r\n        const storeData = {\r\n            details: {\r\n                ...details,\r\n                areaOfExpertise: trainerbackgroundData.areaOfExpertise,\r\n                previousExperience: trainerbackgroundData.previousExperience,\r\n                certification: trainerbackgroundData.certification,\r\n                clientAssessment: trainerbackgroundData.clientAssessment,\r\n                trainingProcess: trainerbackgroundData.trainingProcess,\r\n                interestInMotto: trainerbackgroundData.interestInMotto,\r\n                currentExperience: currentExperiencee,\r\n            },\r\n        };\r\n\r\n        updateTrainerDetails(storeData);\r\n\r\n        history.push(`/trainer/availability`);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(details).length > 3) {\r\n            let tempData = {\r\n                areaOfExpertise: details?.areaOfExpertise || [],\r\n                previousExperience: details?.previousExperience || [],\r\n                certification: details?.certificate || [],\r\n                clientAssessment: details.clientAssessment,\r\n                trainingProcess: details.trainingProcess,\r\n                interestInMotto: details.interestInMotto,\r\n            };\r\n\r\n            details.currentExperience &&\r\n                setCurrentExperiencee(details.currentExperience);\r\n\r\n            details.previousExperience &&\r\n                setInputField(details.previousExperience);\r\n\r\n            details.certification &&\r\n                setinputCertificatesField(details.certification);\r\n\r\n            setTrainerbackgroundData(tempData);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"outter_container_bg\">\r\n                <div className=\"container\">\r\n                    <div className=\"links_wrapper\">\r\n                        <div className=\"outter_links\">\r\n                            <img src={ArrowBack} alt=\"icon\" />\r\n                            <div className=\"inner_links\">\r\n                                <Link to=\"/trainer/about\">\r\n                                    {\" \"}\r\n                                    Back to About You\r\n                                </Link>\r\n                                <div></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"outter_links\">\r\n                            <div className=\"inner_links\">\r\n                                <Link to=\"/trainer/availability\">\r\n                                    Go to Availability\r\n                                </Link>\r\n                                <div></div>\r\n                            </div>\r\n                            <img src={ArrowNext} alt=\"icon\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"main_wrapper\">\r\n                        <div className=\"wrapper_inneritems\">\r\n                            <h1>Detail out your training background</h1>\r\n\r\n                            <p>\r\n                                {/* We want to know it all! Share with us your\r\n                                experience & philosophy as a trainer to progress\r\n                                in your application process and join the Motto\r\n                                Family.{\" \"} */}\r\n                            </p>\r\n\r\n                            <div className=\"contents_wrapper\">\r\n                                <form>\r\n                                    <div className=\"item1\">\r\n                                        <h6>\r\n                                            Tell us what you train! Select all\r\n                                            the verticals that apply\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <Checkbox\r\n                                                checked={checkedHIIT}\r\n                                                onChange={(e) => {\r\n                                                    setCheckedHIIT(\r\n                                                        e.target.checked\r\n                                                    );\r\n                                                    console.log(\r\n                                                        e.target.checked\r\n                                                    );\r\n\r\n                                                    if (e.target.checked) {\r\n                                                        setTrainerbackgroundData(\r\n                                                            {\r\n                                                                ...trainerbackgroundData,\r\n                                                                areaOfExpertise:\r\n                                                                    [\r\n                                                                        ...trainerbackgroundData.areaOfExpertise,\r\n                                                                        \"Strength & HIIT\",\r\n                                                                    ],\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        console.log(\r\n                                                            trainerbackgroundData.areaOfExpertise\r\n                                                        );\r\n                                                    } else {\r\n                                                        const index =\r\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                                                \"Strength & HIIT\"\r\n                                                            );\r\n                                                        // console.log(index);\r\n                                                        if (index > -1) {\r\n                                                            trainerbackgroundData.areaOfExpertise.splice(\r\n                                                                index,\r\n                                                                1\r\n                                                            );\r\n                                                        }\r\n                                                        console.log(\r\n                                                            trainerbackgroundData.areaOfExpertise\r\n                                                        );\r\n                                                    }\r\n\r\n                                                    console.log(\r\n                                                        trainerbackgroundData\r\n                                                    );\r\n                                                }}\r\n                                                style={{\r\n                                                    color: \"#53BFD2\",\r\n                                                }}\r\n\r\n                                                // onChange={() => {\r\n                                                //   setCheckState(\"Strength & HIIT\");\r\n                                                // }}\r\n                                            />\r\n                                            <div className=\"checkbox_label\">\r\n                                                Strength & HIIT\r\n                                            </div>\r\n                                            <Checkbox\r\n                                                checked={checkedBoxing}\r\n                                                // checked={true}\r\n                                                onChange={(e) => {\r\n                                                    setCheckedBoxing(\r\n                                                        e.target.checked\r\n                                                    );\r\n                                                    console.log(\r\n                                                        e.target.checked\r\n                                                    );\r\n\r\n                                                    if (e.target.checked) {\r\n                                                        console.log(\r\n                                                            \"setBoxing\"\r\n                                                        );\r\n                                                        setTrainerbackgroundData(\r\n                                                            {\r\n                                                                ...trainerbackgroundData,\r\n                                                                areaOfExpertise:\r\n                                                                    [\r\n                                                                        ...trainerbackgroundData.areaOfExpertise,\r\n                                                                        \"Boxing\",\r\n                                                                    ],\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        console.log(\r\n                                                            trainerbackgroundData.areaOfExpertise\r\n                                                        );\r\n                                                    } else {\r\n                                                        console.log(\r\n                                                            \"unsetBoxing\"\r\n                                                        );\r\n\r\n                                                        const index =\r\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                                                \"Boxing\"\r\n                                                            );\r\n                                                        // console.log(index);\r\n                                                        if (index > -1) {\r\n                                                            trainerbackgroundData.areaOfExpertise.splice(\r\n                                                                index,\r\n                                                                1\r\n                                                            );\r\n                                                        }\r\n                                                        console.log(\r\n                                                            trainerbackgroundData.areaOfExpertise\r\n                                                        );\r\n                                                    }\r\n\r\n                                                    console.log(\r\n                                                        trainerbackgroundData\r\n                                                    );\r\n                                                }}\r\n                                                style={{\r\n                                                    color: \"#53BFD2\",\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"checkbox_label\">\r\n                                                Boxing\r\n                                            </div>\r\n                                            <Checkbox\r\n                                                checked={checkedYoga}\r\n                                                onChange={(e) => {\r\n                                                    setCheckedYoga(\r\n                                                        e.target.checked\r\n                                                    );\r\n\r\n                                                    if (e.target.checked) {\r\n                                                        setTrainerbackgroundData(\r\n                                                            {\r\n                                                                ...trainerbackgroundData,\r\n                                                                areaOfExpertise:\r\n                                                                    [\r\n                                                                        ...trainerbackgroundData.areaOfExpertise,\r\n                                                                        \"Yoga\",\r\n                                                                    ],\r\n                                                            }\r\n                                                        );\r\n                                                    } else {\r\n                                                        const index =\r\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                                                \"Yoga\"\r\n                                                            );\r\n                                                        // console.log(index);\r\n                                                        if (index > -1) {\r\n                                                            trainerbackgroundData.areaOfExpertise.splice(\r\n                                                                index,\r\n                                                                1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                style={{\r\n                                                    color: \"#53BFD2\",\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"checkbox_label\">\r\n                                                Yoga\r\n                                            </div>\r\n                                            <Checkbox\r\n                                                checked={checkedPilates}\r\n                                                onChange={(e) => {\r\n                                                    setCheckedPilates(\r\n                                                        e.target.checked\r\n                                                    );\r\n\r\n                                                    if (e.target.checked) {\r\n                                                        setTrainerbackgroundData(\r\n                                                            {\r\n                                                                ...trainerbackgroundData,\r\n                                                                areaOfExpertise:\r\n                                                                    [\r\n                                                                        ...trainerbackgroundData.areaOfExpertise,\r\n                                                                        \"Pilates\",\r\n                                                                    ],\r\n                                                            }\r\n                                                        );\r\n                                                    } else {\r\n                                                        const index =\r\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                                                \"Pilates\"\r\n                                                            );\r\n                                                        // console.log(index);\r\n                                                        if (index > -1) {\r\n                                                            trainerbackgroundData.areaOfExpertise.splice(\r\n                                                                index,\r\n                                                                1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                style={{\r\n                                                    color: \"#53BFD2\",\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"checkbox_label\">\r\n                                                Pilates\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"item2\">\r\n                                        <h6>Training experience</h6>\r\n                                        {inputFields.map((input, index) => {\r\n                                            return (\r\n                                                <div\r\n                                                    className=\"inputs_experience\"\r\n                                                    key={index}\r\n                                                >\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Name of the organization / GYM\"\r\n                                                        value={\r\n                                                            input.orgnization\r\n                                                        }\r\n                                                        name=\"orgnization\"\r\n                                                        onChange={(event) =>\r\n                                                            handleChangeInput(\r\n                                                                index,\r\n                                                                event\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Job Title\"\r\n                                                        value={input.job}\r\n                                                        name=\"job\"\r\n                                                        onChange={(event) =>\r\n                                                            handleChangeInput(\r\n                                                                index,\r\n                                                                event\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        placeholder=\"Years\"\r\n                                                        name=\"years\"\r\n                                                        value={input.years}\r\n                                                        onChange={(event) =>\r\n                                                            handleChangeInput(\r\n                                                                index,\r\n                                                                event\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                            );\r\n                                        })}\r\n\r\n                                        <h5 onClick={() => handleAddFields()}>\r\n                                            + Add Work Experience\r\n                                        </h5>\r\n                                        {/* {inputFields ? (\r\n                                        <span\r\n                                            onClick={() => handleRemoveFields()}\r\n                                        >\r\n                                            Remove\r\n                                        </span>\r\n                                    ) : null} */}\r\n                                    </div>\r\n                                    <div className=\"item3\">\r\n                                        <h6>Certifications</h6>\r\n                                        {inputCertificatesFields.map(\r\n                                            (inputCertificatesField, index) => (\r\n                                                <div\r\n                                                    className=\"inputs_background\"\r\n                                                    key={index}\r\n                                                >\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Certification Title\"\r\n                                                        value={\r\n                                                            inputCertificatesField.certificate\r\n                                                        }\r\n                                                        name=\"certificate\"\r\n                                                        onChange={(event) =>\r\n                                                            handleChangeCertificateInput(\r\n                                                                index,\r\n                                                                event\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Year you were Certified\"\r\n                                                        value={\r\n                                                            inputCertificatesField.year\r\n                                                        }\r\n                                                        name=\"year\"\r\n                                                        onChange={(event) =>\r\n                                                            handleChangeCertificateInput(\r\n                                                                index,\r\n                                                                event\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                    {/* <input\r\n                                                    type=\"file\"\r\n                                                    name=\"file\"\r\n                                                    value={\r\n                                                        inputCertificatesField.upload\r\n                                                    }\r\n                                                    // className=\"custom-file-input\"\r\n                                                    onChange={(event) =>\r\n                                                        handleChangeCertificateInput(\r\n                                                            index,\r\n                                                            event\r\n                                                        )\r\n                                                    }\r\n                                                /> */}\r\n                                                    {/* <a className=\"checkarrow\">\r\n                                                    <ArrowHover />\r\n                                                </a> */}\r\n                                                </div>\r\n                                            )\r\n                                        )}\r\n\r\n                                        <h5\r\n                                            onClick={handleAddCertificateFields}\r\n                                        >\r\n                                            + Add Certificate's\r\n                                        </h5>\r\n                                    </div>\r\n                                    <div className=\"item4\">\r\n                                        <h6>\r\n                                            Are you currently enrolled in any\r\n                                            continued education programs?\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <textarea\r\n                                                type=\"text\"\r\n                                                name=\"comment\"\r\n                                                placeholder=\"Tell us about any awaiting certifications \"\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"item5\">\r\n                                        <h6>\r\n                                            Do you have a facility to train new\r\n                                            & outside clients?\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <select\r\n                                                className=\"select_location\"\r\n                                                required\r\n                                                name=\"answer\"\r\n                                                value={\r\n                                                    currentExperiencee.workMode\r\n                                                }\r\n                                                onChange={(e) => {\r\n                                                    setCurrentExperiencee({\r\n                                                        ...currentExperiencee,\r\n                                                        workMode:\r\n                                                            e.target.value,\r\n                                                    });\r\n\r\n                                                    // setTrainerbackgroundData({...trainerbackgroundData, currentExperience: currentExperiencee})\r\n                                                }}\r\n                                            >\r\n                                                <option\r\n                                                    value=\"\"\r\n                                                    disabled\r\n                                                    selected\r\n                                                >\r\n                                                    Select Your Answer\r\n                                                </option>\r\n                                                <option value=\"yes\">Yes</option>\r\n                                                <option value=\"no\">No</option>\r\n                                            </select>\r\n\r\n                                            {currentExperiencee.workMode ===\r\n                                            \"yes\" ? (\r\n                                                <>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Details of facility\"\r\n                                                        value={\r\n                                                            currentExperiencee.workLocation\r\n                                                        }\r\n                                                        name=\"answer\"\r\n                                                        onChange={(e) => {\r\n                                                            setCurrentExperiencee(\r\n                                                                {\r\n                                                                    ...currentExperiencee,\r\n                                                                    workLocation:\r\n                                                                        e.target\r\n                                                                            .value,\r\n                                                                }\r\n                                                            );\r\n                                                            setTrainerbackgroundData(\r\n                                                                {\r\n                                                                    ...trainerbackgroundData,\r\n                                                                    currentExperience:\r\n                                                                        currentExperiencee,\r\n                                                                }\r\n                                                            );\r\n                                                        }}\r\n                                                    />\r\n                                                </>\r\n                                            ) : null}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"item6\">\r\n                                        <h6>\r\n                                            Why are you interested in joining\r\n                                            Motto?\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <textarea\r\n                                                type=\"text\"\r\n                                                name=\"comment\"\r\n                                                placeholder=\"Tell us all about it in not more than 150 words\"\r\n                                                value={\r\n                                                    trainerbackgroundData.interestInMotto\r\n                                                }\r\n                                                onChange={(e) =>\r\n                                                    setTrainerbackgroundData({\r\n                                                        ...trainerbackgroundData,\r\n                                                        interestInMotto:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"item6\">\r\n                                        <h6>\r\n                                            Describe how you assess a client\r\n                                            before their first session?\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <textarea\r\n                                                type=\"text\"\r\n                                                name=\"comment\"\r\n                                                placeholder=\"Tell us all about it in not more than 150 words\"\r\n                                                value={\r\n                                                    trainerbackgroundData.clientAssessment\r\n                                                }\r\n                                                onChange={(e) =>\r\n                                                    setTrainerbackgroundData({\r\n                                                        ...trainerbackgroundData,\r\n                                                        clientAssessment:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"item6\">\r\n                                        <h6>\r\n                                            Describe your training process &\r\n                                            philosophy\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <textarea\r\n                                                type=\"text\"\r\n                                                name=\"comment\"\r\n                                                placeholder=\"Tell us all about it in not more than 150 words\"\r\n                                                value={\r\n                                                    trainerbackgroundData.trainingProcess\r\n                                                }\r\n                                                onChange={(e) =>\r\n                                                    setTrainerbackgroundData({\r\n                                                        ...trainerbackgroundData,\r\n                                                        trainingProcess:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"submit_button\">\r\n                                        <button\r\n                                            type=\"submit\"\r\n                                            style={{\r\n                                                textDecoration: \"none\",\r\n                                                color: \"#FFFFFF\",\r\n                                            }}\r\n                                            type=\"submit\"\r\n                                            // onClick={handleTrainerAvailability}\r\n                                            onClick={handleSubmit}\r\n                                            // to={{\r\n                                            //   pathname: \"/trainer/avaliability\",\r\n                                            //   state: [AboutTrainer, trainerbackgroundData],\r\n                                            // }}\r\n                                        >\r\n                                            Continue\r\n                                            <ArrowHoverBlacked />\r\n                                        </button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <img src={WaterMark} alt=\"icon\" className=\"bg_watermark\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    details: state.trainerReducer.details,\r\n    trainerPersonalData: state.trainerReducer.data,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators(\r\n        {\r\n            updateTrainerDetails,\r\n            getTrainerDetails,\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst TrainerBackground = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TrainerBackgroundFC);\r\n\r\nexport default TrainerBackground;\r\n","export default __webpack_public_path__ + \"static/media/Arrow Back.d3693c0f.svg\";","export default __webpack_public_path__ + \"static/media/Location Icon.6eb543f1.svg\";","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = /*#__PURE__*/React.createElement(CheckBoxIcon, null);\nvar defaultIcon = /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = /*#__PURE__*/React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      iconProp = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  var icon = indeterminate ? indeterminateIconProp : iconProp;\n  var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  return /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: icon.props.fontSize === undefined && size === \"small\" ? size : icon.props.fontSize\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: indeterminateIcon.props.fontSize === undefined && size === \"small\" ? size : indeterminateIcon.props.fontSize\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);"],"sourceRoot":""}