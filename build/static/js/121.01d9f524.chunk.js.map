{"version":3,"sources":["component/AdminDashboard/AdminComponents/AdminLogin/AdminLogin.js","pages/AdminDashboard/Admin/Admin.js"],"names":["AdminLogin","connect","dispatch","bindActionCreators","loginAct","loginOrSignUp","useState","email","password","signUpType","deviceName","data","setData","error","setErrors","passwordShown","setPasswordShown","isLoading","setisLoading","apiError","setApiError","history","useHistory","handleSubmit","e","a","preventDefault","payload","validateFields","adminApi","AuthApi","then","type","token","localStorage","setItem","push","catch","err","message","onChangeValue","persist","target","name","value","tempErrors","undefined","fieldInvalidList","validate","presence","allowEmpty","length","minimum","tooShort","maximum","tooLong","errors","className","onSubmit","placeholder","onChange","src","Mail","alt","Password","onClick","disabled","Admin"],"mappings":"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","file":"static/js/121.01d9f524.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport \"./styles.scss\";\r\nimport Mail from \"../../../../assets/files/SignUp/Email Icon.svg\";\r\nimport Password from \"../../../../assets/files/SignUp/Password Icon.svg\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { loginOrSignUp } from \"action/authAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { AuthApi } from \"service/apiVariables\";\r\nimport validate from \"service/validation\";\r\n\r\nconst AdminLoginFC = ({ loginAct }) => {\r\n  const [data, setData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    signUpType: \"email\",\r\n    deviceName: \"email\",\r\n  });\r\n\r\n  const [error, setErrors] = useState({});\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n  const [isLoading, setisLoading] = useState(false);\r\n  const showPassword = () => {\r\n    setPasswordShown(passwordShown ? false : true);\r\n  };\r\n  const [apiError, setApiError] = useState(\"\");\r\n\r\n  const history = useHistory();\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const payload = {\r\n      email: data.email,\r\n      password: data.password,\r\n      signUpType: data.signUpType,\r\n      deviceName: data.deviceName,\r\n    };\r\n\r\n    if (!validateFields(payload)) return;\r\n\r\n    const { adminApi } = AuthApi;\r\n    setisLoading(true);\r\n    setApiError(\"\");\r\n\r\n    loginAct(adminApi, payload)\r\n      .then(({ type, token }) => {\r\n        setisLoading(false);\r\n        if (type === \"admin\") {\r\n          localStorage.setItem(\"admin-token\", token);\r\n          localStorage.setItem(\"type\", 1);\r\n          history.push(\"/admins/dashboard\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setisLoading(false);\r\n        setApiError(\"Sorry, something went wrong.\", err.message);\r\n      });\r\n  }\r\n  const onChangeValue = (e) => {\r\n    e.persist && e.persist();\r\n    const { name, value } = e.target || e || {};\r\n\r\n    let tempErrors = { ...error };\r\n\r\n    tempErrors[name] = undefined;\r\n    setData({ ...data, [name]: value });\r\n    setErrors({ ...error, ...tempErrors });\r\n  };\r\n\r\n  const validationRules = () => {\r\n    return {\r\n      email: {\r\n        presence: {\r\n          allowEmpty: false,\r\n          message: \"^Email is required\",\r\n        },\r\n        email: true,\r\n      },\r\n      password: {\r\n        presence: {\r\n          allowEmpty: false,\r\n          message: \"^Password is required\",\r\n        },\r\n        length: {\r\n          minimum: 8,\r\n          tooShort: \"must contain alteast 8 character\",\r\n          maximum: 12,\r\n          tooLong: \"must contain less than 12 character\",\r\n        },\r\n      },\r\n    };\r\n  };\r\n\r\n  const validateFields = (data) => {\r\n    let fieldInvalidList = validate(data, validationRules());\r\n\r\n    if (fieldInvalidList !== undefined) {\r\n      let errors = {\r\n        ...fieldInvalidList,\r\n      };\r\n\r\n      // console.log(errors);\r\n      setErrors({ ...errors, ...fieldInvalidList });\r\n    }\r\n\r\n    return !fieldInvalidList;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"outter_admin_login\">\r\n        <div className=\"container\">\r\n          <div className=\"inner_admin_login\">\r\n            <div className=\"login_wraper\">\r\n              <h2>Mottofit Admin Dashboard </h2>\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"inner_form_loginAdmin\">\r\n                  <label>Email</label>\r\n                  <div>\r\n                    <div className=\"input_item1_signin\">\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Email\"\r\n                        value={data.email}\r\n                        onChange={onChangeValue}\r\n                        name=\"email\"\r\n                      />\r\n                      <img src={Mail} alt=\"icon\" />\r\n                    </div>\r\n                    {error.email && (\r\n                      <span className=\"fs-14 text-danger\">\r\n                        {error.email[0]}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n\r\n                  <label>Password</label>\r\n                  <div>\r\n                    <div className=\"input_item1_signin\">\r\n                      <input\r\n                        type={passwordShown ? \"text\" : \"password\"}\r\n                        placeholder=\"Password\"\r\n                        value={data.password}\r\n                        onChange={onChangeValue}\r\n                        name=\"password\"\r\n                      />\r\n                      <img src={Password} alt=\"icon\" onClick={showPassword} />\r\n                    </div>\r\n                    {error.password && (\r\n                      <span className=\"fs-14 text-danger\">\r\n                        {error.password[0]}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  {apiError && <span className=\"errorMessage\">{apiError}</span>}\r\n                  <button\r\n                    type=\"submit\"\r\n                    onClick={(e) => handleSubmit(e)}\r\n                    disabled={isLoading}\r\n                  >\r\n                    {isLoading ? \"Loading...\" : \"Login\"}\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      loginAct: loginOrSignUp,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst AdminLogin = connect(null, mapDispatchToProps)(AdminLoginFC);\r\n\r\nexport default AdminLogin;\r\n","import AdminLogin from \"component/AdminDashboard/AdminComponents/AdminLogin/AdminLogin\";\r\nimport React from \"react\";\r\n\r\nconst Admin = () => {\r\n    return (\r\n        <div>\r\n            <AdminLogin />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Admin;\r\n"],"sourceRoot":""}