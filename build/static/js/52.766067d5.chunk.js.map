{"version":3,"sources":["component/TrainerSignUp/Banner/index.js","assets/files/SignUp/Phone Icon.svg"],"names":["BannerTrainer","connect","dispatch","bindActionCreators","loginOrSignupAct","loginOrSignUp","history","useHistory","useState","name","email","phoneNumber","password","cpassword","signUpType","data","setData","onChangeValue","e","persist","target","value","passwordShown","setPasswordShown","confirmPasswordShown","setConfirmPasswordShown","apiError","setApiError","useForm","register","errors","handleSubmit","watch","a","payload","console","log","trainerSignUp","AuthApi","then","push","catch","error","message","className","placeholder","type","onChange","ref","pattern","required","minLength","src","Person","alt","Mail","maxLength","Phone","Password","onClick","validate","to"],"mappings":"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","file":"static/js/52.766067d5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles.scss\";\r\nimport Person from \"../../../assets/files/SignUp/Person Icon.svg\";\r\nimport Mail from \"../../../assets/files/SignUp/Email Icon.svg\";\r\nimport Phone from \"../../../assets/files/SignUp/Phone Icon.svg\";\r\nimport Password from \"../../../assets/files/SignUp/Password Icon.svg\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport BlueHoverButton from \"../../common/BlueArrowButton\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginOrSignUp } from \"action/authAct\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { AuthApi } from \"service/apiVariables\";\r\n// import PhoneFormatter from \"react-headless-phone-input/lazy\";\r\n// import PhoneInput from \"react-phone-number-input/input\";\r\n// import \"react-phone-number-input/style.css\";\r\n\r\nconst BannerTrainerFC = ({ loginOrSignupAct }) => {\r\n    const history = useHistory();\r\n    const [data, setData] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        phoneNumber: \"\",\r\n        password: \"\",\r\n        cpassword: \"\",\r\n        signUpType: \"email\",\r\n    });\r\n\r\n    const onChangeValue = (e) => {\r\n        e.persist();\r\n        setData({ ...data, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const [passwordShown, setPasswordShown] = useState(false);\r\n    const [confirmPasswordShown, setConfirmPasswordShown] = useState(false);\r\n    const [apiError, setApiError] = useState(\"\");\r\n    const { register, errors, handleSubmit, watch } = useForm();\r\n    const showPassword = () => {\r\n        setPasswordShown(passwordShown ? false : true);\r\n    };\r\n    const showConfirmPassword = () => {\r\n        setConfirmPasswordShown(confirmPasswordShown ? false : true);\r\n    };\r\n\r\n    async function trainerSignUp() {\r\n        const payload = {\r\n            name: data.name,\r\n            email: data.email,\r\n            password: data.password,\r\n            cpassword: data.cpassword,\r\n            phoneNumber: data.phoneNumber,\r\n            signUpType: data.signUpType,\r\n        };\r\n        console.log(payload);\r\n\r\n        // const requestOptions = {\r\n        //   method: \"POST\",\r\n        //   headers: {\r\n        //     \"Content-Type\": \"application/json\",\r\n        //     Accept: \"application/json\",\r\n        //   },\r\n        //   body: JSON.stringify(item),\r\n        // };\r\n\r\n        const { trainerSignUp } = AuthApi;\r\n\r\n        loginOrSignupAct(trainerSignUp, payload)\r\n            .then(({ data }) => {\r\n                // console.log(data);\r\n                history.push(\"/trainer/about\");\r\n            })\r\n            .catch((error) => {\r\n                setApiError(error.message);\r\n            });\r\n\r\n        // fetch(\"http://doodlebluelive.com:2307/v1/trainer/sign-up\", requestOptions)\r\n        //   .then(async (response) => {\r\n        //     const data = await response.json();\r\n        //     localStorage.setItem(\"user-info\", JSON.stringify(data));\r\n        //     if (response.ok) {\r\n        //     } else {\r\n        //       setApiError(\"Email already registered\", response.statusText);\r\n        //     }\r\n        //   })\r\n    }\r\n\r\n    // const handleChange = (e) => {\r\n    //     const { name, value } = e.target;\r\n    //     setData({\r\n    //         ...data,\r\n    //         [name]: value,\r\n    //     });\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"banner_container_trainer\">\r\n                <div className=\"wrapper_main container\">\r\n                    <div className=\"item_left\">\r\n                        <h2>Sign Up to be a part of the Motto Family</h2>\r\n                        <h6>\r\n                            Create an account to start the application process\r\n                            of becoming a Motto trainer in one of our live\r\n                            cities.\r\n                        </h6>\r\n                    </div>\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"item_right\">\r\n                            <div className=\"inner_wrapper \">\r\n                                <div className=\"inner_items\">\r\n                                    <h3>Train with Motto!</h3>\r\n                                    <p>\r\n                                        Sign up to apply to become a Motto\r\n                                        Trainer\r\n                                    </p>\r\n                                    <div className=\"form_items_trainer\">\r\n                                        <form>\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"First & Last Name\"\r\n                                                    type=\"text\"\r\n                                                    value={data.name}\r\n                                                    name=\"name\"\r\n                                                    onChange={onChangeValue}\r\n                                                    ref={register({\r\n                                                        pattern: /^[A-Za-z_ ]+$/i,\r\n                                                        required: true,\r\n                                                        minLength: 2,\r\n                                                    })}\r\n                                                />\r\n                                                <img src={Person} alt=\"icon\" />\r\n                                                {errors.name && (\r\n                                                    <span>\r\n                                                        {errors.name.message}\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.name?.type ===\r\n                                                    \"required\" && (\r\n                                                    <span>\r\n                                                        This field is required\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.name?.type ===\r\n                                                    \"minLength\" && (\r\n                                                    <span>\r\n                                                        This field should\r\n                                                        contain more then one\r\n                                                        charater\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.name?.type ===\r\n                                                    \"pattern\" && (\r\n                                                    <span>\r\n                                                        This field accept only\r\n                                                        alphabets\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Email\"\r\n                                                    type=\"email\"\r\n                                                    value={data.email}\r\n                                                    name=\"email\"\r\n                                                    onChange={onChangeValue}\r\n                                                    ref={register({\r\n                                                        pattern: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/i,\r\n                                                        required: true,\r\n                                                        minLength: 8,\r\n                                                    })}\r\n                                                />\r\n                                                <img src={Mail} alt=\"icon\" />\r\n                                                {errors.email && (\r\n                                                    <span>\r\n                                                        {errors.email.message}\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.email?.type ===\r\n                                                    \"required\" && (\r\n                                                    <span>\r\n                                                        This field is required\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.email?.type ===\r\n                                                    \"minLength\" && (\r\n                                                    <span>\r\n                                                        This field should\r\n                                                        contain greater then 8\r\n                                                        charater\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.email?.type ===\r\n                                                    \"pattern\" && (\r\n                                                    <span>\r\n                                                        Please enter a valid\r\n                                                        email address\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                {/* <PhoneInput\r\n                                                    placeholder=\"Enter phone number\"\r\n                                                    value={data.phoneNumber}\r\n                                                    onChange={(e) =>\r\n                                                        setData({\r\n                                                            ...data,\r\n                                                        })\r\n                                                    }\r\n                                                    name=\"phone\"\r\n                                                    defaultCountry=\"US\"\r\n                                                /> */}\r\n                                                <input\r\n                                                    placeholder=\"Phone\"\r\n                                                    type=\"tel\"\r\n                                                    value={data.phoneNumber}\r\n                                                    name=\"phoneNumber\"\r\n                                                    onChange={onChangeValue}\r\n                                                    ref={register({\r\n                                                        required: true,\r\n                                                        minLength: 6,\r\n                                                        maxLength: 11,\r\n                                                    })}\r\n                                                />\r\n                                                <img src={Phone} alt=\"icon\" />\r\n                                                {errors.phoneNumber && (\r\n                                                    <span>\r\n                                                        {\r\n                                                            errors.phoneNumber\r\n                                                                .message\r\n                                                        }\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.phoneNumber?.type ===\r\n                                                    \"required\" && (\r\n                                                    <span>\r\n                                                        This field is required\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.phoneNumber?.type ===\r\n                                                    \"minLength\" && (\r\n                                                    <span>\r\n                                                        Enter a valid number\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.phoneNumber?.type ===\r\n                                                    \"maxLength\" && (\r\n                                                    <span>\r\n                                                        This field exceed max\r\n                                                        length\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Create Password\"\r\n                                                    type={\r\n                                                        passwordShown\r\n                                                            ? \"text\"\r\n                                                            : \"password\"\r\n                                                    }\r\n                                                    value={data.password}\r\n                                                    name=\"password\"\r\n                                                    onChange={onChangeValue}\r\n                                                    ref={register({\r\n                                                        required: true,\r\n                                                        minLength: 6,\r\n                                                        maxLength: 16,\r\n                                                        pattern: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/,\r\n                                                    })}\r\n                                                />\r\n                                                <img\r\n                                                    src={Password}\r\n                                                    alt=\"icon\"\r\n                                                    onClick={showPassword}\r\n                                                />\r\n                                                {errors.password?.type ===\r\n                                                    \"required\" && (\r\n                                                    <span>\r\n                                                        This field is required\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.password?.type ===\r\n                                                    \"minLength\" && (\r\n                                                    <span>\r\n                                                        Password should be more\r\n                                                        then 6 Charcters\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.password?.type ===\r\n                                                    \"maxLength\" && (\r\n                                                    <span>\r\n                                                        This field exceed max\r\n                                                        length\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.password?.type ===\r\n                                                    \"pattern\" && (\r\n                                                    <span>\r\n                                                        Password should contain\r\n                                                        atleast one one captial\r\n                                                        letter, number and\r\n                                                        special character\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Confirm Password\"\r\n                                                    type={\r\n                                                        confirmPasswordShown\r\n                                                            ? \"text\"\r\n                                                            : \"password\"\r\n                                                    }\r\n                                                    value={data.cpassword}\r\n                                                    name=\"cpassword\"\r\n                                                    onChange={onChangeValue}\r\n                                                    ref={register({\r\n                                                        validate: (value) =>\r\n                                                            value ===\r\n                                                            watch(\"password\"),\r\n                                                        required: true,\r\n                                                        minLength: 6,\r\n                                                        maxLength: 16,\r\n                                                        pattern: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/,\r\n                                                    })}\r\n                                                />\r\n                                                <img\r\n                                                    src={Password}\r\n                                                    alt=\"icon\"\r\n                                                    onClick={\r\n                                                        showConfirmPassword\r\n                                                    }\r\n                                                />\r\n                                                {errors.cpassword?.type ===\r\n                                                    \"required\" && (\r\n                                                    <span>\r\n                                                        This field is required\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.cpassword?.type ===\r\n                                                    \"minLength\" && (\r\n                                                    <span>\r\n                                                        Password should be more\r\n                                                        then 6 Charcters\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.cpassword?.type ===\r\n                                                    \"maxLength\" && (\r\n                                                    <span>\r\n                                                        This field exceed max\r\n                                                        length\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.cpassword?.type ===\r\n                                                    \"pattern\" && (\r\n                                                    <span>\r\n                                                        Password should contain\r\n                                                        atleast one one captial\r\n                                                        letter, number and\r\n                                                        special character\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.cpassword?.type !==\r\n                                                    errors.password && (\r\n                                                    <span>\r\n                                                        The passwords do not\r\n                                                        match\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n                                            {apiError && (\r\n                                                <span className=\"errorMessage\">\r\n                                                    {apiError}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            <div className=\"submit_button\">\r\n                                                <button\r\n                                                    onClick={handleSubmit(\r\n                                                        trainerSignUp\r\n                                                    )}\r\n                                                >\r\n                                                    <p>Continue to Account</p>\r\n                                                    <ArrowHoverBlacked />\r\n                                                </button>\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                    <div className=\"login_items\">\r\n                                        <h4>Already have an account?</h4>\r\n\r\n                                        <Link to=\"/\">\r\n                                            Sign In now\r\n                                            <BlueHoverButton />\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators(\r\n        {\r\n            loginOrSignupAct: loginOrSignUp,\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst BannerTrainer = connect(null, mapDispatchToProps)(BannerTrainerFC);\r\n\r\nexport default BannerTrainer;\r\n","export default __webpack_public_path__ + \"static/media/Phone Icon.f207d1b4.svg\";"],"sourceRoot":""}