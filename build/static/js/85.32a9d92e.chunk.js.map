{"version":3,"sources":["component/TrainerSignUp/Banner/index.js","assets/files/SignUp/Phone Icon.svg"],"names":["BannerTrainer","connect","dispatch","bindActionCreators","loginOrSignupAct","loginOrSignUp","history","submitForm","useHistory","useState","name","email","phoneNumber","password","cpassword","signUpType","data","setData","error","setErrors","onChangeValue","e","persist","target","value","tempErrors","undefined","passwordShown","setPasswordShown","confirmPasswordShown","setConfirmPasswordShown","apiError","setApiError","handleSubmit","a","preventDefault","payload","validateFields","includes","trainerSignUp","AuthApi","then","localStorage","setItem","push","catch","message","fieldInvalidList","validate","passwordValidation","format","pattern","flags","length","minimum","tooShort","maximum","tooLong","presence","allowEmpty","equality","attribute","comparator","v1","v2","JSON","stringify","validationRules","errors","console","log","className","onSubmit","placeholder","type","onChange","src","Person","alt","Mail","disableDropdown","countryCodeEditable","country","inputProps","Phone","Password","onClick","to"],"mappings":"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","file":"static/js/85.32a9d92e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles.scss\";\r\nimport Person from \"../../../assets/files/SignUp/Person Icon.svg\";\r\nimport Mail from \"../../../assets/files/SignUp/Email Icon.svg\";\r\nimport Phone from \"../../../assets/files/SignUp/Phone Icon.svg\";\r\nimport Password from \"../../../assets/files/SignUp/Password Icon.svg\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport BlueHoverButton from \"../../common/BlueArrowButton\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginOrSignUp } from \"action/authAct\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { AuthApi } from \"service/apiVariables\";\r\n// import useForm from \"./useForm\";\r\n// import validateInfo from \"./validation\";\r\nimport ReactPhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport validate from \"service/validation\";\r\n\r\nconst BannerTrainerFC = ({ loginOrSignupAct, submitForm }) => {\r\n  const history = useHistory();\r\n\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    phoneNumber: \"\",\r\n    password: \"\",\r\n    cpassword: \"\",\r\n    signUpType: \"email\",\r\n  });\r\n\r\n  const [error, setErrors] = useState({});\r\n\r\n  // const { data, handleFormSubmit, error, setData, dataSubmit } = useForm(\r\n  //     validateInfo,\r\n  //     submitForm\r\n  // );\r\n\r\n  const onChangeValue = (e) => {\r\n    e.persist && e.persist();\r\n    const { name, value } = e.target || e || {};\r\n\r\n    let tempErrors = { ...error };\r\n\r\n    tempErrors[name] = undefined;\r\n    setData({ ...data, [name]: value });\r\n    setErrors({ ...error, ...tempErrors });\r\n  };\r\n\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n  const [confirmPasswordShown, setConfirmPasswordShown] = useState(false);\r\n  const [apiError, setApiError] = useState(\"\");\r\n  const showPassword = () => {\r\n    setPasswordShown(passwordShown ? false : true);\r\n  };\r\n  const showConfirmPassword = () => {\r\n    setConfirmPasswordShown(confirmPasswordShown ? false : true);\r\n  };\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    let payload = {\r\n      name: data.name,\r\n      email: data.email,\r\n      password: data.password,\r\n      cpassword: data.cpassword,\r\n      phoneNumber: data.phoneNumber,\r\n      signUpType: data.signUpType,\r\n    };\r\n\r\n    if (!validateFields(payload)) return;\r\n\r\n    payload[\"phoneNumber\"] = data.phoneNumber.includes(\"+\")\r\n      ? data.phoneNumber\r\n      : `+${data?.phoneNumber}`;\r\n\r\n    const { trainerSignUp } = AuthApi;\r\n    // console.log(payload);\r\n\r\n    // if (dataSubmit) {\r\n    loginOrSignupAct(trainerSignUp, payload)\r\n      .then(({ data }) => {\r\n        localStorage.setItem(\"type\", 2);\r\n        history.push(\"/trainer/about\");\r\n      })\r\n      .catch((error) => {\r\n        setApiError(error.message);\r\n      });\r\n    // }\r\n  }\r\n\r\n  const validationRules = () => {\r\n    let passwordValidation = {\r\n      format: {\r\n        pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!_#%*?&])[A-Za-z\\d@_#$!%*?&]*$/,\r\n        flags: \"i\",\r\n        message:\r\n          \"^Password must contain at least one uppercase letter, one lowercase letter, one number and one special character\",\r\n      },\r\n      length: {\r\n        minimum: 8,\r\n        tooShort: \"must contain alteast 8 character\",\r\n        maximum: 12,\r\n        tooLong: \"must contain less than 12 character\",\r\n      },\r\n    };\r\n    return {\r\n      name: {\r\n        presence: {\r\n          allowEmpty: false,\r\n          message: \"^Name is required\",\r\n        },\r\n        format: {\r\n          pattern: /^[a-zA-Z ]*$/,\r\n          flags: \"i\",\r\n          message: \"^Enter a valid name\",\r\n        },\r\n        length: {\r\n          minimum: 3,\r\n          tooShort: \"must contain alteast 3 character\",\r\n          maximum: 35,\r\n          tooLong: \"must contain less than 35 character\",\r\n        },\r\n      },\r\n      phoneNumber: {\r\n        presence: {\r\n          allowEmpty: false,\r\n          message: \"^Phone number is required\",\r\n        },\r\n        // format: {\r\n        //   pattern: /^[1-9][0-9]*$/,\r\n        //   flags: \"i\",\r\n        //   message: \"^Invalid number\",\r\n        // },\r\n        length: {\r\n          minimum: 8,\r\n          tooShort: \"^Invalid number\",\r\n          maximum: 15,\r\n          tooLong: \"^Invalid number\",\r\n        },\r\n      },\r\n      email: {\r\n        presence: {\r\n          allowEmpty: false,\r\n          message: \"^Email is required\",\r\n        },\r\n        email: true,\r\n      },\r\n      password: {\r\n        presence: {\r\n          allowEmpty: false,\r\n          message: \"^Password is required\",\r\n        },\r\n        ...passwordValidation,\r\n      },\r\n      cpassword: {\r\n        presence: {\r\n          allowEmpty: false,\r\n          message: \"^Confirm password is required\",\r\n        },\r\n        equality: {\r\n          attribute: \"password\",\r\n          message: \"^Passwords doesn't match\",\r\n          comparator: function (v1, v2) {\r\n            return JSON.stringify(v1) === JSON.stringify(v2);\r\n          },\r\n        },\r\n        ...passwordValidation,\r\n      },\r\n    };\r\n  };\r\n\r\n  const validateFields = (data) => {\r\n    let fieldInvalidList = validate(data, validationRules());\r\n\r\n    if (fieldInvalidList !== undefined) {\r\n      let errors = {\r\n        ...fieldInvalidList,\r\n      };\r\n\r\n      console.log(errors);\r\n      setErrors({ ...errors, ...fieldInvalidList });\r\n    }\r\n\r\n    return !fieldInvalidList;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"banner_container_trainer\">\r\n        <div className=\"wrapper_main container\">\r\n          <div className=\"item_left\">\r\n            <h2>Sign Up to be a part of the Motto Family</h2>\r\n            <h6>\r\n              Create an account to start the application process of becoming a\r\n              Motto trainer in one of our live cities.\r\n            </h6>\r\n          </div>\r\n          <div className=\"wrapper\">\r\n            <div className=\"item_right\">\r\n              <div className=\"inner_wrapper \">\r\n                <div className=\"inner_items\">\r\n                  <h3>Train with Motto!</h3>\r\n                  <p>Sign up to apply to become a Motto Trainer</p>\r\n                  <div className=\"form_items_trainer\">\r\n                    <form onSubmit={handleSubmit}>\r\n                      <div className=\"input_items_trainer\">\r\n                        <input\r\n                          placeholder=\"Full Name\"\r\n                          type=\"text\"\r\n                          value={data.name}\r\n                          name=\"name\"\r\n                          onChange={onChangeValue}\r\n                          className=\"fullname\"\r\n                        />\r\n                        <img src={Person} alt=\"icon\" />\r\n                        {error.name && <span>{error.name[0]}</span>}\r\n                      </div>\r\n\r\n                      <div className=\"input_items_trainer\">\r\n                        <input\r\n                          placeholder=\"Email\"\r\n                          type=\"email\"\r\n                          value={data.email}\r\n                          name=\"email\"\r\n                          onChange={onChangeValue}\r\n                        />\r\n                        <img src={Mail} alt=\"icon\" />\r\n                        {error.email && <span>{error.email[0]}</span>}\r\n                      </div>\r\n\r\n                      <div className=\"input_items_trainer\">\r\n                        <ReactPhoneInput\r\n                          disableDropdown\r\n                          countryCodeEditable={false}\r\n                          country=\"us\"\r\n                          placeholder=\"Phone Number\"\r\n                          inputProps={{\r\n                            name: \"phoneNumber\",\r\n                          }}\r\n                          value={data.phoneNumber}\r\n                          name=\"phoneNumber\"\r\n                          onChange={(e) => {\r\n                            onChangeValue({\r\n                              target: {\r\n                                name: \"phoneNumber\",\r\n                                value: e,\r\n                              },\r\n                            });\r\n                          }}\r\n                        />\r\n\r\n                        <img src={Phone} alt=\"icon\" />\r\n                        {error.phoneNumber && (\r\n                          <span>{error.phoneNumber[0]}</span>\r\n                        )}\r\n                      </div>\r\n\r\n                      <div className=\"input_items_trainer\">\r\n                        <input\r\n                          placeholder=\"Create Password\"\r\n                          type={passwordShown ? \"text\" : \"password\"}\r\n                          value={data.password}\r\n                          name=\"password\"\r\n                          onChange={onChangeValue}\r\n                        />\r\n                        <img src={Password} alt=\"icon\" onClick={showPassword} />\r\n                        {error.password && <span>{error.password[0]}</span>}\r\n                      </div>\r\n\r\n                      <div className=\"input_items_trainer\">\r\n                        <input\r\n                          placeholder=\"Confirm Password\"\r\n                          type={confirmPasswordShown ? \"text\" : \"password\"}\r\n                          value={data.cpassword}\r\n                          name=\"cpassword\"\r\n                          onChange={onChangeValue}\r\n                        />\r\n                        <img\r\n                          src={Password}\r\n                          alt=\"icon\"\r\n                          onClick={showConfirmPassword}\r\n                        />\r\n                        {error.cpassword && <span>{error.cpassword[0]}</span>}\r\n                      </div>\r\n                      {apiError && (\r\n                        <span className=\"errorMessage\">{apiError}</span>\r\n                      )}\r\n\r\n                      <div className=\"submit_button\">\r\n                        <button type=\"submit\" onClick={handleSubmit}>\r\n                          Continue to Account\r\n                          <ArrowHoverBlacked />\r\n                        </button>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                  <div className=\"login_items\">\r\n                    <h4>Already have an account?</h4>\r\n\r\n                    <Link to=\"/\">\r\n                      Sign In now\r\n                      <BlueHoverButton />\r\n                    </Link>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <br />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      loginOrSignupAct: loginOrSignUp,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst BannerTrainer = connect(null, mapDispatchToProps)(BannerTrainerFC);\r\n\r\nexport default BannerTrainer;\r\n","export default __webpack_public_path__ + \"static/media/Phone Icon.f207d1b4.svg\";"],"sourceRoot":""}