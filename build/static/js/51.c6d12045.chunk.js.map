{"version":3,"sources":["component/TrainerDashBoard/DashboardCompontents/TrainerMessages/index.js","pages/TrainerDashboard/TrainerMessage/index.js","assets/files/TrainerDashboard/Message/Jenny.png","assets/files/TrainerDashboard/Message/Availability Icon.svg","assets/files/TrainerDashboard/Message/Location Icon.svg","assets/files/TrainerDashboard/Message/Image 1.png","assets/files/TrainerDashboard/Message/Shedule Icon.svg"],"names":["Chatt","require","RightChat","props","className","data","src","Jonn","alt","TrainerMessage","connect","dispatch","bindActionCreators","trainerChannel","useState","individual_list","setIndividual","socialGroup_list","setSocialGroup_list","admin_list","setAdmin_list","Channel","setChannel","messages","setMessages","text_thread","setText_thread","chattoken","useEffect","getIdentityToken","twilioApi","id","localStorage","getItem","api","then","chatToken","console","log","catch","err","Toast","type","message","individualClient","socialGroups","admins","sendText","sendMessage","on","handleMessageAdded","channelID","a","Client","create","client","channel","getChannelByUniqueName","res","join","getMessages","PopulateContacts","loadMessages","messagesEndRef","useRef","defaultTab","onChange","tabId","tabFor","map","item","Jenny","onClick","SheduleIcon","Date","toDateString","AvailabilityIcon","toLocaleTimeString","LocationIcon","ref","placeholder","value","event","target","Main"],"mappings":"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","file":"static/js/51.c6d12045.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Tabs, Tab, TabPanel, TabList } from \"react-web-tabs\";\r\nimport \"react-web-tabs/dist/react-web-tabs.css\";\r\nimport \"./style.scss\";\r\nimport Jenny from \"../../../../assets/files/TrainerDashboard/Message/Jenny.png\";\r\nimport Jonn from \"../../../../assets/files/TrainerDashboard/Message/Image 1.png\";\r\nimport SheduleIcon from \"../../../../assets/files/TrainerDashboard/Message/Shedule Icon.svg\";\r\nimport AvailabilityIcon from \"../../../../assets/files/TrainerDashboard/Message/Availability Icon.svg\";\r\nimport LocationIcon from \"../../../../assets/files/TrainerDashboard/Message/Location Icon.svg\";\r\nimport BlueHoverButton from \"../../../common/BlueArrowButton/index\";\r\nimport { trainerChannel } from \"action/trainerAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { twilioApi } from \"../../../../service/apiVariables\";\r\nimport { api } from \"../../../../service/api\";\r\nimport { Toast } from \"../../../../service/toast\";\r\nconst Chatt = require(\"twilio-chat\");\r\n\r\nconst TrainerMessageClass = ({ trainerChannel }) => {\r\n  const [individual_list, setIndividual] = useState([]);\r\n  const [socialGroup_list, setSocialGroup_list] = useState([]);\r\n  const [admin_list, setAdmin_list] = useState([]);\r\n  const [Channel, setChannel] = useState([]);\r\n  const [Client, setClient] = useState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [text_thread, setText_thread] = useState([]);\r\n  const [chattoken, setToken] = useState(\"\");\r\n  const [channel_id, setChannel_id] = useState(\"\");\r\n\r\n  // Make Id dynamic\r\n  useEffect(() => {\r\n    const { getIdentityToken } = twilioApi;\r\n\r\n    getIdentityToken.id = localStorage.getItem(\"user-id\");\r\n\r\n    api({ ...getIdentityToken })\r\n      .then(({ chatToken }) => {\r\n        console.log(chatToken);\r\n      })\r\n      .catch((err) => {\r\n        Toast({ type: \"error\", message: err.message || \"Error\" });\r\n      });\r\n    // fetch(\r\n    //   \"https://apis.bookmotto.com/messaging/v1/token?identity=7f007fd1-7042-4c1c-b8ea-3d739cf9f707\",\r\n    //   {\r\n    //     method: \"get\",\r\n    //     headers: new Headers({\r\n    //       Authorization: localStorage.getItem(\"token\"),\r\n    //       \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n    //     }),\r\n    //   }\r\n    // )\r\n    //   .then((response) => response.json())\r\n    //   .then((data) => {\r\n    //     setToken(data[\"chatToken\"]);\r\n\r\n    //     // var channel;\r\n\r\n    //     // Chatt.Client.create(data[\"chatToken\"]).then((client) => {\r\n    //     //   // Use client\r\n\r\n    //     //   // client.getChannelByUniqueName(channel_id).then((res) => {\r\n    //     //   //   console.log(res);\r\n    //     //   //   channel = res;\r\n    //     //   //   setChannel(channel);\r\n    //     //   //   channel.join();\r\n    //     //   // });\r\n\r\n    //     //   setClient(client);\r\n\r\n    //     //   // client.on(\"channelJoined\", async (channel) => {\r\n    //     //   //   // getting list of all messages since this is an existing channel\r\n    //     //   //   console.log(\"joined\");\r\n    //     //   //   const message = await channel.getMessages();\r\n    //     //   //   // this.setState({ messages: messages.items || [] });\r\n    //     //   //   setMessages(message[\"items\"]);\r\n    //     //   //   console.log(message[\"items\"][0]);\r\n    //     //   //   // scrollToBottom();\r\n    //     //   // });\r\n    //     // });\r\n    //   });\r\n\r\n    // Twilio initialisation\r\n    // var token = chattoken;\r\n    // var channel;\r\n    // Chatt.Client.create(chattoken).then((client) => {\r\n    //   // Use client\r\n\r\n    //   client\r\n    //     .getChannelByUniqueName(\"CH968a07b6614642508c1cfda691f4c698\")\r\n    //     .then((res) => {\r\n    //       console.log(res);\r\n    //       channel = res;\r\n    //       setChannel(channel);\r\n    //       channel.join();\r\n    //     });\r\n\r\n    //   setClient(client);\r\n\r\n    //   client.on(\"channelJoined\", async (channel) => {\r\n    //     // getting list of all messages since this is an existing channel\r\n    //     console.log(\"joined\");\r\n    //     const message = await channel.getMessages();\r\n    //     // this.setState({ messages: messages.items || [] });\r\n    //     setMessages(message[\"items\"]);\r\n    //     console.log(message[\"items\"][0]);\r\n    //   });\r\n    // });\r\n\r\n    // Get Contact_list\r\n    trainerChannel().then((data) => {\r\n      setIndividual(data.individualClient);\r\n      setSocialGroup_list(data.socialGroups);\r\n      setAdmin_list(data.admins);\r\n    });\r\n  }, []);\r\n\r\n  const sendText = () => {\r\n    var temp = {};\r\n    temp.state = text_thread;\r\n    Channel.sendMessage(text_thread);\r\n\r\n    Channel.on(\"messageAdded\", handleMessageAdded);\r\n    //  const message = () => Channel.getMessages();\r\n    //  setMessages([])\r\n\r\n    setText_thread(\" \");\r\n  };\r\n\r\n  const handleMessageAdded = (message) => {\r\n    setMessages((messages) => [...messages, message]);\r\n  };\r\n\r\n  async function loadMessages(channelID) {\r\n    setMessages([]);\r\n    // setChannel_id(channel_id);\r\n\r\n    Chatt.Client.create(chattoken).then((client) => {\r\n      var channel;\r\n      client.getChannelByUniqueName(channelID).then((res) => {\r\n        channel = res;\r\n        setChannel(channel);\r\n        channel.join();\r\n      });\r\n\r\n      client.on(\"channelAdded\", function (channel) {});\r\n\r\n      client.on(\"channelJoined\", async (channel) => {\r\n        // getting list of all messages since this is an existing channel\r\n        const message = await channel.getMessages();\r\n        // this.setState({ messages: messages.items || [] });\r\n        setMessages(message[\"items\"]);\r\n        // scrollToBottom();\r\n      });\r\n\r\n      client.on(\"channelRemoved\", function (channel) {\r\n        //  setMessages([])\r\n      });\r\n    });\r\n  }\r\n\r\n  function PopulateContacts(channelID) {\r\n    loadMessages(channelID);\r\n  }\r\n\r\n  const messagesEndRef = useRef();\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container main_message_container\">\r\n        <div className=\"message_outter_container\">\r\n          <h2>Messages</h2>\r\n          <div className=\"message_inner\">\r\n            <div className=\"message_wrapper\">\r\n              <Tabs\r\n                defaultTab=\"one\"\r\n                onChange={(tabId) => {\r\n                  console.log(tabId);\r\n                }}\r\n              >\r\n                <TabList>\r\n                  <Tab tabFor=\"one\">All</Tab>\r\n                  <Tab tabFor=\"two\">INDIVIDUAL CLIENTS</Tab>\r\n                  <Tab tabFor=\"three\">SOCIAL GROUPS</Tab>\r\n                  <Tab tabFor=\"four\">ADMIN</Tab>\r\n                </TabList>\r\n                <div className=\"message_inner\">\r\n                  <TabPanel tabId=\"one\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {[\r\n                          ...individual_list,\r\n                          ...socialGroup_list,\r\n                          ...admin_list,\r\n                        ].map((item) => {\r\n                          return (\r\n                            <div className=\"contact_item\">\r\n                              <div className=\"inner_link\">\r\n                                <img src={Jenny} alt=\"icon\" />\r\n                                <div\r\n                                  className=\"message_link_notify\"\r\n                                  onClick={() =>\r\n                                    PopulateContacts(item[\"channelUniqueName\"])\r\n                                  }\r\n                                >\r\n                                  <h3>{item[\"members\"][0][\"userName\"]}</h3>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <div className=\"message_right_chatarea\">\r\n                          <div className=\"message_right_header\">\r\n                            <h2>Strength & HIIT with Jeremy Clark</h2>\r\n                            <div className=\"message_header_times\">\r\n                              <div className=\"message_header_items\">\r\n                                <img src={SheduleIcon} alt=\"icon\" />\r\n                                <h5> {new Date().toDateString()}</h5>\r\n                              </div>\r\n                              <div className=\"message_header_items\">\r\n                                <img src={AvailabilityIcon} alt=\"icon\" />\r\n                                <h5>{new Date().toLocaleTimeString()}</h5>\r\n                              </div>\r\n                              <div className=\"message_header_items\">\r\n                                <img src={LocationIcon} alt=\"icon\" />\r\n                                <h5>Chennai, TN</h5>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"message_right_textarea\">\r\n                            {messages.map((item) => {\r\n                              return <RightChat data={item[\"state\"][\"body\"]} />;\r\n                            })}\r\n                            <div ref={messagesEndRef} />\r\n                          </div>\r\n                          <div className=\"message_right_input\">\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Type your message here..\"\r\n                              value={text_thread}\r\n                              onChange={(event) => {\r\n                                setText_thread(event.target.value);\r\n                              }}\r\n                            />\r\n                            <div onClick={sendText}>\r\n                              <BlueHoverButton />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n                  <TabPanel tabId=\"two\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {individual_list.map((item) => {\r\n                          return (\r\n                            <div className=\"contact_item\">\r\n                              <div className=\"inner_link\">\r\n                                <img src={Jenny} alt=\"icon\" />\r\n                                <div\r\n                                  className=\"message_link_notify\"\r\n                                  onClick={() =>\r\n                                    PopulateContacts(item[\"channelUniqueName\"])\r\n                                  }\r\n                                >\r\n                                  <h3>{item[\"members\"][0][\"userName\"]}</h3>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <div className=\"message_right_chatarea\">\r\n                          <div className=\"message_right_header\">\r\n                            <h2>Strength & HIIT with Jeremy Clark</h2>\r\n                            <div className=\"message_header_times\">\r\n                              <div className=\"message_header_items\">\r\n                                <img src={SheduleIcon} alt=\"icon\" />\r\n                                <h5> {new Date().toDateString()}</h5>\r\n                              </div>\r\n                              <div className=\"message_header_items\">\r\n                                <img src={AvailabilityIcon} alt=\"icon\" />\r\n                                <h5>{new Date().toLocaleTimeString()}</h5>\r\n                              </div>\r\n                              <div className=\"message_header_items\">\r\n                                <img src={LocationIcon} alt=\"icon\" />\r\n                                <h5>Chennai, TN</h5>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"message_right_textarea\">\r\n                            {messages.map((item) => {\r\n                              return <RightChat data={item[\"state\"][\"body\"]} />;\r\n                            })}\r\n                            <div ref={messagesEndRef} />\r\n                          </div>\r\n                          <div className=\"message_right_input\">\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Type your message here..\"\r\n                              value={text_thread}\r\n                              onChange={(event) => {\r\n                                setText_thread(event.target.value);\r\n                              }}\r\n                            />\r\n                            <div onClick={sendText}>\r\n                              <BlueHoverButton />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n                  <TabPanel tabId=\"three\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {socialGroup_list.map((item) => {\r\n                          return (\r\n                            <div className=\"contact_item\">\r\n                              <div className=\"inner_link\">\r\n                                <img src={Jenny} alt=\"icon\" />\r\n                                <div\r\n                                  className=\"message_link_notify\"\r\n                                  onClick={() =>\r\n                                    PopulateContacts(item[\"channelUniqueName\"])\r\n                                  }\r\n                                >\r\n                                  <h3>{item[\"members\"][0][\"userName\"]}</h3>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <div className=\"message_right_chatarea\">\r\n                          <div className=\"message_right_header\">\r\n                            <h2>Strength & HIIT with Jeremy Clark</h2>\r\n                            <div className=\"message_header_times\">\r\n                              <div className=\"message_header_items\">\r\n                                <img src={SheduleIcon} alt=\"icon\" />\r\n                                <h5> {new Date().toDateString()}</h5>\r\n                              </div>\r\n                              <div className=\"message_header_items\">\r\n                                <img src={AvailabilityIcon} alt=\"icon\" />\r\n                                <h5>{new Date().toLocaleTimeString()}</h5>\r\n                              </div>\r\n                              <div className=\"message_header_items\">\r\n                                <img src={LocationIcon} alt=\"icon\" />\r\n                                <h5>Chennai, TN</h5>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"message_right_textarea\">\r\n                            {messages.map((item) => {\r\n                              return <RightChat data={item[\"state\"][\"body\"]} />;\r\n                            })}\r\n                            <div ref={messagesEndRef} />\r\n                          </div>\r\n                          <div className=\"message_right_input\">\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Type your message here..\"\r\n                              value={text_thread}\r\n                              onChange={(event) => {\r\n                                setText_thread(event.target.value);\r\n                              }}\r\n                            />\r\n                            <div onClick={sendText}>\r\n                              <BlueHoverButton />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n                  <TabPanel tabId=\"four\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {admin_list.map((item) => {\r\n                          return (\r\n                            <div className=\"contact_item\">\r\n                              <div className=\"inner_link\">\r\n                                <img src={Jenny} alt=\"icon\" />\r\n                                <div\r\n                                  className=\"message_link_notify\"\r\n                                  onClick={() =>\r\n                                    PopulateContacts(item[\"channelUniqueName\"])\r\n                                  }\r\n                                >\r\n                                  <h3>{item[\"members\"][0][\"userName\"]}</h3>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <div className=\"message_right_chatarea\">\r\n                          <div className=\"message_right_header\">\r\n                            <h2>Strength & HIIT with Jeremy Clark</h2>\r\n                            <div className=\"message_header_times\">\r\n                              <div className=\"message_header_items\">\r\n                                <img src={SheduleIcon} alt=\"icon\" />\r\n                                <h5> {new Date().toDateString()}</h5>\r\n                              </div>\r\n                              <div className=\"message_header_items\">\r\n                                <img src={AvailabilityIcon} alt=\"icon\" />\r\n                                <h5>{new Date().toLocaleTimeString()}</h5>\r\n                              </div>\r\n                              <div className=\"message_header_items\">\r\n                                <img src={LocationIcon} alt=\"icon\" />\r\n                                <h5>Chennai, TN</h5>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"message_right_textarea\">\r\n                            {messages.map((item) => {\r\n                              return <RightChat data={item[\"state\"][\"body\"]} />;\r\n                            })}\r\n                            <div ref={messagesEndRef} />\r\n                          </div>\r\n                          <div className=\"message_right_input\">\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Type your message here..\"\r\n                              value={text_thread}\r\n                              onChange={(event) => {\r\n                                setText_thread(event.target.value);\r\n                              }}\r\n                            />\r\n                            <div onClick={sendText}>\r\n                              <BlueHoverButton />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n                </div>\r\n              </Tabs>\r\n              <div className=\"\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nconst RightChat = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"message_chat_right\">\r\n        <div className=\"message_text\">\r\n          <h5>{props.data}</h5>\r\n        </div>\r\n\r\n        <img src={Jonn} alt=\"icon\" />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n// const LeftChat = (props) => {\r\n//     return (\r\n//         <>\r\n//             <div className=\"message_chat_right\">\r\n//                 <div className=\"message_text\">\r\n//                     <h5>{props.data}</h5>\r\n//                 </div>\r\n\r\n//                 <img src={Jonn} alt=\"icon\" />\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      trainerChannel,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst TrainerMessage = connect(null, mapDispatchToProps)(TrainerMessageClass);\r\n\r\nexport default TrainerMessage;\r\n","import React from \"react\";\r\nimport TrainerMessage from \"component/TrainerDashBoard/DashboardCompontents/TrainerMessages/index\";\r\n\r\nexport default function Main() {\r\n  return (\r\n    <div>\r\n      {/* Banner  */}\r\n      <TrainerMessage />\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Jenny.c50273b9.png\";","export default __webpack_public_path__ + \"static/media/Availability Icon.ad0517cb.svg\";","export default __webpack_public_path__ + \"static/media/Location Icon.cbb0b32d.svg\";","export default __webpack_public_path__ + \"static/media/Image 1.5667afc3.png\";","export default __webpack_public_path__ + \"static/media/Shedule Icon.7b9fb7aa.svg\";"],"sourceRoot":""}