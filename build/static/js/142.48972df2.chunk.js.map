{"version":3,"sources":["HOC/LoaderWrapper.js"],"names":["defaultProps","page","filter","search","LoaderWrapper","WrappedComponent","props","state","loading","componentAPIprops","getComponentProps","isLoading","componentProps","loaderKey","every","key","callActions","this","then","data","setState","compProp","className","Component","history","location","query","convertStringToObject","Promise","resolve","reject","all","actions","map","action","handler","match","params","initialLoad","getDirectPropsRelatedData","catch","index","Boolean","reduce","acc","propIndex","propsKey"],"mappings":"wNAGIA,EAAe,CACfC,KAAM,EAAGC,OAAQ,GAAIC,OAAQ,IAIpBC,EAAgB,SAAAC,GAEzB,OAAO,SAAAC,GAEH,yDAEI,WAAYA,GAAQ,IAAD,8BACf,cAAMA,IAGVC,MAAQ,CACJC,SAAS,EACTC,kBAAkB,IANH,EAsBnBC,kBAAoB,WAChB,OAAO,2BAAI,EAAKJ,OAAS,EAAKC,MAAME,oBAvBrB,EAwCnBE,UAAY,WAAgBC,GACxB,OAD2C,EAAhCC,UACMC,OAAM,SAACC,GAAD,MAAiC,KAAxBH,EAAeG,OAzChC,EAFvB,sDAWI,WAAsB,IAAD,OAEjBC,EAAYV,EAAOW,KAAKX,OAAOY,MAAK,SAACC,GAC5Bb,EAAMO,WACP,EAAKO,SAAS,CACVZ,SAAS,EACTC,kBAAkBU,SAjBtC,uCA4BI,SAA0BE,GAClBf,EAAMO,WAEFI,KAAKN,UAAUL,EAAOe,IACtBJ,KAAKG,SAAS,CACVZ,SAAS,MAjC7B,oBA+CI,WAMI,OAHkBS,KAAKV,MAAjBC,QAME,qBAAKc,UAAU,cAAf,SACI,qBAAKA,UAAU,gCAAf,SACI,qBAAKA,UAAU,sBAQvB,mCACI,cAACjB,EAAD,eAAsBY,KAAKP,4BAnE/C,GAA0Ba,eAiF5BP,EAAc,SAACV,EAAOM,GAExB,MAAiDA,EAA3CY,eAAN,MAAgB,CAAEC,SAAU,CAAEtB,OAAQ,KAAtC,EAEIuB,EAAQC,gCAAsBH,EAAQC,SAAStB,QAEnD,OAAO,IAAIyB,SAAQ,SAACC,EAASC,GAEzBF,QAAQG,IAAIzB,EAAM0B,QAAQC,KAAI,SAACC,GAE3B,MAAqB,kBAAXA,GAAqBA,EAAOC,QAE/BD,EAAOC,QAAP,uCAAmBnC,GAAiBY,EAAewB,MAAQxB,EAAewB,MAAMC,OAAS,IAAzF,IAA6FC,aAAa,EAAMF,MAAOxB,EAAewB,OAAUV,IAIhJd,EAAesB,GAAf,uCAA2BlC,GAAiBY,EAAewB,MAAQxB,EAAewB,MAAMC,OAAS,IAAjG,IAAqGC,aAAa,EAAMF,MAAOxB,EAAewB,OAAUV,QAE/JR,MAAK,SAACC,GACNU,EAAQU,EAA0BpB,EAAKb,EAAM0B,aAC9CQ,OAAM,SAACrB,GAENU,GAAQ,UAQdU,EAA4B,SAACpB,EAAKa,GAUpC,OARiBA,EAAQC,KAAI,SAACC,EAAOO,GACjC,QAAmB,kBAATP,IAAqBA,EAAOC,UAC3BM,KAGZvC,OAAOwC,SAGQC,QAAO,SAACC,EAAIC,GAM1B,OAFAD,EAFiBZ,EAAQa,GAAWC,UAElB3B,EAAK0B,GAEhBD,IACT","file":"static/js/142.48972df2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { convertStringToObject } from \"service/helperFunctions\"\r\n\r\nlet defaultProps = {\r\n    page: 1, filter: '', search: ''\r\n}\r\n\r\n\r\nexport const LoaderWrapper = WrappedComponent => {\r\n\r\n    return props => {\r\n\r\n        return class Temp extends Component {\r\n\r\n            constructor(props) {\r\n                super(props)\r\n            }\r\n\r\n            state = {\r\n                loading: true,\r\n                componentAPIprops:{}\r\n            }\r\n\r\n            componentWillMount() {\r\n\r\n                callActions(props, this.props).then((data) => {\r\n                    if (!props.loaderKey) {\r\n                        this.setState({\r\n                            loading: false,\r\n                            componentAPIprops:data\r\n                        })\r\n                    }\r\n\r\n                })\r\n            }\r\n\r\n            getComponentProps = () => {\r\n                return {...this.props,...this.state.componentAPIprops}\r\n            }\r\n\r\n            componentWillReceiveProps(compProp) {\r\n                if (props.loaderKey) {\r\n\r\n                    if (this.isLoading(props, compProp)) {\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            isLoading = ({ loaderKey }, componentProps) => {\r\n                return loaderKey.every((key) => componentProps[key] !== '')\r\n            }       \r\n\r\n\r\n            render() {\r\n\r\n\r\n                let { loading } = this.state\r\n\r\n\r\n                if (loading) {\r\n                    //loader\r\n                    return (\r\n                        <div className=\"page-loader\">\r\n                            <div className=\"position-relative w-100 h-100\">\r\n                                <div className=\"loader-circle\"></div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    )\r\n                } else {\r\n\r\n                    return (\r\n                        <>\r\n                            <WrappedComponent {...this.getComponentProps()} />\r\n\r\n                        </>\r\n                    )\r\n\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n//handling api call\r\nconst callActions = (props, componentProps) => {\r\n\r\n    let { history = { location: { search: '' } } } = componentProps\r\n\r\n    let query = convertStringToObject(history.location.search)   \r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        Promise.all(props.actions.map((action) => {  \r\n            \r\n            if(typeof action === 'object'&&action.handler){\r\n                \r\n            return action.handler({...defaultProps, ...componentProps.match ? componentProps.match.params : {}, initialLoad: true, match: componentProps.match, ...query })\r\n\r\n            }   \r\n\r\n            return componentProps[action]({...defaultProps, ...componentProps.match ? componentProps.match.params : {}, initialLoad: true, match: componentProps.match, ...query })\r\n\r\n        })).then((data) => {\r\n            resolve(getDirectPropsRelatedData(data,props.actions))\r\n        }).catch((data) => {\r\n\r\n            resolve(true)\r\n\r\n        })\r\n\r\n    })\r\n\r\n}\r\n\r\nconst getDirectPropsRelatedData = (data,actions) =>{\r\n\r\n    let propsIndex = actions.map((action,index)=>{\r\n        if(typeof action==='object' && action.handler){\r\n            return index\r\n        }\r\n        return false \r\n    }).filter(Boolean)\r\n\r\n\r\n    return propsIndex.reduce((acc,propIndex)=>{\r\n\r\n        let propsLabel = actions[propIndex].propsKey\r\n\r\n        acc[propsLabel] = data[propIndex]\r\n\r\n        return acc\r\n    },{})\r\n\r\n}"],"sourceRoot":""}