{"version":3,"sources":["component/SignUp/Banner/index.js","component/common/ButtonIcon/ArrowHover.jsx","assets/files/SignUp/Phone Icon.svg"],"names":["SignUp","connect","dispatch","bindActionCreators","loginOrSignupAct","loginOrSignUp","useState","firstName","lastName","email","phoneNo","password","cpassword","location","signUpType","data","setData","passwordShown","setPasswordShown","confirmPasswordShown","setConfirmPasswordShown","apiError","setApiError","useForm","register","errors","handleSubmit","watch","onChangeValue","e","persist","target","name","value","useHistory","a","payload","userSignUp","AuthApi","then","console","log","catch","error","message","className","onSubmit","preventDefault","placeholder","type","onChange","ref","pattern","required","minLength","src","Person","alt","Mail","maxLength","Phone","Password","onClick","validate","Facebook","Google","to","ArrowHover","focusable","imageRendering","baseProfile","version","preserveAspectRatio","viewBox","x","y","width","height","transform","stroke","d"],"mappings":"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","file":"static/js/41.052f908f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Person from \"../../../assets/files/SignUp/Person Icon.svg\";\r\nimport Mail from \"../../../assets/files/SignUp/Email Icon.svg\";\r\nimport Phone from \"../../../assets/files/SignUp/Phone Icon.svg\";\r\nimport Password from \"../../../assets/files/SignUp/Password Icon.svg\";\r\nimport Facebook from \"../../../assets/files/SignUp/Fb Logo.svg\";\r\nimport Google from \"../../../assets/files/SignUp/Google Logo.svg\";\r\nimport \"./styles.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport ArrowHover from \"../../common/ButtonIcon/ArrowHover\";\r\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport { api } from \"service/api\";\r\nimport { AuthApi } from \"service/apiVariables\";\r\nimport { loginOrSignUp } from \"action/authAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nconst SignUpFC = ({ loginOrSignupAct }) => {\r\n    const [data, setData] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        phoneNo: \"\",\r\n        password: \"\",\r\n        cpassword: \"\",\r\n        location: \"\",\r\n        signUpType: \"email\",\r\n    });\r\n\r\n    const [passwordShown, setPasswordShown] = useState(false);\r\n    const [confirmPasswordShown, setConfirmPasswordShown] = useState(false);\r\n    const [apiError, setApiError] = useState(\"\");\r\n    const { register, errors, handleSubmit, watch } = useForm();\r\n    const onChangeValue = (e) => {\r\n        e.persist();\r\n        setData({ ...data, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const history = useHistory();\r\n\r\n    async function signUp() {\r\n        const payload = {\r\n            firstName: data.firstName,\r\n            lastName: data.lastName,\r\n            email: data.email,\r\n            phoneNo: data.phoneNo,\r\n            password: data.password,\r\n            cpassword: data.cpassword,\r\n            location: data.location,\r\n            signUpType: data.signUpType,\r\n        };\r\n        // console.log(item);\r\n        // const requestOptions = {\r\n        //   method: \"POST\",\r\n        //   headers: {\r\n        //     \"Content-Type\": \"application/json\",\r\n        //     Accept: \"application/json\",\r\n        //   },\r\n        //   body: JSON.stringify(item),\r\n        // };\r\n\r\n        const { userSignUp } = AuthApi;\r\n\r\n        loginOrSignupAct(userSignUp, payload)\r\n            .then((data) => console.log(data))\r\n            .catch((error) => {\r\n                setApiError(\"Sorry, something went wrong.\", error.message);\r\n            });\r\n\r\n        // fetch(\"http://doodlebluelive.com:2307/v1/user/sign-up\", requestOptions)\r\n        //   .then(async (response) => {\r\n        //     const data = await response.json();\r\n        //     localStorage.setItem(\"user-info\", JSON.stringify(data));\r\n\r\n        //     if (response.ok) {\r\n        //       history.push(\"/trainer/find\");\r\n        //     } else {\r\n        //       setApiError(\"Email already registered\", response.statusText);\r\n        //     }\r\n        //   })\r\n    }\r\n\r\n    const showPassword = () => {\r\n        setPasswordShown(passwordShown ? false : true);\r\n    };\r\n    const showConfirmPassword = () => {\r\n        setConfirmPasswordShown(confirmPasswordShown ? false : true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* {redirect ? <Redirect to={\"/findtrainer\"} /> : null} */}\r\n            <div className=\"main_container\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"inner_wrapper\">\r\n                        <div className=\"inner_items\">\r\n                            <h2>Sign Up with Motto!</h2>\r\n                            <p>\r\n                                Fill up the following details to create your\r\n                                account\r\n                            </p>\r\n                            <div className=\"form_items\">\r\n                                <form onSubmit={(e) => e.preventDefault()}>\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Name\"\r\n                                            type=\"text\"\r\n                                            value={data.firstName}\r\n                                            name=\"firstName\"\r\n                                            onChange={onChangeValue}\r\n                                            ref={register({\r\n                                                pattern: /^[A-Za-z]+$/i,\r\n                                                required: true,\r\n                                                minLength: 2,\r\n                                            })}\r\n                                        />\r\n                                        <img src={Person} alt=\"icon\" />\r\n                                        {errors.firstName && (\r\n                                            <span>\r\n                                                {errors.firstName.message}\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.firstName?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )}\r\n                                        {errors.firstName?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>\r\n                                                This field should contain more\r\n                                                then one charater\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.firstName?.type ===\r\n                                            \"pattern\" && (\r\n                                            <span>\r\n                                                This field accept only alphabets\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"LastName\"\r\n                                            type=\"text\"\r\n                                            value={data.lastName}\r\n                                            name=\"lastName\"\r\n                                            onChange={onChangeValue}\r\n                                            ref={register({\r\n                                                pattern: /^[A-Za-z]+$/i,\r\n                                                required: true,\r\n                                                minLength: 2,\r\n                                            })}\r\n                                        />\r\n                                        <img src={Person} alt=\"icon\" />\r\n                                        {errors.lastName && (\r\n                                            <span>\r\n                                                {errors.lastName.message}\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.lastName?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )}\r\n                                        {errors.lastName?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>\r\n                                                This field should contain more\r\n                                                then one charater\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.lastName?.type ===\r\n                                            \"pattern\" && (\r\n                                            <span>\r\n                                                This field accept only alphabets\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Location\"\r\n                                            type=\"text\"\r\n                                            value={data.location}\r\n                                            name=\"location\"\r\n                                            onChange={onChangeValue}\r\n                                            ref={register({\r\n                                                pattern: /^[A-Za-z]+$/i,\r\n                                                required: true,\r\n                                                minLength: 2,\r\n                                            })}\r\n                                        />\r\n                                        <img src={Person} alt=\"icon\" />\r\n                                        {errors.location && (\r\n                                            <span>\r\n                                                {errors.location.message}\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.location?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )}\r\n                                        {errors.location?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>\r\n                                                This field should contain more\r\n                                                then one charater\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.location?.type ===\r\n                                            \"pattern\" && (\r\n                                            <span>\r\n                                                This field accept only alphabets\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Email\"\r\n                                            type=\"email\"\r\n                                            value={data.email}\r\n                                            name=\"email\"\r\n                                            onChange={onChangeValue}\r\n                                            ref={register({\r\n                                                required:\r\n                                                    \"This filed is required\",\r\n                                                minLength: {\r\n                                                    value: 2,\r\n                                                    message:\r\n                                                        \"Enter a valid name\",\r\n                                                },\r\n                                            })}\r\n                                        />\r\n                                        <img src={Mail} alt=\"icon\" />\r\n\r\n                                        {errors.email && (\r\n                                            <span>{errors.email.message}</span>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Phone\"\r\n                                            type=\"text\"\r\n                                            value={data.phoneNo}\r\n                                            name=\"phoneNo\"\r\n                                            onChange={onChangeValue}\r\n                                            ref={register({\r\n                                                required: true,\r\n                                                minLength: 6,\r\n                                                maxLength: 11,\r\n                                            })}\r\n                                        />\r\n                                        <img src={Phone} alt=\"icon\" />\r\n                                        {errors.phoneNo && (\r\n                                            <span>\r\n                                                {errors.phoneNo.message}\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.phoneNo?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )}\r\n                                        {errors.phoneNo?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>Enter a valid number</span>\r\n                                        )}\r\n                                        {errors.phoneNo?.type ===\r\n                                            \"maxLength\" && (\r\n                                            <span>\r\n                                                This field exceed max length\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Create Password\"\r\n                                            type={\r\n                                                passwordShown\r\n                                                    ? \"text\"\r\n                                                    : \"password\"\r\n                                            }\r\n                                            value={data.password}\r\n                                            name=\"password\"\r\n                                            onChange={onChangeValue}\r\n                                            ref={register({\r\n                                                required: true,\r\n                                                minLength: 6,\r\n                                                maxLength: 16,\r\n                                                // pattern: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/,\r\n                                            })}\r\n                                        />\r\n                                        <img\r\n                                            src={Password}\r\n                                            alt=\"icon\"\r\n                                            onClick={showPassword}\r\n                                        />\r\n                                        {errors.password?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )}\r\n                                        {errors.password?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>\r\n                                                Password should be more then 6\r\n                                                Charcters\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.password?.type ===\r\n                                            \"maxLength\" && (\r\n                                            <span>\r\n                                                This field exceed max length\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.password?.type ===\r\n                                            \"pattern\" && (\r\n                                            <span>\r\n                                                Password should contain atleast\r\n                                                one one captial letter, number\r\n                                                and special character\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Confirm Password\"\r\n                                            type={\r\n                                                confirmPasswordShown\r\n                                                    ? \"text\"\r\n                                                    : \"password\"\r\n                                            }\r\n                                            value={data.cpassword}\r\n                                            onChange={onChangeValue}\r\n                                            ref={register({\r\n                                                validate: (value) =>\r\n                                                    value === watch(\"password\"),\r\n\r\n                                                // validate: value =>\r\n                                                // value === password.current || \"The passwords do not match\",\r\n                                                required: true,\r\n                                                minLength: 6,\r\n                                                maxLength: 16,\r\n                                                // pattern: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/,\r\n                                            })}\r\n                                            name=\"cpassword\"\r\n                                        />\r\n                                        <img\r\n                                            src={Password}\r\n                                            alt=\"icon\"\r\n                                            onClick={showConfirmPassword}\r\n                                        />\r\n                                        {errors.cpassword?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )}\r\n                                        {errors.cpassword?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>\r\n                                                Password should be more then 6\r\n                                                Charcters\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.cpassword?.type ===\r\n                                            \"maxLength\" && (\r\n                                            <span>\r\n                                                This field exceed max length\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.cpassword?.type ===\r\n                                            \"pattern\" && (\r\n                                            <span>\r\n                                                Password should contain atleast\r\n                                                one one captial letter, number\r\n                                                and special character\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.cpassword?.type !==\r\n                                            errors.password && (\r\n                                            <span>\r\n                                                The passwords do not match\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                    {apiError && (\r\n                                        <span className=\"errorMessage\">\r\n                                            {apiError}\r\n                                        </span>\r\n                                    )}\r\n\r\n                                    <div className=\"or_items\">\r\n                                        <div className=\"hr_line\"></div>\r\n                                        <div>\r\n                                            <p>or</p>\r\n                                        </div>\r\n                                        <div className=\"hr_line\"></div>\r\n                                    </div>\r\n                                    <div className=\"social_buttons\">\r\n                                        <button className=\"facebook-auth\">\r\n                                            <img src={Facebook} alt=\"icon\" />\r\n                                            Sign Up with Facebook\r\n                                        </button>\r\n\r\n                                        <button className=\"google-auth\">\r\n                                            <img src={Google} alt=\"icon\" />\r\n                                            Sign up with Google\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"submit_button\">\r\n                                        <button\r\n                                            type=\"submit\"\r\n                                            onClick={handleSubmit(signUp)}\r\n                                        >\r\n                                            Continue to Account{\" \"}\r\n                                            <ArrowHoverBlacked />\r\n                                        </button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                            <div className=\"login_content_signup\">\r\n                                <h1>Already have an account?</h1>\r\n\r\n                                <Link to=\"/\">\r\n                                    Sign In now\r\n                                    <ArrowHover />\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators(\r\n        {\r\n            loginOrSignupAct: loginOrSignUp,\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst SignUp = connect(null, mapDispatchToProps)(SignUpFC);\r\n\r\nexport default SignUp;\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nfunction ArrowHover() {\r\n    return (\r\n        <>\r\n            <div>\r\n                <span className='arrow-hover'>\r\n                    <svg\r\n                        className=\"arrow-icon\"\r\n                        focusable=\"false\"\r\n                        imageRendering=\"auto\"\r\n                        baseProfile=\"basic\"\r\n                        version=\"1.1\"\r\n                        preserveAspectRatio=\"xMidYMid meet\"\r\n                        viewBox=\"0 0 62 35\"\r\n                    >\r\n                        <title>Arrow Icon</title>\r\n                        <rect x=\"0\" y=\"14.7\" width=\"55.2\" height=\"4.55\"></rect>\r\n                        <g transform=\"translate(40.9 0)\">\r\n                            <path\r\n                                stroke=\"none\"\r\n                                d=\"M.35 3L14.3 17.2 0 31.25 3.35 34.25 20.85 17.15 3.5 0 .35 3Z\"\r\n                            ></path>\r\n                        </g>\r\n                    </svg>\r\n                </span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ArrowHover;\r\n","export default __webpack_public_path__ + \"static/media/Phone Icon.f207d1b4.svg\";"],"sourceRoot":""}