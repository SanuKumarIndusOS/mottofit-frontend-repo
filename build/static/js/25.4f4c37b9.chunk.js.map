{"version":3,"sources":["component/TrainWithFriends/index.js","helpers/baseURL.js","assets/files/TrainerDashboard/Message/Jenny.png","assets/files/SignUp/Phone Icon.svg","assets/files/UserOnboard/PaymentAsset/Location Icon.svg","assets/files/UserOnboard/PaymentAsset/Shedule Icon.svg","assets/files/UserOnboard/PaymentAsset/Strength Icon.svg","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["accordionData","title","session","session1","session2","price","price1","price2","AccordationService","useState","selected","setSelected","map","item","index","className","onClick","toggle","TrainWithFriends","connect","dispatch","bindActionCreators","userSession","friendName","friendEmail","friendPhone","friendsInput","setFriendsInput","trainingType","localStorage","getItem","handleChangeFriendInput","event","values","target","name","value","input","type","placeholder","onChange","src","Person","alt","Mail","Phone","id","sessionId","fetch","SESSION_URL","headers","Authorization","method","body","JSON","stringify","friends","email","firstName","lastName","phoneNo","then","resp","json","res","console","log","catch","err","length","Jenny","StrengthIcon","SheduleIcon","LocationIcon","history","push","pathname","COMMON_URL","MESSAGING_URL","NOTIFICATION_URL","PAYMENT_URL","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/25.4f4c37b9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.scss\";\nimport Mail from \"../../assets/files/SignUp/Email Icon.svg\";\nimport Person from \"../../assets/files/SignUp/Person Icon.svg\";\nimport Phone from \"../../assets/files/SignUp/Phone Icon.svg\";\nimport Jenny from \"../../assets/files/TrainerDashboard/Message/Jenny.png\";\nimport StrengthIcon from \"../../assets/files/UserOnboard/PaymentAsset/Strength Icon.svg\";\nimport SheduleIcon from \"../../assets/files/UserOnboard/PaymentAsset/Shedule Icon.svg\";\nimport LocationIcon from \"../../assets/files/UserOnboard/PaymentAsset/Location Icon.svg\";\nimport ArrowHoverBlacked from \"../common/BlackCircleButton/ArrowHoverBlacked\";\nimport \"../HowItWork/TrainerMotto/styles.scss\";\nimport BlueHoverButton from \"../common/BlueArrowButton\";\nimport { Link } from \"react-router-dom\";\nimport { history } from \"helpers\";\nimport { userSession } from \"action/userAct\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { SESSION_URL } from \"helpers/baseURL\";\nconst accordionData = [\n  {\n    title: \"Social Session\",\n    session: \"1 Session / 2 Session\",\n    session1: \"1 Session / 2 Session\",\n    session2: \"1 Session / 2 Session\",\n    price: \"$65.00 / Person\",\n    price1: \"$65.00 / Person\",\n    price2: \"$65.00 / Person\",\n  },\n  {\n    title: \"Class Session\",\n    session: \"Class (5-15 People)\",\n    price: \"$15.00 / Person\",\n  },\n  {\n    title: \"Cancellation Session\",\n    session: \"Cancellation Fee\",\n    price: \"Free upto 48 hours\",\n  },\n];\n\nconst TrainWithFriendsClass = ({ userSession }) => {\n  const [friendsInput, setFriendsInput] = useState([\n    {\n      friendName: \"\",\n      friendEmail: \"\",\n      friendPhone: \"\",\n    },\n  ]);\n\n  let trainingType = localStorage.getItem(\"sessionTrainingType\");\n  const handleChangeFriendInput = (index, event) => {\n    const values = [...friendsInput];\n    values[index][event.target.name] = event.target.value;\n    setFriendsInput(values);\n  };\n\n  const handleAddFriendFields = () => {\n    setFriendsInput([\n      ...friendsInput,\n      { friendName: \"\", friendEmail: \"\", friendPhone: \"\" },\n    ]);\n  };\n\n  const updateSessionApi = () => {\n    let sessionId = localStorage.getItem(\"sessionId\");\n\n    fetch(`${SESSION_URL}/v1/session/update`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: localStorage.getItem(\"token\"),\n      },\n      method: \"PUT\",\n      body: JSON.stringify({\n        friends: [\n          {\n            email: \"stageuser001@doodleblue.com\",\n            firstName: \"John\",\n            lastName: \"Doe 001\",\n            phoneNo: \"8220681305\",\n          },\n        ],\n        sessionId: sessionId,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((res) => {\n        console.log(res);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const getUserSessions = () => {\n    userSession()\n      .then(() => {\n        history.push({\n          pathname: \"/users/dashboard/session\",\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <>\n      <div className=\"TF_outter_container\">\n        <div className=\"container\">\n          <div className=\"TF_inner_container\">\n            <div className=\"TF_headers\">\n              <h2>Your session is booked! Start adding your friends</h2>\n              <p>\n                Invite as many friends as youâ€™d like, the friends that accept\n                will automatically be added in correspondence to session size!\n                Once they accept your session, your rate will automatically be\n                adjusted.\n              </p>\n            </div>\n            <div className=\"TF_wrapper\">\n              <div className=\"TF_inner_wrapper\">\n                <div className=\"TF_wrapper_left\">\n                  <div className=\"TF_wrapper_content\">\n                    <h2>Add Friends to Your Session</h2>\n                    <div className=\"TF_form\">\n                      <form>\n                        <h3>Enter your friend's details</h3>\n                        <div className=\"TF_inner_form\">\n                          {friendsInput.map((index, input) => {\n                            return (\n                              <div key={index} className=\"TF_wrapper_input\">\n                                <h4>Friend #{input}</h4>\n                                <div className=\"inner_input\">\n                                  <input\n                                    type=\"text\"\n                                    placeholder=\"Name\"\n                                    name=\"name\"\n                                    value={input.friendName}\n                                    onChange={(event) =>\n                                      handleChangeFriendInput(index, event)\n                                    }\n                                  />\n                                  <img src={Person} alt=\"icon\" />\n                                </div>\n\n                                <div className=\"TF_input\">\n                                  <div className=\"inner_input\">\n                                    <input\n                                      type=\"text\"\n                                      placeholder=\"Email\"\n                                      name=\"email\"\n                                      value={input.friendEmail}\n                                      onChange={(event) =>\n                                        handleChangeFriendInput(index, event)\n                                      }\n                                    />\n                                    <img src={Mail} alt=\"icon\" />\n\n                                    <input\n                                      type=\"text\"\n                                      placeholder=\"Phone Number\"\n                                      name=\"phone\"\n                                      value={input.friendPhone}\n                                      onChange={(event) =>\n                                        handleChangeFriendInput(index, event)\n                                      }\n                                    />\n                                    <img src={Phone} alt=\"icon\" />\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })}\n                          <div className=\"TF_remember_left\">\n                            <input\n                              className=\"TF_check\"\n                              type=\"checkbox\"\n                              value=\"lsRememberMe\"\n                              id=\"rememberMe\"\n                            />{\" \"}\n                            <label>\n                              I will pay for all the people that I will be\n                              inviting to my social session or class\n                            </label>\n                          </div>\n                        </div>\n\n                        <div className=\"TF_button\">\n                          <button onClick={updateSessionApi}>\n                            Invite Friends <ArrowHoverBlacked />{\" \"}\n                          </button>\n                          {(trainingType === \"social\" &&\n                            friendsInput.length < 3) ||\n                          (trainingType === \"class\" &&\n                            friendsInput.length < 14) ? (\n                            <h5 onClick={handleAddFriendFields}>\n                              + Add More Friends\n                            </h5>\n                          ) : (\n                            \"\"\n                          )}\n                        </div>\n                      </form>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"TF_wrapper_right\">\n                  <div className=\"TF_right\">\n                    <div className=\"TF_profile\">\n                      <img src={Jenny} alt=\"icon\" />\n                      <div className=\"TF_name\">\n                        <h2>John Doe</h2>\n                        <p>BOXING, STRENGTH & HIIT</p>\n                      </div>\n                    </div>\n                    <div className=\"TF_wrapper\">\n                      <div className=\"TF_details\">\n                        <h3>I WANT TO TRAIN IN</h3>\n                        <div className=\"TF_data_inner\">\n                          <img src={StrengthIcon} alt=\"icon\" />\n                          <h4>Strength & HIIT</h4>\n                        </div>\n                      </div>\n                      <div className=\"TF_details\">\n                        <h3>I want to train on</h3>\n                        <div className=\"TF_data_inner\">\n                          <img src={SheduleIcon} alt=\"icon\" />\n                          <h4>February 16th, 2021 at 5:00 A.M.</h4>\n                        </div>\n                      </div>\n                      <div className=\"TF_details\">\n                        <h3>I WANT TO TRAIN AT</h3>\n                        <div className=\"TF_data_inner\">\n                          <img src={LocationIcon} alt=\"icon\" />\n                          <h4>The Trainerâ€™s Gym</h4>\n                        </div>\n                      </div>\n                      <hr />\n\n                      <div className=\"TF_service_details\">\n                        <div className=\"TF_service_wrapper\">\n                          <div className=\"TF_service_left\">\n                            <div className=\"TF_service_header\">\n                              <div className=\"TF_inner_header\">\n                                <h3>Service Details</h3>\n                                <h3>Price / Hour</h3>\n                              </div>\n                              <AccordationService />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"TF_skip\">\n                <h2>Not right now? </h2>\n                <Link onClick={getUserSessions}>\n                  CONTINUE TO ACCOUNT <BlueHoverButton />\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\nconst AccordationService = () => {\n  const [selected, setSelected] = useState(0);\n\n  const toggle = (index) => {\n    if (selected === index) {\n      return setSelected(null);\n    }\n\n    setSelected(index);\n  };\n  return (\n    <>\n      {accordionData.map((item, index) => (\n        <div className=\"TF_data_item\" key={index}>\n          <div className=\"TF_data_title\" onClick={() => toggle(index)}>\n            <h3>{item.title}</h3>\n            <div className={selected === index ? \"line show\" : \"line\"}></div>\n          </div>\n          <div className=\"TF_DT_grid\">\n            <div className=\"TF_DT_left\">\n              <div\n                className={\n                  selected === index ? \"TF_DT_contentshow\" : \"TF_DT_content\"\n                }\n              >\n                <p>{item.session}</p>\n                <p>{item.session1}</p>\n                <p>{item.session2}</p>\n              </div>\n            </div>\n            <div className=\"TF_DT_right\">\n              <div\n                className={\n                  selected === index ? \"TF_DT_contentshow\" : \"TF_DT_content\"\n                }\n              >\n                <p>{item.price}</p>\n                <p>{item.price1}</p>\n                <p>{item.price2}</p>\n              </div>\n            </div>\n          </div>\n          <div></div>\n        </div>\n      ))}\n    </>\n  );\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      userSession,\n    },\n    dispatch\n  );\n};\n\nconst TrainWithFriends = connect(\n  null,\n  mapDispatchToProps\n)(TrainWithFriendsClass);\n\nexport default TrainWithFriends;\n","export var COMMON_URL = \"http://doodlebluelive.com:2307\";\nexport var MESSAGING_URL = \"http://doodlebluelive.com:2338\";\nexport var SESSION_URL = \"http://doodlebluelive.com:2337\";\nexport var NOTIFICATION_URL = \"\";\nexport var PAYMENT_URL = \"http://doodlebluelive.com:2336\";\n","export default __webpack_public_path__ + \"static/media/Jenny.c50273b9.png\";","export default __webpack_public_path__ + \"static/media/Phone Icon.595b1737.svg\";","export default __webpack_public_path__ + \"static/media/Location Icon.3c78595b.svg\";","export default __webpack_public_path__ + \"static/media/Shedule Icon.f328f754.svg\";","export default __webpack_public_path__ + \"static/media/Strength Icon.0bdf7577.svg\";","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}