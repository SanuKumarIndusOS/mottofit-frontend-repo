{"version":3,"sources":["component/SignUp/Banner/index.js","component/common/ButtonIcon/ArrowHover.jsx","assets/files/SignUp/Phone Icon.svg"],"names":["SignUp","connect","dispatch","bindActionCreators","loginOrSignupAct","loginOrSignUp","useState","firstName","lastName","email","phoneNo","password","cpassword","location","signUpType","data","setData","passwordShown","setPasswordShown","confirmPasswordShown","setConfirmPasswordShown","apiError","setApiError","useForm","register","errors","handleSubmit","watch","onChangeValue","e","persist","target","name","value","useHistory","a","payload","userSignUp","AuthApi","then","console","log","catch","error","message","className","onSubmit","preventDefault","placeholder","type","onChange","ref","pattern","required","minLength","src","Person","alt","Mail","maxLength","Phone","Password","onClick","validate","Facebook","Google","to","ArrowHover","focusable","imageRendering","baseProfile","version","preserveAspectRatio","viewBox","x","y","width","height","transform","stroke","d"],"mappings":"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","file":"static/js/40.d32d9553.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Person from \"../../../assets/files/SignUp/Person Icon.svg\";\r\nimport Mail from \"../../../assets/files/SignUp/Email Icon.svg\";\r\nimport Phone from \"../../../assets/files/SignUp/Phone Icon.svg\";\r\nimport Password from \"../../../assets/files/SignUp/Password Icon.svg\";\r\nimport Facebook from \"../../../assets/files/SignUp/Fb Logo.svg\";\r\nimport Google from \"../../../assets/files/SignUp/Google Logo.svg\";\r\nimport \"./styles.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport ArrowHover from \"../../common/ButtonIcon/ArrowHover\";\r\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport { api } from \"service/api\";\r\nimport { AuthApi } from \"service/apiVariables\";\r\nimport { loginOrSignUp } from \"action/authAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nconst SignUpFC = ({ loginOrSignupAct }) => {\r\n  const [data, setData] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    phoneNo: \"\",\r\n    password: \"\",\r\n    cpassword: \"\",\r\n    location: \"\",\r\n    signUpType: \"email\",\r\n  });\r\n\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n  const [confirmPasswordShown, setConfirmPasswordShown] = useState(false);\r\n  const [apiError, setApiError] = useState(\"\");\r\n  const { register, errors, handleSubmit, watch } = useForm();\r\n  const onChangeValue = (e) => {\r\n    e.persist();\r\n    setData({ ...data, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  async function signUp() {\r\n    const payload = {\r\n      firstName: data.firstName,\r\n      lastName: data.lastName,\r\n      email: data.email,\r\n      phoneNo: data.phoneNo,\r\n      password: data.password,\r\n      cpassword: data.cpassword,\r\n      location: data.location,\r\n      signUpType: data.signUpType,\r\n    };\r\n    // console.log(item);\r\n    // const requestOptions = {\r\n    //   method: \"POST\",\r\n    //   headers: {\r\n    //     \"Content-Type\": \"application/json\",\r\n    //     Accept: \"application/json\",\r\n    //   },\r\n    //   body: JSON.stringify(item),\r\n    // };\r\n\r\n    const { userSignUp } = AuthApi;\r\n\r\n    loginOrSignupAct(userSignUp, payload).then((data) => console.log(data))\r\n    .catch((error) => {\r\n      setApiError(\"Sorry, something went wrong.\", error.message);\r\n    });\r\n\r\n    // fetch(\"http://doodlebluelive.com:2307/v1/user/sign-up\", requestOptions)\r\n    //   .then(async (response) => {\r\n    //     const data = await response.json();\r\n    //     localStorage.setItem(\"user-info\", JSON.stringify(data));\r\n\r\n    //     if (response.ok) {\r\n    //       history.push(\"/trainer/find\");\r\n    //     } else {\r\n    //       setApiError(\"Email already registered\", response.statusText);\r\n    //     }\r\n    //   })\r\n  }\r\n\r\n  const showPassword = () => {\r\n    setPasswordShown(passwordShown ? false : true);\r\n  };\r\n  const showConfirmPassword = () => {\r\n    setConfirmPasswordShown(confirmPasswordShown ? false : true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {redirect ? <Redirect to={\"/findtrainer\"} /> : null} */}\r\n      <div className=\"main_container\">\r\n        <div className=\"wrapper\">\r\n          <div className=\"inner_wrapper\">\r\n            <div className=\"inner_items\">\r\n              <h2>Sign Up with Motto!</h2>\r\n              <p>Fill up the following details to create your account</p>\r\n              <div className=\"form_items\">\r\n                <form onSubmit={(e) => e.preventDefault()}>\r\n                  <div className=\"input_items\">\r\n                    <input\r\n                      placeholder=\"Name\"\r\n                      type=\"text\"\r\n                      value={data.firstName}\r\n                      name=\"firstName\"\r\n                      onChange={onChangeValue}\r\n                      ref={register({\r\n                        pattern: /^[A-Za-z]+$/i,\r\n                        required: true,\r\n                        minLength: 2,\r\n                      })}\r\n                    />\r\n                    <img src={Person} alt=\"icon\" />\r\n                    {errors.firstName && (\r\n                      <span>{errors.firstName.message}</span>\r\n                    )}\r\n                    {errors.firstName?.type === \"required\" && (\r\n                      <span>This input is required</span>\r\n                    )}\r\n                    {errors.firstName?.type === \"minLength\" && (\r\n                      <span>\r\n                        This field should contain more then one charater\r\n                      </span>\r\n                    )}\r\n                    {errors.firstName?.type === \"pattern\" && (\r\n                      <span>This field accept only alphabets</span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"input_items\">\r\n                    <input\r\n                      placeholder=\"LastName\"\r\n                      type=\"text\"\r\n                      value={data.lastName}\r\n                      name=\"lastName\"\r\n                      onChange={onChangeValue}\r\n                      ref={register({\r\n                        pattern: /^[A-Za-z]+$/i,\r\n                        required: true,\r\n                        minLength: 2,\r\n                      })}\r\n                    />\r\n                    <img src={Person} alt=\"icon\" />\r\n                    {errors.lastName && <span>{errors.lastName.message}</span>}\r\n                    {errors.lastName?.type === \"required\" && (\r\n                      <span>This input is required</span>\r\n                    )}\r\n                    {errors.lastName?.type === \"minLength\" && (\r\n                      <span>\r\n                        This field should contain more then one charater\r\n                      </span>\r\n                    )}\r\n                    {errors.lastName?.type === \"pattern\" && (\r\n                      <span>This field accept only alphabets</span>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"input_items\">\r\n                    <input\r\n                      placeholder=\"Location\"\r\n                      type=\"text\"\r\n                      value={data.location}\r\n                      name=\"location\"\r\n                      onChange={onChangeValue}\r\n                      ref={register({\r\n                        pattern: /^[A-Za-z]+$/i,\r\n                        required: true,\r\n                        minLength: 2,\r\n                      })}\r\n                    />\r\n                    <img src={Person} alt=\"icon\" />\r\n                    {errors.location && <span>{errors.location.message}</span>}\r\n                    {errors.location?.type === \"required\" && (\r\n                      <span>This input is required</span>\r\n                    )}\r\n                    {errors.location?.type === \"minLength\" && (\r\n                      <span>\r\n                        This field should contain more then one charater\r\n                      </span>\r\n                    )}\r\n                    {errors.location?.type === \"pattern\" && (\r\n                      <span>This field accept only alphabets</span>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"input_items\">\r\n                    <input\r\n                      placeholder=\"Email\"\r\n                      type=\"email\"\r\n                      value={data.email}\r\n                      name=\"email\"\r\n                      onChange={onChangeValue}\r\n                      ref={register({\r\n                        required: \"This filed is required\",\r\n                        minLength: {\r\n                          value: 2,\r\n                          message: \"Enter a valid name\",\r\n                        },\r\n                      })}\r\n                    />\r\n                    <img src={Mail} alt=\"icon\" />\r\n\r\n                    {errors.email && <span>{errors.email.message}</span>}\r\n                  </div>\r\n                  <div className=\"input_items\">\r\n                    <input\r\n                      placeholder=\"Phone\"\r\n                      type=\"text\"\r\n                      value={data.phoneNo}\r\n                      name=\"phoneNo\"\r\n                      onChange={onChangeValue}\r\n                      ref={register({\r\n                        required: true,\r\n                        minLength: 6,\r\n                        maxLength: 11,\r\n                      })}\r\n                    />\r\n                    <img src={Phone} alt=\"icon\" />\r\n                    {errors.phoneNo && <span>{errors.phoneNo.message}</span>}\r\n                    {errors.phoneNo?.type === \"required\" && (\r\n                      <span>This input is required</span>\r\n                    )}\r\n                    {errors.phoneNo?.type === \"minLength\" && (\r\n                      <span>Enter a valid number</span>\r\n                    )}\r\n                    {errors.phoneNo?.type === \"maxLength\" && (\r\n                      <span>This field exceed max length</span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"input_items\">\r\n                    <input\r\n                      placeholder=\"Create Password\"\r\n                      type={passwordShown ? \"text\" : \"password\"}\r\n                      value={data.password}\r\n                      name=\"password\"\r\n                      onChange={onChangeValue}\r\n                      ref={register({\r\n                        required: true,\r\n                        minLength: 6,\r\n                        maxLength: 16,\r\n                        // pattern: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/,\r\n                      })}\r\n                    />\r\n                    <img src={Password} alt=\"icon\" onClick={showPassword} />\r\n                    {errors.password?.type === \"required\" && (\r\n                      <span>This input is required</span>\r\n                    )}\r\n                    {errors.password?.type === \"minLength\" && (\r\n                      <span>Password should be more then 6 Charcters</span>\r\n                    )}\r\n                    {errors.password?.type === \"maxLength\" && (\r\n                      <span>This field exceed max length</span>\r\n                    )}\r\n                    {errors.password?.type === \"pattern\" && (\r\n                      <span>\r\n                        Password should contain atleast one number and one\r\n                        special character\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"input_items\">\r\n                    <input\r\n                      placeholder=\"Confirm Password\"\r\n                      type={confirmPasswordShown ? \"text\" : \"password\"}\r\n                      value={data.cpassword}\r\n                      onChange={onChangeValue}\r\n                      ref={register({\r\n                        validate: (value) => value === watch(\"password\"),\r\n\r\n                        // validate: value =>\r\n                        // value === password.current || \"The passwords do not match\",\r\n                        required: true,\r\n                        minLength: 6,\r\n                        maxLength: 16,\r\n                        // pattern: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/,\r\n                      })}\r\n                      name=\"cpassword\"\r\n                    />\r\n                    <img\r\n                      src={Password}\r\n                      alt=\"icon\"\r\n                      onClick={showConfirmPassword}\r\n                    />\r\n                    {errors.cpassword?.type === \"required\" && (\r\n                      <span>This input is required</span>\r\n                    )}\r\n                    {errors.cpassword?.type === \"minLength\" && (\r\n                      <span>Password should be more then 6 Charcters</span>\r\n                    )}\r\n                    {errors.cpassword?.type === \"maxLength\" && (\r\n                      <span>This field exceed max length</span>\r\n                    )}\r\n                    {errors.cpassword?.type === \"pattern\" && (\r\n                      <span>\r\n                        Password should contain atleast one number and one\r\n                        special character\r\n                      </span>\r\n                    )}\r\n                    {errors.cpassword?.type !== errors.password && (\r\n                      <span>The passwords do not match</span>\r\n                    )}\r\n                  </div>\r\n                  {apiError && <span className=\"errorMessage\">{apiError}</span>}\r\n\r\n                  <div className=\"or_items\">\r\n                    <div className=\"hr_line\"></div>\r\n                    <div>\r\n                      <p>or</p>\r\n                    </div>\r\n                    <div className=\"hr_line\"></div>\r\n                  </div>\r\n                  <div className=\"social_buttons\">\r\n                    <button className=\"facebook-auth\">\r\n                      <img src={Facebook} alt=\"icon\" />\r\n                      Sign Up with Facebook\r\n                    </button>\r\n\r\n                    <button className=\"google-auth\">\r\n                      <img src={Google} alt=\"icon\" />\r\n                      Sign up with Google\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"submit_button\">\r\n                    <button type=\"submit\" onClick={handleSubmit(signUp)}>\r\n                      Continue to Account <ArrowHoverBlacked />\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"login_content_signup\">\r\n                <h1>Already have an account?</h1>\r\n\r\n                <Link to=\"/\">\r\n                  Sign In now\r\n                  <ArrowHover />\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      loginOrSignupAct: loginOrSignUp,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst SignUp = connect(null, mapDispatchToProps)(SignUpFC);\r\n\r\nexport default SignUp;\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nfunction ArrowHover() {\r\n    return (\r\n        <>\r\n            <div>\r\n                <span className='arrow-hover'>\r\n                    <svg\r\n                        className=\"arrow-icon\"\r\n                        focusable=\"false\"\r\n                        imageRendering=\"auto\"\r\n                        baseProfile=\"basic\"\r\n                        version=\"1.1\"\r\n                        preserveAspectRatio=\"xMidYMid meet\"\r\n                        viewBox=\"0 0 62 35\"\r\n                    >\r\n                        <title>Arrow Icon</title>\r\n                        <rect x=\"0\" y=\"14.7\" width=\"55.2\" height=\"4.55\"></rect>\r\n                        <g transform=\"translate(40.9 0)\">\r\n                            <path\r\n                                stroke=\"none\"\r\n                                d=\"M.35 3L14.3 17.2 0 31.25 3.35 34.25 20.85 17.15 3.5 0 .35 3Z\"\r\n                            ></path>\r\n                        </g>\r\n                    </svg>\r\n                </span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ArrowHover;\r\n","export default __webpack_public_path__ + \"static/media/Phone Icon.f207d1b4.svg\";"],"sourceRoot":""}