{"version":3,"sources":["component/common/CommonPageLoader/index.js","component/TrainerDashBoard/DashboardCompontents/TrainerMessages/index.js","action/messagingAct.js","component/common/Message/ChatItem.js","helpers/Messaging.js","component/common/Message/ChatBox.js","assets/files/TrainerDashboard/Message/Jenny.png","assets/files/TrainerDashboard/Message/Availability Icon.svg","assets/files/TrainerDashboard/Message/Location Icon.svg","assets/files/TrainerDashboard/Message/Image 1.png","assets/files/TrainerDashboard/Message/Shedule Icon.svg"],"names":["CommonPageLoaderClass","this","props","isSpinningLoader","className","Component","component","CommonPageLoader","connect","TrainerMessage","require","state","clientData","messagingReducer","activeChannel","activeChannelMessages","typingMembers","chatClientInstance","dispatch","bindActionCreators","trainerChannel","initClientDispatch","updateMessagingDetails","useState","individual_list","setIndividual","socialGroup_list","setSocialGroup_list","admin_list","setAdmin_list","isMessageListLoading","setMessageListLoading","useEffect","getChannelDetails","removeChatClient","then","data","individualClient","socialGroups","admins","messageLeftDOMs","document","getElementsByClassName","forEach","dom","scrollTo","PopulateContacts","channelID","members","channelData","joinChannelByID","console","log","currentChannelMembers","handleTabChange","unSubscribeChannel","isUser","parseInt","localStorage","getItem","defaultTab","tabFor","onClick","tabId","map","item","index","message","from","body","date_updated","lastUserProfilePic","filter","userId","getFormatDate","Date","now","isDataPresent","length","updatePersonTyping","payload","getState","type","identity","participant","tempMembers","currentChatItemOwner","userIdenity","currentPerson","userName","includes","MessagingActionType","UPDATE_MESSAGING_DETAILS","person","resetChannelDetails","RESET_CHANNEL_DETAILS","callback","UPDATE_CLIENT_INSTANCE","ChatClientInstance","ChatItem","CurrentMessageComponent","currMsg","date","msgTime","moment","timestamp","format","isMyMsg","author","Chat","TwilioMessaging","handler","initClient","a","getToken","token","Client","create","client","INITIALIZE_CLIENT","initClientListeners","removeAllListeners","on","globalMessage","onParticipantStartTyping","onParticipantEndedTyping","updateToken","callbackApi","uniqueChannelId","Promise","resolve","reject","alert","isLoading","getChannelByUniqueName","channel","joinChannel","onChanelJoined","onMessagedAdded","member","onMemberJoined","onMemberLeft","UPDATE_CHANNEL_DETAILS","channelState","status","join","getMessages","messages","tempMessage","items","sid","UPDATE_MESSAGE_DETAILS","getIdentityToken","twilioApi","id","api","chatToken","catch","err","Toast","ChatBoxClass","scrollToMessageListBottom","messagesEndRef","current","scrollHeight","handleChange","value","target","setState","typing","handleSendMessage","e","preventDefault","sendMessage","String","formatMessage","lastMsgDate","formattedMessage","reduce","prevMsgArray","tempPrevMsgArray","currYear","msgYear","tempMsgDate","msgDate","React","createRef","prevProps","setTimeout","tempMsg","chatTitle","src","SheduleIcon","alt","startTime","AvailabilityIcon","LocationIcon","venue","toString","ref","onSubmit","placeholder","onChange","ChatBox"],"mappings":"4TAIaA,EAAb,4JACE,WACE,MAAmCC,KAAKC,MAAlCC,wBAAN,SACA,OACE,mCACIA,EAKA,sBAAKC,UAAU,cAAf,UACE,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,2BAhBF,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,0BAP3B,GAA2CC,aA6BvCC,EAAYN,EAEHO,EAAmBC,YAAQ,KAAM,KAAdA,CAAoBF,I,0OC2Z9CG,GAtaQC,EAAQ,KAsaCF,aAnBC,SAACG,GAAD,MAAY,CAClCC,WAAYD,EAAME,iBAAiBD,WACnCE,cAAeH,EAAME,iBAAiBC,cACtCC,sBAAuBJ,EAAME,iBAAiBE,sBAC9CC,cAAeL,EAAME,iBAAiBG,cACtCC,mBAAoBN,EAAME,iBAAiBI,uBAGlB,SAACC,GAC1B,OAAOC,YACL,CACEC,gCACAC,wCACAC,iDAEFJ,KAImBV,EApaK,SAAC,GAStB,IARLY,EAQI,EARJA,eACAC,EAOI,EAPJA,mBAKAJ,GAEI,EANJL,WAMI,EALJE,cAKI,EAJJC,sBAII,EAHJC,cAGI,EAFJC,oBACAK,EACI,EADJA,uBAEA,EAAyCC,mBAAS,IAAlD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAgDF,mBAAS,IAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,mBAAS,IAAvC,mBACA,GADA,UAC4BA,sBAA5B,mBACA,GADA,UACgCA,mBAAS,KAAzC,mBACA,GADA,UACsCA,mBAAS,KAA/C,mBACA,GADA,UAC8BA,mBAAS,KAAvC,mBACA,GADA,UACoCA,mBAAS,KAA7C,mBACA,GADA,UACsDA,oBAAS,IAA/D,mBAAOO,EAAP,KAA6BC,EAA7B,KAGAC,qBAAU,WAOR,OAJAX,EAAmBY,GAEnBA,IAEO,WACLhB,GAAsBA,EAAmBiB,sBAE1C,IAEH,IAAMD,EAAoB,WACxBb,IAAiBe,MAAK,SAACC,GAAU,IAAD,EAC9BX,EAAcW,EAAKC,kBACnBV,EAAoBS,EAAKE,cACzBT,EAAcO,EAAKG,QACnBR,GAAsB,GAEtB,IAAIS,EAAkBC,SAASC,uBAAuB,gBAEtD,sBAAIF,UAAJ,SAAsBG,SAAQ,SAACC,GAAD,cAASA,QAAT,IAASA,OAAT,EAASA,EAAKC,SAAS,EAAG,UAI5D,SAASC,EAAiBC,EAAWC,EAASC,GAI5ChC,EAAmBiC,gBAAgBH,GAAWZ,MAAK,WACjDgB,QAAQC,IAAI,kBAOZ9B,EALgB,CACd+B,sBAAuBL,EACvBC,mBAON,SAASK,IACPrC,GAAsBA,EAAmBsC,qBAG3C,IAAMC,EAAoD,IAA3CC,SAASC,aAAaC,QAAQ,SAE7C,OACE,mCACE,qBAAKvD,UAAU,yBAAf,SACE,sBAAKA,UAAU,2BAAf,UACE,0CACA,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,eAAC,IAAD,CAAMwD,WAAW,MAAjB,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKC,OAAO,MAAMC,QAASR,EAA3B,kBAGEE,GACA,cAAC,IAAD,CAAKK,OAAO,MAAMC,QAASR,EAA3B,gCAIF,cAAC,IAAD,CAAKO,OAAO,QAAQC,QAASR,EAA7B,2BAGA,cAAC,IAAD,CAAKO,OAAO,OAAOC,QAASR,EAA5B,sBAIF,sBAAKlD,UAAU,gBAAf,UACE,cAAC,IAAD,CAAU2D,MAAM,MAAhB,SACE,sBAAK3D,UAAU,oBAAf,UACE,qBAAKA,UAAU,eAAf,SAEI0B,EA4DA,cAAC,mBAAD,IA3DA,sBACKN,GADL,YAEKE,GAFL,YAGKE,IACHoC,KAAI,SAACC,EAAMC,GAAW,IAAD,EACrB,EAAqCD,EAAKE,QAAlCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAEhBC,GACF,UAAAN,EAAI,eAAJ,eAAiBO,QACf,qBAAGC,SAAwBL,KAC3B,KACFH,EAAI,QAAY,IAChB,GAEF,OACE,qBACE7D,UAAU,eADZ,SAIE,sBAAKA,UAAU,aAAf,UAaE,cAAC,aAAD,eAAgBmE,IAEhB,sBACEnE,UAAU,sBACV0D,QAAS,kBACPhB,EACEmB,EAAI,kBACJA,EAAI,QACJA,IANN,UAUE,6BAAKA,EAAI,WAAiB,KAC1B,gCACGI,GAAQ,4BAAIA,IACZC,GACC,sBAAMlE,UAAU,qBAAhB,SACGsE,wBAAcJ,EAAc,kBAlCzC,UAEUK,KAAKC,MAFf,gBAE4BV,SA6CpC,qBAAK9D,UAAU,gBAAf,SACE,cAAC,UAAD,CACEyE,cACE,sBACKrD,GADL,YAEKE,GAFL,YAGKE,IACHkD,OAAS,WAOrB,cAAC,IAAD,CAAUf,MAAM,MAAhB,SACE,sBAAK3D,UAAU,oBAAf,UACE,qBAAKA,UAAU,eAAf,SAEI0B,EAoDA,cAAC,mBAAD,IAnDAN,EAAgBwC,KAAI,SAACC,EAAMC,GAAW,IAAD,EACnC,EAAqCD,EAAKE,QAAlCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAEhBC,GACF,UAAAN,EAAI,eAAJ,eAAiBO,QACf,qBAAGC,SAAwBL,KAC3B,KACFH,EAAI,QAAY,IAChB,GACF,OACE,qBACE7D,UAAU,eADZ,SAIE,sBAAKA,UAAU,aAAf,UAWE,cAAC,aAAD,eAAgBmE,IAChB,sBACEnE,UAAU,sBACV0D,QAAS,kBACPhB,EACEmB,EAAI,kBACJA,EAAI,QACJA,IANN,UAUE,6BAAKA,EAAI,WAAiB,KAC1B,gCACGI,GAAQ,4BAAIA,IACZC,GACC,sBAAMlE,UAAU,qBAAhB,SACGsE,wBAAcJ,EAAc,kBA/BzC,UAEUK,KAAKC,MAFf,YAEwBV,SA0ChC,qBAAK9D,UAAU,gBAAf,SACE,cAAC,UAAD,CAASyE,cAAerD,EAAgBsD,OAAS,WAIvD,cAAC,IAAD,CAAUf,MAAM,QAAhB,SACE,sBAAK3D,UAAU,oBAAf,UACE,qBAAKA,UAAU,eAAf,SAEI0B,EAoDA,cAAC,mBAAD,IAnDAJ,EAAiBsC,KAAI,SAACC,EAAMC,GAAW,IAAD,EACpC,EAAqCD,EAAKE,QAAlCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAEhBC,GACF,UAAAN,EAAI,eAAJ,eAAiBO,QACf,qBAAGC,SAAwBL,KAC3B,KACFH,EAAI,QAAY,IAChB,GACF,OACE,qBACE7D,UAAU,eADZ,SAIE,sBAAKA,UAAU,aAAf,UAWE,cAAC,aAAD,eAAgBmE,IAChB,sBACEnE,UAAU,sBACV0D,QAAS,kBACPhB,EACEmB,EAAI,kBACJA,EAAI,QACJA,IANN,UAUE,6BAAKA,EAAI,WAAiB,KAC1B,gCACGI,GAAQ,4BAAIA,IACZC,GACC,sBAAMlE,UAAU,qBAAhB,SACGsE,wBAAcJ,EAAc,kBA/BzC,UAEUJ,EAFV,YAEmBS,KAAKC,aA0ChC,qBAAKxE,UAAU,gBAAf,SACE,cAAC,UAAD,CAASyE,cAAenD,EAAiBoD,OAAS,WAIxD,cAAC,IAAD,CAAUf,MAAM,OAAhB,SACE,sBAAK3D,UAAU,oBAAf,UACE,qBAAKA,UAAU,eAAf,SAEI0B,EAiDA,cAAC,mBAAD,IAhDAF,EAAWoC,KAAI,SAACC,GAAU,IAAD,EACvB,EAAqCA,EAAKE,QAAlCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAEhBC,GACF,UAAAN,EAAI,eAAJ,eAAiBO,QACf,qBAAGC,SAAwBL,KAC3B,KACFH,EAAI,QAAY,IAChB,GACF,OACE,qBAAK7D,UAAU,eAAf,SACE,sBAAKA,UAAU,aAAf,UAWE,cAAC,aAAD,eAAgBmE,IAChB,sBACEnE,UAAU,sBACV0D,QAAS,kBACPhB,EACEmB,EAAI,kBACJA,EAAI,QACJA,IANN,UAUE,6BAAKA,EAAI,WAAiB,KAC1B,gCACGI,GAAQ,4BAAIA,IACZC,GACC,sBAAMlE,UAAU,qBAAhB,SACGsE,wBAAcJ,EAAc,wBAajD,qBAAKlE,UAAU,gBAAf,SACE,cAAC,UAAD,CAASyE,cAAejD,EAAWkD,OAAS,iBAMtD,qBAAK1E,UAAU,qBA2DdK,a,sRChcFsE,EAAqB,SAACC,GAAD,OAAa,SAAC9D,EAAU+D,GACxD,MAAiDA,IAAWpE,iBAApDG,EAAR,EAAQA,cAAeqC,EAAvB,EAAuBA,sBACf6B,EAAsBF,EAAtBE,KACFC,EADwBH,EAAhBI,YACiBzE,MAAzBwE,SACFE,EAAcrE,EAEZsE,EACJjC,EAAsBmB,QACpB,qBAAGe,cAAkCJ,KACrC,IAAM,GAENK,GAAoC,OAApBF,QAAoB,IAApBA,OAAA,EAAAA,EAAsBG,WAAYN,EAEzC,kBAATD,EAGGlE,EAAc0E,SAASF,KAC1BH,EAAW,sBAAOrE,GAAP,CAAsBwE,IAEjCtE,EAAS,CACPgE,KAAMS,sBAAoBC,yBAC1BZ,QAAS,CAAEhE,cAAc,YAAKqE,OAGhB,gBAATH,GAELlE,EAAc0E,SAASF,KACzBH,EAAc,YAAIrE,GAAewD,QAC/B,SAACqB,GAAD,OAAYA,IAAWL,KAEzBtE,EAAS,CACPgE,KAAMS,sBAAoBC,yBAC1BZ,QAAS,CAAEhE,cAAc,YAAKqE,SAMzBS,EAAsB,kBAAM,SAAC5E,GACxCA,EAAS,CACPgE,KAAMS,sBAAoBI,0BAIjBzE,EAAyB,SAAC0D,GAAD,OAAa,SAAC9D,GAClDA,EAAS,CACPgE,KAAMS,sBAAoBC,yBAC1BZ,cAIS3D,EAAqB,SAAC2E,GAAD,OAAc,SAAC9E,EAAU+D,GACzD/D,EAAS,CACPgE,KAAMS,sBAAoBM,uBAC1BjB,QAAS,IAAIkB,UAAmBhF,EAAU+D,EAAUe,Q,6ICnD3CG,EAAW,SAAC,GAGlB,IACDC,EADA,IAFJ/C,6BAEI,MAFoB,GAEpB,MADJgD,QAAWnB,EACP,EADOA,KAAMvE,EACb,EADaA,MAAO2F,EACpB,EADoBA,KAIxB,GAAa,YAATpB,EAAoB,CACtB,IAEIqB,EAFiBC,IAAO7F,EAAM8F,WAELC,OAAO,MAE9BC,GAAe,OAALhG,QAAK,IAALA,OAAA,EAAAA,EAAOiG,UAAWlD,aAAaC,QAAQ,WAEjD2B,EACJjC,EAAsBmB,QACpB,qBAAGe,cAAkC5E,EAAMiG,UAC3C,IAAM,GAEVR,EACE,sBAAKhG,UAAS,uBAAkBuG,EAAU,QAAU,QAApD,UACE,sBAAKvG,UAAU,eAAf,UACE,8BAAU,OAALO,QAAK,IAALA,OAAA,EAAAA,EAAO0D,OAAQ,KACpB,sBAAMjE,UAAU,WAAhB,SAA4BmG,OAG9B,cAAC,aAAD,eAAgBjB,YAapBc,EACE,qBAAKhG,UAAU,8DAAf,SACE,sBAAMA,UAAU,aAAhB,SAA8BkG,MAKpC,OAAO,8BAAMF,M,qLCxCTS,EAAOnG,EAAQ,KAEAoG,E,WACnB,WAAYC,EAAS9B,EAAUe,GAAW,IAAD,gCAczCgB,WAdyC,sBAc5B,8BAAAC,EAAA,sEACS,EAAKC,WADd,cACLC,EADK,gBAGUN,EAAKO,OAAOC,OAAOF,GAH7B,OAGLG,EAHK,OAKX,EAAKA,OAASA,EAEd,EAAKP,QAAQ,CACX7B,KAAMS,sBAAoB4B,kBAC1BvC,QAASsC,IAGX,EAAKE,oBAAoBF,GAZd,2CAd4B,KA6BzCE,oBAAsB,SAACF,GAErBA,EAAOG,qBAWPH,EAAOI,GAAG,eAAV,uCAA0B,WAAOvD,GAAP,SAAA8C,EAAA,sDACxB,EAAKU,cAAcxD,GADK,2CAA1B,uDAKAmD,EAAOI,GAAG,iBAAiB,SAACtC,GAC1B,EAAKwC,yBAAyBxC,MAIhCkC,EAAOI,GAAG,eAAe,SAACtC,GACxB,EAAKyC,yBAAyBzC,MAKhCkC,EAAOI,GAAG,qBAAV,sBAAgC,4BAAAT,EAAA,6DAC9B,EAAK7D,IAAI,4BADqB,SAEV,EAAK8D,WAFK,OAExBC,EAFwB,OAG9BG,EAAOQ,YAAYX,GAHW,4CAQhCG,EAAOI,GAAG,eAAV,sBAA0B,4BAAAT,EAAA,6DACxB,EAAK7D,IAAI,4BADe,SAEJ,EAAK8D,WAFD,OAElBC,EAFkB,OAGxBG,EAAOQ,YAAYX,GAHK,6CAlEa,KAyEzCQ,cAAgB,SAACxD,GAKf,EAAK4D,aAAe,EAAKA,eA9Ec,KAkFzC7E,gBAlFyC,uCAkFvB,WAAO8E,GAAP,SAAAf,EAAA,+EACT,IAAIgB,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAlB,EAAA,kEAEf,EAAK1D,qBACA,EAAK+D,OAHK,yCAGUc,MAAM,mBAHhB,cAKf,EAAKrB,QAAQ,CACX7B,KAAMS,sBAAoBC,yBAC1BZ,QAAS,CAAEqD,WAAW,KAGxB,EAAKjF,IAAL,6BAA+B4E,EAA/B,aAVe,SAYO,EAAKV,OAAOgB,uBAChCN,GAba,cAYTO,EAZS,iBAeT,EAAKC,YAAYD,GAfR,yBAiBT,EAAKE,eAAeF,GAjBX,QAmBf,EAAKnF,IAAL,kBAEA,EAAKtC,cAAgByH,EAIrBA,EAAQb,GAAG,eAAX,uCAA2B,WAAOvD,GAAP,SAAA8C,EAAA,sEACnB,EAAKyB,gBAAgBvE,GADF,2CAA3B,uDAKAoE,EAAQb,GAAG,iBAAiB,SAACtC,GAC3B,EAAKwC,yBAAyBxC,MAIhCmD,EAAQb,GAAG,eAAe,SAACtC,GACzB,EAAKyC,yBAAyBzC,MAKhCmD,EAAQb,GAAG,gBAAgB,SAACiB,GAC1B,EAAKC,eAAeD,MAItBJ,EAAQb,GAAG,cAAc,SAACiB,GACxB,EAAKE,aAAaF,MAGpB,EAAK5B,QAAQ,CACX7B,KAAMS,sBAAoBmD,uBAC1B9D,QAASuD,IAEXL,GAAQ,GAtDO,kDAwDf,EAAK9E,IAAL,gCACA+E,EAAO,EAAD,IAzDS,0DAAZ,0DADS,2CAlFuB,2DAiJzCK,YAjJyC,uCAiJ3B,WAAOD,GAAP,SAAAtB,EAAA,yDACwB,WAAhCsB,EAAQQ,aAAaC,OADb,gCAEJT,EAAQU,OAFJ,2CAjJ2B,2DAyJzCR,eAzJyC,uCAyJxB,WAAOF,GAAP,iBAAAtB,EAAA,sEACQsB,EAAQW,cADhB,OACTC,EADS,OAGXC,EAAcD,EAASE,OAAS,GAEpC,EAAKtC,QAAQ,CACX7B,KAAMS,sBAAoBC,yBAC1BZ,QAAS,CACPjE,sBAAsB,YAAKqI,GAC3Bf,WAAW,KATA,2CAzJwB,2DAyKzCK,gBAAkB,SAACvE,GAEjB,OADoBA,EAAZoE,QACIe,MAAQ,EAAKxI,cAAcwI,KACrCnG,QAAQC,IAAIe,EAAS,MAAO,gBACrB,IAEA,EAAK4C,QAAQ,CAClB7B,KAAMS,sBAAoB4D,uBAC1BvE,QAASb,KAjL0B,KAwLzCyD,yBAA2B,SAACxC,GAC1B,IAAIJ,EAAU,CACZE,KAAM,gBACNE,eAEFL,6BAAmBC,EAAnBD,CAA4B,EAAKgC,QAAS,EAAK9B,WA7LR,KAkMzC4C,yBAA2B,SAACzC,GAC1B,IAAIJ,EAAU,CACZE,KAAM,cACNE,eAEFL,6BAAmBC,EAAnBD,CAA4B,EAAKgC,QAAS,EAAK9B,WAvMR,KA4MzC2D,eAAiB,SAACD,GAChB,IAEQxD,EAFUwD,EAAVhI,MAEAwE,SAIR,OAFA,EAAK/B,IAAL,UAAY+B,EAAZ,yBAEO,EAAK4B,QAAQ,CAClB7B,KAAMS,sBAAoBC,yBAC1BZ,QAAS,CACPgE,OAAO,GAAD,OAAK7D,EAAL,4BAtN6B,KA6NzC0D,aAAe,SAACF,GACd,IAEQxD,EAFUwD,EAAVhI,MAEAwE,SAIR,OAFA,EAAK/B,IAAL,UAAY+B,EAAZ,uBAEO,EAAK4B,QAAQ,CAClB7B,KAAMS,sBAAoBC,yBAC1BZ,QAAS,CACPgE,OAAO,GAAD,OAAK7D,EAAL,0BAvO6B,KA4OzC+B,SAAW,WACT,IAAQsC,EAAqBC,YAArBD,iBAIR,OAFAA,EAAiBE,GAAKhG,aAAaC,QAAQ,WAEpC,IAAIsE,SAAQ,SAACC,EAASC,GAC3BwB,cAAI,eAAKH,IACNrH,MAAK,YAAoB,IAAjByH,EAAgB,EAAhBA,UAEP1B,EAAQ0B,MAETC,OAAM,SAACC,GACNC,gBAAM,CAAE7E,KAAM,QAASf,QAAS2F,EAAI3F,SAAW,UAC/CgE,EAAO2B,UAxPb7J,KAAKgF,SAAWA,EAEhBhF,KAAK8G,QAAUA,EAEf9G,KAAKa,cAAgB,KAErBb,KAAKqH,OAAS,KAEdrH,KAAK8H,YAAc/B,EAEnB/F,KAAK+G,a,sDAqPP,WACM/G,KAAKa,gBACPb,KAAKa,cAAc2G,qBACnBxH,KAAKa,cAAgB,KACrBb,KAAKmD,IAAI,mCAEX0C,gCAAsB7F,KAAK8G,W,8BAK7B,WACM9G,KAAKqH,SACPrH,KAAKqH,OAAOG,qBACZxH,KAAKqH,OAAS,KACdrH,KAAK8G,QAAQ,CACX7B,KAAMS,sBAAoBC,yBAC1BZ,QAAS,CAAEpE,WAAY,QAEzBX,KAAKsD,qBACLtD,KAAKmD,IAAI,0B,iBAIb,SAAIe,GACFhB,QAAQC,IAAR,mBAAwBe,EAAxB,e,oMC1RE6F,E,kDACJ,WAAY9J,GAAQ,IAAD,8BACjB,cAAMA,IA6BR+J,0BAA4B,WAAO,IAAD,IAChC,YAAKC,eAAeC,eAApB,SAA6BtH,SAC3B,EADF,UAEE,EAAKqH,eAAeC,eAFtB,aAEE,EAA6BC,eAjCd,EAqCnBC,aAAe,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MAClBxJ,EAAkB,EAAKZ,MAAvBY,cAER,EAAK0J,SAAS,CACZrG,QAASmG,IAEXxJ,GAAiBA,EAAc2J,UA3Cd,EA8CnBC,kBAAoB,SAACC,GACnBA,EAAEC,iBACF,IAAQzG,EAAY,EAAKxD,MAAjBwD,QAEArD,EAAkB,EAAKZ,MAAvBY,cAER,IAAKA,EACH,OAAOqC,QAAQC,IAAI,mCAGjBtC,GACFA,EAAc+J,YAAYC,OAAO3G,IAAUhC,MAAK,WAC9C,EAAKqI,SAAS,CACZrG,QAAS,KAEX,EAAK8F,gCA7DQ,EAkEnBc,cAAgB,WAAoB,IAAnB5B,EAAkB,uDAAP,GACtB6B,EAAc,GACdC,EAAmB9B,EAAS+B,QAAO,SAACC,EAAc9E,GACpD,IAAI+E,EAAgB,YAAOD,GAEnB1E,EAAcJ,EAAQ1F,MAAtB8F,UAEJ4E,EAAW3G,wBAAc,KAAM,QAE/B4G,EAAU5G,wBAAc+B,EAAW,QAEnC8E,EAAc7G,wBAAc+B,EAAW,WAEvC+E,EACFH,IAAaC,EAAUC,EAAvB,UAAwCA,EAAxC,aAAwDD,GAgB1D,OAdIN,IAAgBQ,EAClBJ,EAAgB,sBACXA,GADW,cAEZlG,KAAM,WAAcmB,MAGxB2E,EAAcQ,EACdJ,EAAgB,sBACXA,GADW,CAEd,CAAElG,KAAM,YAAaoB,KAAMkF,GAFb,aAGZtG,KAAM,WAAcmB,MAInB+E,IACN,IAEH,OAAOH,GAhGP,EAAKf,eAAiBuB,IAAMC,YAC5B,EAAK/K,MAAQ,CACXwD,QAAS,IALM,E,sDASnB,SAAmBwH,GAAY,IAAD,OAG1B1L,KAAKC,MAAMa,sBAAsB+D,SACjC6G,EAAU5K,sBAAsB+D,QAEhC7E,KAAKgK,6BAGsB,IAAzBhK,KAAKC,MAAMmI,YAA+C,IAAxBsD,EAAUtD,WAC9CuD,YAAW,WACT,EAAK3B,8BAEJ,O,+BAIP,WACEhK,KAAKgK,8B,oBA0EP,WACE,MAQIhK,KAAKC,MART,IACEa,6BADF,MAC0B,GAD1B,MAEEC,qBAFF,MAEkB,GAFlB,MAGEqC,6BAHF,MAG0B,GAH1B,MAIEgF,iBAJF,aAKEvH,qBALF,MAKkB,GALlB,MAMEmC,mBANF,MAMgB,GANhB,MAOE4B,qBAPF,SAUQV,EAAYlE,KAAKU,MAAjBwD,QAEF0H,EAAU5L,KAAK8K,cAAchK,GAInC,OAAK8D,EAEH,qBAAKzE,UAAU,yBAAf,UACgB,OAAbU,QAAa,IAAbA,OAAA,EAAAA,EAAewI,KACd,mCACIjB,EAyEA,qBAAKjI,UAAU,+DAAf,SACE,sBAAMA,UAAU,aAAhB,mBACEiI,EAAY,aAAe,qBA1E/B,qCACE,sBAAKjI,UAAU,uBAAf,UACE,8BAAgB,OAAX6C,QAAW,IAAXA,OAAA,EAAAA,EAAa6I,YAAa,UAC/B,sBAAK1L,UAAU,uBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,qBAAK2L,IAAKC,UAAaC,IAAI,SAC3B,6BACGvH,wBAAa,OACZzB,QADY,IACZA,OADY,EACZA,EAAaiJ,UACb,mBACA,QAIN,sBAAK9L,UAAU,uBAAf,UACE,qBAAK2L,IAAKI,UAAkBF,IAAI,SAChC,6BACGvH,wBAAa,OAACzB,QAAD,IAACA,OAAD,EAACA,EAAaiJ,UAAW,WAAW,QAGtD,sBAAK9L,UAAU,uBAAf,UACE,qBAAK2L,IAAKK,UAAcH,IAAI,SAC5B,oCAAKhJ,QAAL,IAAKA,OAAL,EAAKA,EAAaoJ,cAGtB,4BACGrL,EAAc8D,OAAS,GACtB,sBAAM1E,UAAU,8BAAhB,mBAAkDY,EAAcsL,WAAhE,YACEtL,EAAc8D,OAAS,EAAI,MAAQ,KADrC,qBAMN,sBACE1E,UAAU,yBACVmM,IAAKtM,KAAKiK,eAFZ,WAIU,OAAP2B,QAAO,IAAPA,OAAA,EAAAA,EAAS/G,QAAS,EACjB+G,EAAQ7H,KAAI,SAACC,EAAMC,GACjB,OACE,cAAC,WAAD,CACED,KAAMA,EACNZ,sBAAuBA,EAEvBgD,QAASpC,GAJX,UAGUU,KAAKC,MAHf,YAGwBV,OAM5B,qBAAK9D,UAAU,+DAAf,SACE,sBAAMA,UAAU,aAAhB,0BAGJ,qBAAKsJ,GAAG,mBAEV,sBAAMtJ,UAAU,QAAQoM,SAAUvM,KAAKyK,kBAAvC,SACE,sBAAKtK,UAAU,sBAAf,UACE,uBACE8E,KAAK,OACLuH,YAAY,2BACZnC,MAAOnG,EACPuI,SAAUzM,KAAKoK,eAEjB,qBAAKjK,UAAU,mBAAf,SACE,wBAAQA,UAAU,kBAAlB,SACE,cAAC,UAAD,kBAed,qBAAKA,UAAU,+DAAf,SACE,sBAAMA,UAAU,aAAhB,mBACEiI,EAAY,aAAe,0CAxFV,S,GAvHJhI,aA4OrBsM,EAAUnM,aApBQ,SAACG,GAAD,MAAY,CAClCC,WAAYD,EAAME,iBAAiBD,WACnCE,cAAeH,EAAME,iBAAiBC,cACtCC,sBAAuBJ,EAAME,iBAAiBE,sBAC9CC,cAAeL,EAAME,iBAAiBG,cACtCC,mBAAoBN,EAAME,iBAAiBI,mBAC3CoC,sBAAuB1C,EAAME,iBAAiBwC,sBAC9CgF,UAAW1H,EAAME,iBAAiBwH,UAClCpF,YAAatC,EAAME,iBAAiBoC,gBAGX,SAAC/B,GAC1B,OAAOC,YACL,CACEC,iCAEFF,KAIYV,CAA6CwJ,GAE9C2C,a,iCC3Pf,OAAe,cAA0B,mC,iCCAzC,OAAe,cAA0B,+C,iCCAzC,OAAe,cAA0B,2C,uDCAzC,OAAe,cAA0B,qC,iCCAzC,OAAe,cAA0B,0C","file":"static/js/18.2a48b73c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./style.scss\";\r\n\r\nexport class CommonPageLoaderClass extends Component {\r\n  render() {\r\n    let { isSpinningLoader = false } = this.props;\r\n    return (\r\n      <>\r\n        {!isSpinningLoader ? (\r\n          <div className=\"loader\">\r\n            <div className=\"loader-circle\"></div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"lds-spinner\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\nlet component = CommonPageLoaderClass;\r\n\r\nexport const CommonPageLoader = connect(null, null)(component);\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Tabs, Tab, TabPanel, TabList } from \"react-web-tabs\";\r\nimport \"react-web-tabs/dist/react-web-tabs.css\";\r\nimport \"./style.scss\";\r\nimport Jenny from \"../../../../assets/files/TrainerDashboard/Message/Jenny.png\";\r\nimport Jonn from \"../../../../assets/files/TrainerDashboard/Message/Image 1.png\";\r\nimport SheduleIcon from \"../../../../assets/files/TrainerDashboard/Message/Shedule Icon.svg\";\r\nimport AvailabilityIcon from \"../../../../assets/files/TrainerDashboard/Message/Availability Icon.svg\";\r\nimport LocationIcon from \"../../../../assets/files/TrainerDashboard/Message/Location Icon.svg\";\r\nimport BlueHoverButton from \"../../../common/BlueArrowButton/index\";\r\nimport { trainerChannel } from \"action/trainerAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { twilioApi } from \"../../../../service/apiVariables\";\r\nimport { api } from \"../../../../service/api\";\r\nimport { Toast } from \"../../../../service/toast\";\r\nimport ChatBox from \"component/common/Message/ChatBox\";\r\nimport {\r\n  initClientDispatch,\r\n  updateMessagingDetails,\r\n} from \"action/messagingAct\";\r\nimport { getFormatDate } from \"service/helperFunctions\";\r\nimport { UserAvatar } from \"component/common/UserAvatar\";\r\nimport { CommonPageLoader } from \"component/common/CommonPageLoader\";\r\nconst Chatt = require(\"twilio-chat\");\r\n\r\nconst TrainerMessageClass = ({\r\n  trainerChannel,\r\n  initClientDispatch,\r\n  clientData,\r\n  activeChannel,\r\n  activeChannelMessages,\r\n  typingMembers,\r\n  chatClientInstance,\r\n  updateMessagingDetails,\r\n}) => {\r\n  const [individual_list, setIndividual] = useState([]);\r\n  const [socialGroup_list, setSocialGroup_list] = useState([]);\r\n  const [admin_list, setAdmin_list] = useState([]);\r\n  const [Channel, setChannel] = useState([]);\r\n  const [Client, setClient] = useState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [text_thread, setText_thread] = useState([]);\r\n  const [chattoken, setToken] = useState(\"\");\r\n  const [channel_id, setChannel_id] = useState(\"\");\r\n  const [isMessageListLoading, setMessageListLoading] = useState(true);\r\n\r\n  // Make Id dynamic\r\n  useEffect(() => {\r\n    // Get Contact_list\r\n\r\n    initClientDispatch(getChannelDetails);\r\n\r\n    getChannelDetails();\r\n\r\n    return () => {\r\n      chatClientInstance && chatClientInstance.removeChatClient();\r\n    };\r\n  }, []);\r\n\r\n  const getChannelDetails = () => {\r\n    trainerChannel().then((data) => {\r\n      setIndividual(data.individualClient);\r\n      setSocialGroup_list(data.socialGroups);\r\n      setAdmin_list(data.admins);\r\n      setMessageListLoading(false);\r\n\r\n      let messageLeftDOMs = document.getElementsByClassName(\"message_left\");\r\n\r\n      [...messageLeftDOMs]?.forEach((dom) => dom?.scrollTo(0, 0));\r\n    });\r\n  };\r\n\r\n  function PopulateContacts(channelID, members, channelData) {\r\n    // console.log(channelID, chatClientInstance);\r\n\r\n    // \"CH15f50302975a435799691ca5f8d71092\";\r\n    chatClientInstance.joinChannelByID(channelID).then(() => {\r\n      console.log(\"Channel Loaded\");\r\n\r\n      let reduxData = {\r\n        currentChannelMembers: members,\r\n        channelData,\r\n      };\r\n\r\n      updateMessagingDetails(reduxData);\r\n    });\r\n  }\r\n\r\n  function handleTabChange() {\r\n    chatClientInstance && chatClientInstance.unSubscribeChannel();\r\n  }\r\n\r\n  const isUser = parseInt(localStorage.getItem(\"type\")) === 3;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main_message_container\">\r\n        <div className=\"message_outter_container\">\r\n          <h2>Messages</h2>\r\n          <div className=\"message_inner\">\r\n            <div className=\"message_wrapper\">\r\n              <Tabs defaultTab=\"one\">\r\n                <TabList>\r\n                  <Tab tabFor=\"one\" onClick={handleTabChange}>\r\n                    All\r\n                  </Tab>\r\n                  {!isUser && (\r\n                    <Tab tabFor=\"two\" onClick={handleTabChange}>\r\n                      INDIVIDUAL CLIENTS\r\n                    </Tab>\r\n                  )}\r\n                  <Tab tabFor=\"three\" onClick={handleTabChange}>\r\n                    SOCIAL GROUPS\r\n                  </Tab>\r\n                  <Tab tabFor=\"four\" onClick={handleTabChange}>\r\n                    ADMIN\r\n                  </Tab>\r\n                </TabList>\r\n                <div className=\"message_inner\">\r\n                  <TabPanel tabId=\"one\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {!isMessageListLoading ? (\r\n                          [\r\n                            ...individual_list,\r\n                            ...socialGroup_list,\r\n                            ...admin_list,\r\n                          ].map((item, index) => {\r\n                            const { from, body, date_updated } = item.message;\r\n\r\n                            let lastUserProfilePic =\r\n                              item[\"members\"]?.filter(\r\n                                ({ userId }) => userId === from\r\n                              )[0] ||\r\n                              item[\"members\"][0] ||\r\n                              {};\r\n\r\n                            return (\r\n                              <div\r\n                                className=\"contact_item\"\r\n                                key={`${Date.now()}_all_${index}`}\r\n                              >\r\n                                <div className=\"inner_link\">\r\n                                  {/* <img\r\n                                  src={\r\n                                    lastUserProfilePic?.profilePicture || Jenny\r\n                                  }\r\n                                  alt={`${lastUserProfilePic?.userName} profile`}\r\n                                  onError={(e) => {\r\n                                    e.target.onerror = null;\r\n                                    e.target.src = Jenny;\r\n                                  }}\r\n                                /> */}\r\n                                  {/* {JSON.stringify(lastUserProfilePic)} */}\r\n\r\n                                  <UserAvatar {...lastUserProfilePic} />\r\n\r\n                                  <div\r\n                                    className=\"message_link_notify\"\r\n                                    onClick={() =>\r\n                                      PopulateContacts(\r\n                                        item[\"channelUniqueName\"],\r\n                                        item[\"members\"],\r\n                                        item\r\n                                      )\r\n                                    }\r\n                                  >\r\n                                    <h3>{item[\"chatTitle\"] || \"\"}</h3>\r\n                                    <div>\r\n                                      {body && <p>{body}</p>}\r\n                                      {date_updated && (\r\n                                        <span className=\"msg-timestamp-left\">\r\n                                          {getFormatDate(date_updated, \"LT\")}\r\n                                        </span>\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          })\r\n                        ) : (\r\n                          <CommonPageLoader />\r\n                        )}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <ChatBox\r\n                          isDataPresent={\r\n                            [\r\n                              ...individual_list,\r\n                              ...socialGroup_list,\r\n                              ...admin_list,\r\n                            ].length > 0\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n\r\n                  <TabPanel tabId=\"two\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {!isMessageListLoading ? (\r\n                          individual_list.map((item, index) => {\r\n                            const { from, body, date_updated } = item.message;\r\n\r\n                            let lastUserProfilePic =\r\n                              item[\"members\"]?.filter(\r\n                                ({ userId }) => userId === from\r\n                              )[0] ||\r\n                              item[\"members\"][0] ||\r\n                              {};\r\n                            return (\r\n                              <div\r\n                                className=\"contact_item\"\r\n                                key={`${Date.now()}_${index}`}\r\n                              >\r\n                                <div className=\"inner_link\">\r\n                                  {/* <img\r\n                                  src={\r\n                                    lastUserProfilePic?.profilePicture || Jenny\r\n                                  }\r\n                                  alt={`${lastUserProfilePic?.userName} profile`}\r\n                                  onError={(e) => {\r\n                                    e.target.onerror = null;\r\n                                    e.target.src = Jenny;\r\n                                  }}\r\n                                /> */}\r\n                                  <UserAvatar {...lastUserProfilePic} />\r\n                                  <div\r\n                                    className=\"message_link_notify\"\r\n                                    onClick={() =>\r\n                                      PopulateContacts(\r\n                                        item[\"channelUniqueName\"],\r\n                                        item[\"members\"],\r\n                                        item\r\n                                      )\r\n                                    }\r\n                                  >\r\n                                    <h3>{item[\"chatTitle\"] || \"\"}</h3>\r\n                                    <div>\r\n                                      {body && <p>{body}</p>}\r\n                                      {date_updated && (\r\n                                        <span className=\"msg-timestamp-left\">\r\n                                          {getFormatDate(date_updated, \"LT\")}\r\n                                        </span>\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          })\r\n                        ) : (\r\n                          <CommonPageLoader />\r\n                        )}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <ChatBox isDataPresent={individual_list.length > 0} />\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n                  <TabPanel tabId=\"three\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {!isMessageListLoading ? (\r\n                          socialGroup_list.map((item, index) => {\r\n                            const { from, body, date_updated } = item.message;\r\n\r\n                            let lastUserProfilePic =\r\n                              item[\"members\"]?.filter(\r\n                                ({ userId }) => userId === from\r\n                              )[0] ||\r\n                              item[\"members\"][0] ||\r\n                              {};\r\n                            return (\r\n                              <div\r\n                                className=\"contact_item\"\r\n                                key={`${index}_${Date.now()}`}\r\n                              >\r\n                                <div className=\"inner_link\">\r\n                                  {/* <img\r\n                                  src={\r\n                                    lastUserProfilePic?.profilePicture || Jenny\r\n                                  }\r\n                                  alt={`${lastUserProfilePic?.userName} profile`}\r\n                                  onError={(e) => {\r\n                                    e.target.onerror = null;\r\n                                    e.target.src = Jenny;\r\n                                  }}\r\n                                /> */}\r\n                                  <UserAvatar {...lastUserProfilePic} />\r\n                                  <div\r\n                                    className=\"message_link_notify\"\r\n                                    onClick={() =>\r\n                                      PopulateContacts(\r\n                                        item[\"channelUniqueName\"],\r\n                                        item[\"members\"],\r\n                                        item\r\n                                      )\r\n                                    }\r\n                                  >\r\n                                    <h3>{item[\"chatTitle\"] || \"\"}</h3>\r\n                                    <div>\r\n                                      {body && <p>{body}</p>}\r\n                                      {date_updated && (\r\n                                        <span className=\"msg-timestamp-left\">\r\n                                          {getFormatDate(date_updated, \"LT\")}\r\n                                        </span>\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          })\r\n                        ) : (\r\n                          <CommonPageLoader />\r\n                        )}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <ChatBox isDataPresent={socialGroup_list.length > 0} />\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n                  <TabPanel tabId=\"four\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {!isMessageListLoading ? (\r\n                          admin_list.map((item) => {\r\n                            const { from, body, date_updated } = item.message;\r\n\r\n                            let lastUserProfilePic =\r\n                              item[\"members\"]?.filter(\r\n                                ({ userId }) => userId === from\r\n                              )[0] ||\r\n                              item[\"members\"][0] ||\r\n                              {};\r\n                            return (\r\n                              <div className=\"contact_item\">\r\n                                <div className=\"inner_link\">\r\n                                  {/* <img\r\n                                  src={\r\n                                    lastUserProfilePic?.profilePicture || Jenny\r\n                                  }\r\n                                  alt={`${lastUserProfilePic?.userName} profile`}\r\n                                  onError={(e) => {\r\n                                    e.target.onerror = null;\r\n                                    e.target.src = Jenny;\r\n                                  }}\r\n                                /> */}\r\n                                  <UserAvatar {...lastUserProfilePic} />\r\n                                  <div\r\n                                    className=\"message_link_notify\"\r\n                                    onClick={() =>\r\n                                      PopulateContacts(\r\n                                        item[\"channelUniqueName\"],\r\n                                        item[\"members\"],\r\n                                        item\r\n                                      )\r\n                                    }\r\n                                  >\r\n                                    <h3>{item[\"chatTitle\"] || \"\"}</h3>\r\n                                    <div>\r\n                                      {body && <p>{body}</p>}\r\n                                      {date_updated && (\r\n                                        <span className=\"msg-timestamp-left\">\r\n                                          {getFormatDate(date_updated, \"LT\")}\r\n                                        </span>\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          })\r\n                        ) : (\r\n                          <CommonPageLoader />\r\n                        )}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <ChatBox isDataPresent={admin_list.length > 0} />\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n                </div>\r\n              </Tabs>\r\n              <div className=\"\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nconst RightChat = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"message_chat_right\">\r\n        <div className=\"message_text\">\r\n          <h5>{props.data}</h5>\r\n        </div>\r\n\r\n        <img src={Jonn} alt=\"icon\" />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n// const LeftChat = (props) => {\r\n//     return (\r\n//         <>\r\n//             <div className=\"message_chat_right\">\r\n//                 <div className=\"message_text\">\r\n//                     <h5>{props.data}</h5>\r\n//                 </div>\r\n\r\n//                 <img src={Jonn} alt=\"icon\" />\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\nconst mapStateToProps = (state) => ({\r\n  clientData: state.messagingReducer.clientData,\r\n  activeChannel: state.messagingReducer.activeChannel,\r\n  activeChannelMessages: state.messagingReducer.activeChannelMessages,\r\n  typingMembers: state.messagingReducer.typingMembers,\r\n  chatClientInstance: state.messagingReducer.chatClientInstance,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      trainerChannel,\r\n      initClientDispatch,\r\n      updateMessagingDetails,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst TrainerMessage = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TrainerMessageClass);\r\n\r\nexport default TrainerMessage;\r\n","import { MessagingActionType } from \"../service/actionType\";\r\nimport ChatClientInstance from \"../helpers/Messaging\";\r\n\r\nexport const updatePersonTyping = (payload) => (dispatch, getState) => {\r\n  const { typingMembers, currentChannelMembers } = getState().messagingReducer;\r\n  const { type, participant } = payload;\r\n  let { identity } = participant.state;\r\n  let tempMembers = typingMembers;\r\n\r\n  const currentChatItemOwner =\r\n    currentChannelMembers.filter(\r\n      ({ userIdenity }) => userIdenity === identity\r\n    )[0] || {};\r\n\r\n  let currentPerson = currentChatItemOwner?.userName || identity;\r\n\r\n  if (type === \"typingStarted\") {\r\n    // console.log(typingMembers, identity);\r\n\r\n    if (!typingMembers.includes(currentPerson)) {\r\n      tempMembers = [...typingMembers, currentPerson];\r\n\r\n      dispatch({\r\n        type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n        payload: { typingMembers: [...tempMembers] },\r\n      });\r\n    }\r\n  } else if (type === \"typingEnded\") {\r\n    // console.log(typingMembers, currentPerson);\r\n    if (typingMembers.includes(currentPerson)) {\r\n      tempMembers = [...typingMembers].filter(\r\n        (person) => person !== currentPerson\r\n      );\r\n      dispatch({\r\n        type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n        payload: { typingMembers: [...tempMembers] },\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const resetChannelDetails = () => (dispatch) => {\r\n  dispatch({\r\n    type: MessagingActionType.RESET_CHANNEL_DETAILS,\r\n  });\r\n};\r\n\r\nexport const updateMessagingDetails = (payload) => (dispatch) => {\r\n  dispatch({\r\n    type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n    payload,\r\n  });\r\n};\r\n\r\nexport const initClientDispatch = (callback) => (dispatch, getState) => {\r\n  dispatch({\r\n    type: MessagingActionType.UPDATE_CLIENT_INSTANCE,\r\n    payload: new ChatClientInstance(dispatch, getState, callback),\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport Jonn from \"../../../assets/files/TrainerDashboard/Message/Image 1.png\";\r\nimport { UserAvatar } from \"../UserAvatar\";\r\n\r\nexport const ChatItem = ({\r\n  currentChannelMembers = [],\r\n  currMsg: { type, state, date },\r\n}) => {\r\n  let CurrentMessageComponent;\r\n\r\n  if (type === \"message\") {\r\n    let msgCreatedDate = moment(state.timestamp);\r\n\r\n    let msgTime = msgCreatedDate.format(\"LT\");\r\n\r\n    const isMyMsg = state?.author === localStorage.getItem(\"user-id\");\r\n\r\n    const currentChatItemOwner =\r\n      currentChannelMembers.filter(\r\n        ({ userIdenity }) => userIdenity === state.author\r\n      )[0] || {};\r\n\r\n    CurrentMessageComponent = (\r\n      <div className={`message_chat_${isMyMsg ? \"right\" : \"left\"}`}>\r\n        <div className=\"message_text\">\r\n          <h5>{state?.body || \"\"}</h5>\r\n          <span className=\"msg-time\">{msgTime}</span>\r\n        </div>\r\n\r\n        <UserAvatar {...currentChatItemOwner} />\r\n\r\n        {/* <img\r\n          src={currentChatItemOwner?.profilePicture || Jonn}\r\n          alt=\"icon\"\r\n          onError={(e) => {\r\n            e.target.onerror = null;\r\n            e.target.src = Jonn;\r\n          }}\r\n        /> */}\r\n      </div>\r\n    );\r\n  } else {\r\n    CurrentMessageComponent = (\r\n      <div className=\"w-100 d-flex align-items-center justify-content-center my-3\">\r\n        <span className=\"info-badge\">{date}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>{CurrentMessageComponent}</div>;\r\n};\r\n","// import config from \"../../config\";\r\n\r\nimport { MessagingActionType } from \"../service/actionType\";\r\nimport { twilioApi } from \"../service/apiVariables\";\r\nimport { api } from \"../service/api\";\r\nimport { Toast } from \"../service/toast\";\r\nimport {\r\n  updatePersonTyping,\r\n  resetChannelDetails,\r\n} from \"../action/messagingAct\";\r\n\r\nconst Chat = require(\"twilio-chat\");\r\n\r\nexport default class TwilioMessaging {\r\n  constructor(handler, getState, callback) {\r\n    this.getState = getState;\r\n\r\n    this.handler = handler;\r\n\r\n    this.activeChannel = null;\r\n\r\n    this.client = null;\r\n\r\n    this.callbackApi = callback;\r\n\r\n    this.initClient();\r\n  }\r\n\r\n  initClient = async () => {\r\n    const token = await this.getToken();\r\n\r\n    const client = await Chat.Client.create(token);\r\n\r\n    this.client = client;\r\n\r\n    this.handler({\r\n      type: MessagingActionType.INITIALIZE_CLIENT,\r\n      payload: client,\r\n    });\r\n\r\n    this.initClientListeners(client);\r\n  };\r\n\r\n  initClientListeners = (client) => {\r\n    // REMOVE ALL THE EXISTING LISTENERS\r\n    client.removeAllListeners();\r\n\r\n    // client.on(\"channelJoined\", async (channel) => {\r\n    //   // getting list of all messages since this is an existing channel\r\n    //   console.log(channel);\r\n\r\n    //   await this.onChanelJoined(channel);\r\n    // });\r\n\r\n    // LISTEN FOR GLOBAL MESSAGES\r\n\r\n    client.on(\"messageAdded\", async (message) => {\r\n      this.globalMessage(message);\r\n    });\r\n\r\n    // LISTEN FOR PERSON WHOSE ARE TYPING\r\n    client.on(\"typingStarted\", (participant) => {\r\n      this.onParticipantStartTyping(participant);\r\n    });\r\n\r\n    // LISTEN FOR PERSON WHOM HAVE STOP TYPING\r\n    client.on(\"typingEnded\", (participant) => {\r\n      this.onParticipantEndedTyping(participant);\r\n    });\r\n\r\n    //LISTEN AND UPDATE IF TOKEN IS ABOUT TO EXPIRE\r\n\r\n    client.on(\"tokenAboutToExpire\", async () => {\r\n      this.log(\"token is about to expire\");\r\n      const token = await this.getToken();\r\n      client.updateToken(token);\r\n    });\r\n\r\n    // LISTEN IF ALREADY TOKEN HAS EXPIRED\r\n\r\n    client.on(\"tokenExpired\", async () => {\r\n      this.log(\"token is about to expire\");\r\n      const token = await this.getToken();\r\n      client.updateToken(token);\r\n    });\r\n  };\r\n\r\n  globalMessage = (message) => {\r\n    // console.log(message.channel, this.activeChannel);\r\n\r\n    // if (message.channel.sid !== this.activeChannel.sid) {\r\n    //   console.log(message);\r\n    this.callbackApi && this.callbackApi();\r\n    // }\r\n  };\r\n\r\n  joinChannelByID = async (uniqueChannelId) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        this.unSubscribeChannel();\r\n        if (!this.client) return alert(\"Twilio loading\");\r\n\r\n        this.handler({\r\n          type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n          payload: { isLoading: true },\r\n        });\r\n\r\n        this.log(`Attempting to join ${uniqueChannelId} channel`);\r\n\r\n        const channel = await this.client.getChannelByUniqueName(\r\n          uniqueChannelId\r\n        );\r\n        await this.joinChannel(channel);\r\n\r\n        await this.onChanelJoined(channel);\r\n\r\n        this.log(`Channel joined`);\r\n\r\n        this.activeChannel = channel;\r\n\r\n        // LISTEN ON CHANNEL MESSAGE ADDED\r\n\r\n        channel.on(\"messageAdded\", async (message) => {\r\n          await this.onMessagedAdded(message);\r\n        });\r\n\r\n        // LISTEN FOR PERSON WHOSE ARE TYPING\r\n        channel.on(\"typingStarted\", (participant) => {\r\n          this.onParticipantStartTyping(participant);\r\n        });\r\n\r\n        // LISTEN FOR PERSON WHOM HAVE STOP TYPING\r\n        channel.on(\"typingEnded\", (participant) => {\r\n          this.onParticipantEndedTyping(participant);\r\n        });\r\n\r\n        // WHEN A MEMBER JOINED\r\n\r\n        channel.on(\"memberJoined\", (member) => {\r\n          this.onMemberJoined(member);\r\n        });\r\n\r\n        // WHEN A MEMBER LEFT\r\n        channel.on(\"memberLeft\", (member) => {\r\n          this.onMemberLeft(member);\r\n        });\r\n\r\n        this.handler({\r\n          type: MessagingActionType.UPDATE_CHANNEL_DETAILS,\r\n          payload: channel,\r\n        });\r\n        resolve(true);\r\n      } catch (err) {\r\n        this.log(`Not able to join the channel`);\r\n        reject(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  joinChannel = async (channel) => {\r\n    if (channel.channelState.status !== \"joined\") {\r\n      await channel.join();\r\n    }\r\n  };\r\n\r\n  // FUNC FIRES WHEN USER JOINED IN A CHANNEL\r\n\r\n  onChanelJoined = async (channel) => {\r\n    const messages = await channel.getMessages();\r\n\r\n    let tempMessage = messages.items || [];\r\n\r\n    this.handler({\r\n      type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n      payload: {\r\n        activeChannelMessages: [...tempMessage],\r\n        isLoading: false,\r\n      },\r\n    });\r\n  };\r\n\r\n  // FUNC FIRES WHEN USER RECIVES MESSAGE\r\n\r\n  onMessagedAdded = (message) => {\r\n    const { channel } = message;\r\n    if (channel.sid !== this.activeChannel.sid) {\r\n      console.log(message, \"msg\", \"diff channel\");\r\n      return {};\r\n    } else {\r\n      return this.handler({\r\n        type: MessagingActionType.UPDATE_MESSAGE_DETAILS,\r\n        payload: message,\r\n      });\r\n    }\r\n  };\r\n\r\n  // WHEN PERSON STARTS TYPING THIS FUNC FIRES\r\n\r\n  onParticipantStartTyping = (participant) => {\r\n    let payload = {\r\n      type: \"typingStarted\",\r\n      participant,\r\n    };\r\n    updatePersonTyping(payload)(this.handler, this.getState);\r\n  };\r\n\r\n  // WHEN PERSON STOPS TYPING THIS FUNC FIRES\r\n\r\n  onParticipantEndedTyping = (participant) => {\r\n    let payload = {\r\n      type: \"typingEnded\",\r\n      participant,\r\n    };\r\n    updatePersonTyping(payload)(this.handler, this.getState);\r\n  };\r\n\r\n  // WHEN NEW PERSON JOINS THE ROOM THIS FUNC FIRES\r\n\r\n  onMemberJoined = (member) => {\r\n    const { state } = member;\r\n\r\n    const { identity } = state;\r\n\r\n    this.log(`${identity} has joined the chat`);\r\n\r\n    return this.handler({\r\n      type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n      payload: {\r\n        status: `${identity} has joined the chat`,\r\n      },\r\n    });\r\n  };\r\n\r\n  // WHEN A PERSON LEFT THE ROOM THIS FUNC FIRES\r\n\r\n  onMemberLeft = (member) => {\r\n    const { state } = member;\r\n\r\n    const { identity } = state;\r\n\r\n    this.log(`${identity} has left the chat`);\r\n\r\n    return this.handler({\r\n      type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n      payload: {\r\n        status: `${identity} has left the chat`,\r\n      },\r\n    });\r\n  };\r\n\r\n  getToken = () => {\r\n    const { getIdentityToken } = twilioApi;\r\n\r\n    getIdentityToken.id = localStorage.getItem(\"user-id\");\r\n\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...getIdentityToken })\r\n        .then(({ chatToken }) => {\r\n          //   console.log(chatToken);\r\n          resolve(chatToken);\r\n        })\r\n        .catch((err) => {\r\n          Toast({ type: \"error\", message: err.message || \"Error\" });\r\n          reject(err);\r\n        });\r\n    });\r\n  };\r\n\r\n  // REMOVE THE LISTENERS FROM THE ACTIVE CHANNEL\r\n\r\n  unSubscribeChannel() {\r\n    if (this.activeChannel) {\r\n      this.activeChannel.removeAllListeners();\r\n      this.activeChannel = null;\r\n      this.log(\"Un subscribed from the channel\");\r\n    }\r\n    resetChannelDetails()(this.handler);\r\n  }\r\n\r\n  // REMOVE CHAT CLIENT\r\n\r\n  removeChatClient() {\r\n    if (this.client) {\r\n      this.client.removeAllListeners();\r\n      this.client = null;\r\n      this.handler({\r\n        type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n        payload: { clientData: null },\r\n      });\r\n      this.unSubscribeChannel();\r\n      this.log(\"chat client removed\");\r\n    }\r\n  }\r\n\r\n  log(message) {\r\n    console.log(`---------${message}------`);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport LocationIcon from \"../../../assets/files/TrainerDashboard/Message/Location Icon.svg\";\r\nimport SheduleIcon from \"../../../assets/files/TrainerDashboard/Message/Shedule Icon.svg\";\r\nimport AvailabilityIcon from \"../../../assets/files/TrainerDashboard/Message/Availability Icon.svg\";\r\nimport BlueHoverButton from \"../BlueArrowButton\";\r\n\r\nimport { ChatItem } from \"./ChatItem\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { trainerChannel } from \"action/trainerAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { getFormatDate } from \"service/helperFunctions\";\r\n\r\nclass ChatBoxClass extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.messagesEndRef = React.createRef();\r\n    this.state = {\r\n      message: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // console.log(this.props, prevProps);\r\n    if (\r\n      this.props.activeChannelMessages.length !==\r\n      prevProps.activeChannelMessages.length\r\n    ) {\r\n      this.scrollToMessageListBottom();\r\n      // console.log(\"hrllo\");\r\n    }\r\n    if (this.props.isLoading === false && prevProps.isLoading === true) {\r\n      setTimeout(() => {\r\n        this.scrollToMessageListBottom();\r\n        // console.log(\"hrllo\", this.props.isLoading, prevProps.isLoading);\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.scrollToMessageListBottom();\r\n  }\r\n\r\n  scrollToMessageListBottom = () => {\r\n    this.messagesEndRef.current?.scrollTo(\r\n      0,\r\n      this.messagesEndRef.current?.scrollHeight\r\n    );\r\n  };\r\n\r\n  handleChange = ({ target: { value } }) => {\r\n    const { activeChannel } = this.props;\r\n\r\n    this.setState({\r\n      message: value,\r\n    });\r\n    activeChannel && activeChannel.typing();\r\n  };\r\n\r\n  handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    const { message } = this.state;\r\n\r\n    const { activeChannel } = this.props;\r\n\r\n    if (!activeChannel) {\r\n      return console.log(\"Chat Service is not configured.\");\r\n    }\r\n\r\n    if (activeChannel) {\r\n      activeChannel.sendMessage(String(message)).then(() => {\r\n        this.setState({\r\n          message: \"\",\r\n        });\r\n        this.scrollToMessageListBottom();\r\n      });\r\n    }\r\n  };\r\n\r\n  formatMessage = (messages = []) => {\r\n    var lastMsgDate = \"\";\r\n    let formattedMessage = messages.reduce((prevMsgArray, currMsg) => {\r\n      let tempPrevMsgArray = [...prevMsgArray];\r\n\r\n      const { timestamp } = currMsg.state;\r\n\r\n      let currYear = getFormatDate(null, \"YYYY\");\r\n\r\n      let msgYear = getFormatDate(timestamp, \"YYYY\");\r\n\r\n      let tempMsgDate = getFormatDate(timestamp, \"MMMM DD\");\r\n\r\n      let msgDate =\r\n        currYear === msgYear ? tempMsgDate : `${tempMsgDate}, ${msgYear}`;\r\n\r\n      if (lastMsgDate === msgDate) {\r\n        tempPrevMsgArray = [\r\n          ...tempPrevMsgArray,\r\n          { type: \"message\", ...currMsg },\r\n        ];\r\n      } else {\r\n        lastMsgDate = msgDate;\r\n        tempPrevMsgArray = [\r\n          ...tempPrevMsgArray,\r\n          { type: \"timestamp\", date: msgDate },\r\n          { type: \"message\", ...currMsg },\r\n        ];\r\n      }\r\n\r\n      return tempPrevMsgArray;\r\n    }, []);\r\n\r\n    return formattedMessage;\r\n  };\r\n  render() {\r\n    const {\r\n      activeChannelMessages = [],\r\n      typingMembers = [],\r\n      currentChannelMembers = [],\r\n      isLoading = false,\r\n      activeChannel = {},\r\n      channelData = {},\r\n      isDataPresent = false,\r\n    } = this.props;\r\n\r\n    const { message } = this.state;\r\n\r\n    const tempMsg = this.formatMessage(activeChannelMessages);\r\n\r\n    const messages = activeChannelMessages;\r\n\r\n    if (!isDataPresent) return null;\r\n    return (\r\n      <div className=\"message_right_chatarea\">\r\n        {activeChannel?.sid ? (\r\n          <>\r\n            {!isLoading ? (\r\n              <>\r\n                <div className=\"message_right_header\">\r\n                  <h2>{channelData?.chatTitle || \"Title\"}</h2>\r\n                  <div className=\"message_header_times\">\r\n                    <div className=\"message_header_items\">\r\n                      <img src={SheduleIcon} alt=\"icon\" />\r\n                      <h5>\r\n                        {getFormatDate(\r\n                          channelData?.startTime,\r\n                          \"ddd MMM DD YYYY\",\r\n                          true\r\n                        )}\r\n                      </h5>\r\n                    </div>\r\n                    <div className=\"message_header_items\">\r\n                      <img src={AvailabilityIcon} alt=\"icon\" />\r\n                      <h5>\r\n                        {getFormatDate(channelData?.startTime, \"hh:mm A\", true)}\r\n                      </h5>\r\n                    </div>\r\n                    <div className=\"message_header_items\">\r\n                      <img src={LocationIcon} alt=\"icon\" />\r\n                      <h5>{channelData?.venue}</h5>\r\n                    </div>\r\n                  </div>\r\n                  <p>\r\n                    {typingMembers.length > 0 && (\r\n                      <span className=\"ml-auto text-primary fw-600\">{`${typingMembers.toString()} ${\r\n                        typingMembers.length > 1 ? \"are\" : \"is\"\r\n                      } typing...`}</span>\r\n                    )}\r\n                  </p>\r\n                </div>\r\n                <div\r\n                  className=\"message_right_textarea\"\r\n                  ref={this.messagesEndRef}\r\n                >\r\n                  {tempMsg?.length > 0 ? (\r\n                    tempMsg.map((item, index) => {\r\n                      return (\r\n                        <ChatItem\r\n                          item={item}\r\n                          currentChannelMembers={currentChannelMembers}\r\n                          key={`${Date.now()}_${index}`}\r\n                          currMsg={item}\r\n                        />\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <div className=\"w-100 h-100 d-flex align-items-center justify-content-center\">\r\n                      <span className=\"info-badge\">No message</span>\r\n                    </div>\r\n                  )}\r\n                  <div id=\"end-message\" />\r\n                </div>\r\n                <form className=\"w-100\" onSubmit={this.handleSendMessage}>\r\n                  <div className=\"message_right_input\">\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Type your message here..\"\r\n                      value={message}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    <div className=\"submit-btn-block\">\r\n                      <button className=\"transparent-btn\">\r\n                        <BlueHoverButton />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </>\r\n            ) : (\r\n              <div className=\"w-100 h-100 d-flex align-items-center justify-content-center\">\r\n                <span className=\"info-badge\">{`${\r\n                  isLoading ? \"Loading...\" : \"Connecting...\"\r\n                }`}</span>\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div className=\"w-100 h-100 d-flex align-items-center justify-content-center\">\r\n            <span className=\"info-badge\">{`${\r\n              isLoading ? \"Loading...\" : \"Select a chat to start messaging\"\r\n            }`}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  clientData: state.messagingReducer.clientData,\r\n  activeChannel: state.messagingReducer.activeChannel,\r\n  activeChannelMessages: state.messagingReducer.activeChannelMessages,\r\n  typingMembers: state.messagingReducer.typingMembers,\r\n  chatClientInstance: state.messagingReducer.chatClientInstance,\r\n  currentChannelMembers: state.messagingReducer.currentChannelMembers,\r\n  isLoading: state.messagingReducer.isLoading,\r\n  channelData: state.messagingReducer.channelData,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      trainerChannel,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst ChatBox = connect(mapStateToProps, mapDispatchToProps)(ChatBoxClass);\r\n\r\nexport default ChatBox;\r\n","export default __webpack_public_path__ + \"static/media/Jenny.c50273b9.png\";","export default __webpack_public_path__ + \"static/media/Availability Icon.ad0517cb.svg\";","export default __webpack_public_path__ + \"static/media/Location Icon.cbb0b32d.svg\";","export default __webpack_public_path__ + \"static/media/Image 1.5667afc3.png\";","export default __webpack_public_path__ + \"static/media/Shedule Icon.7b9fb7aa.svg\";"],"sourceRoot":""}