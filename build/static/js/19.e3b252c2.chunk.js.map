{"version":3,"sources":["../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js","component/common/YearDropdown/index.js","component/TrainerOnBoard/TrainerBackground/index.js","assets/files/SVG/Arrow Back.svg","assets/files/SVG/Drop Down 4.svg","component/common/NormalMultiSelect/index.js"],"names":["createSvgIcon","React","d","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","props","ref","_props$checkedIcon","checkedIcon","classes","_props$color","color","_props$icon","icon","iconProp","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","indeterminateIconProp","inputProps","_props$size","size","other","_objectWithoutProperties","SwitchBase","_extends","type","root","clsx","concat","capitalize","checked","disabled","fontSize","undefined","withStyles","theme","palette","text","secondary","colorPrimary","primary","main","backgroundColor","fade","action","hoverOpacity","colorSecondary","name","YearDropDown","label","restProps","options","getFormattedYears","map","year","toString","value","placeholder","arrow","worksMode","TrainerBackground","connect","state","details","trainerReducer","dispatch","bindActionCreators","updateTrainerDetailsApicall","getTrainerDetails","trainerDetail","useState","checkedBoxing","setCheckedBoxing","checkedHIIT","setCheckedHIIT","checkedYoga","setCheckedYoga","checkedPilates","setCheckedPilates","workMode","workLocation","currentExperience","setCurrentExperience","areaOfExpertise","clientAssessment","trainingProcess","interestInMotto","awaitingCertification","trainerbackgroundData","setTrainerbackgroundData","orgnization","job","years","inputFields","setInputField","certificate","upload","inputCertificatesFields","setinputCertificatesField","handleChangeInput","index","event","values","target","handleChangeCertificateInput","handleAddCertificateFields","useEffect","then","data","Set","previousExperience","certification","indexOf","className","src","ArrowBack","alt","to","ArrowNext","onChange","e","splice","style","input","Fragment","onClick","handleRemoveFields","length","inputCertificatesField","handleChange","handleRemoveCertificateFields","list","textDecoration","storeData","history","push","WaterMark","NormalMultiSelect","newValue","isMulti","body","forEach","array","obj","handleInputChange","handleinputChange","this","isReadOnly","isClearable","isSearchable","isBoldLabel","showArrow","customStyles","base","fontWeight","lineHeight","display","justifyContent","alignItems","height","fontFamily","indicatorSeparator","valueContainer","padding","singleValue","dropdownIndicator","width","option","isFocused","textAlign","control","borderRadius","border","boxShadow","outline","background","minHeight","classNamePrefix","isDisabled","styles","find","components","DropdownIndicator","logo","Component"],"mappings":"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","file":"static/js/19.e3b252c2.chunk.js","sourcesContent":["import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = /*#__PURE__*/React.createElement(CheckBoxIcon, null);\nvar defaultIcon = /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = /*#__PURE__*/React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      iconProp = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  var icon = indeterminate ? indeterminateIconProp : iconProp;\n  var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  return /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: icon.props.fontSize === undefined && size === \"small\" ? size : icon.props.fontSize\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: indeterminateIcon.props.fontSize === undefined && size === \"small\" ? size : indeterminateIcon.props.fontSize\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);","import React from \"react\";\r\nimport { NormalMultiSelect } from \"../NormalMultiSelect\";\r\nimport { getFormattedYears } from \"service/helperFunctions\";\r\n\r\nexport const YearDropDown = ({ label = \"\", name = \"\", ...restProps }) => {\r\n  const options = getFormattedYears().map((year) => ({\r\n    label: year.toString(),\r\n    value: year.toString(),\r\n    name,\r\n  }));\r\n  return (\r\n    <NormalMultiSelect\r\n      placeholder={label}\r\n      arrow={true}\r\n      name={name}\r\n      options={options}\r\n      {...restProps}\r\n    />\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./styles.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ArrowBack from \"../../../assets/files/SVG/Arrow Back.svg\";\r\nimport ArrowNext from \"../../../assets/files/SVG/Arrow Next.svg\";\r\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport WaterMark from \"../../../assets/files/SVG/M Watermark.svg\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport {\r\n    updateTrainerDetailsApicall,\r\n    getTrainerDetails,\r\n    trainerDetail,\r\n} from \"action/trainerAct\";\r\nimport { history } from \"helpers\";\r\nimport \"./dropdown.scss\";\r\nimport { YearDropDown } from \"component/common/YearDropdown\";\r\nimport { CloseIcon } from \"component/common/SideBar/SidebarStyled\";\r\n\r\nconst worksMode = [\r\n    {\r\n        label: \"Yes\",\r\n        value: \"yes\",\r\n    },\r\n    {\r\n        label: \"No\",\r\n        value: \"no\",\r\n    },\r\n];\r\n\r\nconst TrainerBackgroundFC = ({\r\n    updateTrainerDetailsApicall,\r\n    details,\r\n    trainerDetail,\r\n}) => {\r\n    const [checkedBoxing, setCheckedBoxing] = React.useState(false);\r\n    const [checkedHIIT, setCheckedHIIT] = React.useState(false);\r\n    const [checkedYoga, setCheckedYoga] = React.useState(false);\r\n    const [checkedPilates, setCheckedPilates] = React.useState(false);\r\n\r\n    const [currentExperience, setCurrentExperience] = useState({\r\n        workMode: \"\",\r\n        workLocation: \"\",\r\n    });\r\n    const [trainerbackgroundData, setTrainerbackgroundData] = useState({\r\n        areaOfExpertise: [],\r\n        clientAssessment: \"\",\r\n        trainingProcess: \"\",\r\n        interestInMotto: \"\",\r\n        awaitingCertification: \"\",\r\n    });\r\n\r\n    const [inputFields, setInputField] = useState([\r\n        {\r\n            orgnization: \"\",\r\n            job: \"\",\r\n            years: \"\",\r\n        },\r\n    ]);\r\n\r\n    const [inputCertificatesFields, setinputCertificatesField] = useState([\r\n        {\r\n            certificate: \"\",\r\n            year: \"\",\r\n            upload: \"\",\r\n        },\r\n    ]);\r\n    const handleChangeInput = (index, event) => {\r\n        const values = [...inputFields];\r\n        values[index][event.target.name] = event.target.value;\r\n        setInputField(values);\r\n    };\r\n    const handleChangeCertificateInput = (index, event) => {\r\n        const values = [...inputCertificatesFields];\r\n        values[index][event.target.name] = event.target.value;\r\n        setinputCertificatesField(values);\r\n    };\r\n\r\n    const handleAddFields = () => {\r\n        setInputField([\r\n            ...inputFields,\r\n            { orgnization: \"\", job: \"\", years: \"\" },\r\n        ]);\r\n    };\r\n\r\n    const handleAddCertificateFields = () => {\r\n        setinputCertificatesField([\r\n            ...inputCertificatesFields,\r\n            { certificate: \"\", year: \"\", upload: \"\" },\r\n        ]);\r\n    };\r\n\r\n    const handleRemoveFields = (index) => {\r\n        const values = [...inputFields];\r\n        values.splice(index, 1);\r\n        setInputField(values);\r\n    };\r\n    const handleRemoveCertificateFields = (index) => {\r\n        const values = [...inputCertificatesFields];\r\n        values.splice(index, 1);\r\n        setinputCertificatesField(values);\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        const storeData = {\r\n            areaOfExpertise: trainerbackgroundData.areaOfExpertise,\r\n            previousExperience: inputFields,\r\n            certification: inputCertificatesFields,\r\n            clientAssessment: trainerbackgroundData.clientAssessment,\r\n            trainingProcess: trainerbackgroundData.trainingProcess,\r\n            interestInMotto: trainerbackgroundData.interestInMotto,\r\n            awaitingCertification: trainerbackgroundData.awaitingCertification,\r\n        };\r\n        updateTrainerDetailsApicall(storeData).then(() => {\r\n            history.push(`/trainer/availability`);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        trainerDetail().then((data) => {\r\n            if (data) {\r\n                setTrainerbackgroundData({\r\n                    ...trainerbackgroundData,\r\n                    areaOfExpertise: [...new Set(data.areaOfExpertise)],\r\n                    clientAssessment: data.clientAssessment,\r\n                    trainingProcess: data.trainingProcess,\r\n                    interestInMotto: data.interestInMotto,\r\n                    awaitingCertification: data.awaitingCertification\r\n                        ? data.awaitingCertification\r\n                        : \"\",\r\n                });\r\n                if (data.previousExperience) {\r\n                    setInputField(data.previousExperience);\r\n                }\r\n                if (data.certification) {\r\n                    setinputCertificatesField(data.certification);\r\n                }\r\n                if (data.currentExperience) {\r\n                    setCurrentExperience(data.currentExperience);\r\n                }\r\n                if (data.areaOfExpertise) {\r\n                    if (data.areaOfExpertise.indexOf(\"Boxing\") >= 0)\r\n                        setCheckedBoxing(true);\r\n                    if (data.areaOfExpertise.indexOf(\"Pilates\") >= 0)\r\n                        setCheckedPilates(true);\r\n                    if (data.areaOfExpertise.indexOf(\"Yoga\") >= 0)\r\n                        setCheckedYoga(true);\r\n                    if (data.areaOfExpertise.indexOf(\"Strength & HIIT\") >= 0)\r\n                        setCheckedHIIT(true);\r\n                }\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"outter_container_bg\">\r\n                <div className=\"container\">\r\n                    <div className=\"links_wrapper\">\r\n                        <div className=\"outter_links\">\r\n                            <img src={ArrowBack} alt=\"icon\" />\r\n                            <div className=\"inner_links\">\r\n                                <Link to=\"/trainer/about\">\r\n                                    {\" \"}\r\n                                    Back to About You\r\n                                </Link>\r\n                                <div></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"outter_links\">\r\n                            <div className=\"inner_links\">\r\n                                <Link to=\"/trainer/availability\">\r\n                                    Go to Availability\r\n                                </Link>\r\n                                <div></div>\r\n                            </div>\r\n                            <img src={ArrowNext} alt=\"icon\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"main_wrapper\">\r\n                        <div className=\"wrapper_inneritems\">\r\n                            <h1>Detail out your training background</h1>\r\n                            <div className=\"contents_wrapper\">\r\n                                <div>\r\n                                    <div className=\"item1\">\r\n                                        <h6>\r\n                                            Tell us what you train! Select all\r\n                                            the verticals that apply\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <Checkbox\r\n                                                checked={checkedHIIT}\r\n                                                onChange={(e) => {\r\n                                                    setCheckedHIIT(\r\n                                                        e.target.checked\r\n                                                    );\r\n\r\n                                                    if (e.target.checked) {\r\n                                                        setTrainerbackgroundData(\r\n                                                            {\r\n                                                                ...trainerbackgroundData,\r\n                                                                areaOfExpertise:\r\n                                                                    [\r\n                                                                        ...trainerbackgroundData.areaOfExpertise,\r\n                                                                        \"Strength & HIIT\",\r\n                                                                    ],\r\n                                                            }\r\n                                                        );\r\n                                                    } else {\r\n                                                        const index =\r\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                                                \"Strength & HIIT\"\r\n                                                            );\r\n                                                        if (index > -1) {\r\n                                                            trainerbackgroundData.areaOfExpertise.splice(\r\n                                                                index,\r\n                                                                1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                style={{\r\n                                                    color: \"#53BFD2\",\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"checkbox_label\">\r\n                                                Strength & HIIT\r\n                                            </div>\r\n                                            <Checkbox\r\n                                                checked={checkedBoxing}\r\n                                                // checked={true}\r\n                                                onChange={(e) => {\r\n                                                    setCheckedBoxing(\r\n                                                        e.target.checked\r\n                                                    );\r\n                                                    if (e.target.checked) {\r\n                                                        setTrainerbackgroundData(\r\n                                                            {\r\n                                                                ...trainerbackgroundData,\r\n                                                                areaOfExpertise:\r\n                                                                    [\r\n                                                                        ...trainerbackgroundData.areaOfExpertise,\r\n                                                                        \"Boxing\",\r\n                                                                    ],\r\n                                                            }\r\n                                                        );\r\n                                                    } else {\r\n                                                        const index =\r\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                                                \"Boxing\"\r\n                                                            );\r\n                                                        if (index > -1) {\r\n                                                            trainerbackgroundData.areaOfExpertise.splice(\r\n                                                                index,\r\n                                                                1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                style={{\r\n                                                    color: \"#53BFD2\",\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"checkbox_label\">\r\n                                                Boxing\r\n                                            </div>\r\n                                            <Checkbox\r\n                                                checked={checkedYoga}\r\n                                                onChange={(e) => {\r\n                                                    setCheckedYoga(\r\n                                                        e.target.checked\r\n                                                    );\r\n\r\n                                                    if (e.target.checked) {\r\n                                                        setTrainerbackgroundData(\r\n                                                            {\r\n                                                                ...trainerbackgroundData,\r\n                                                                areaOfExpertise:\r\n                                                                    [\r\n                                                                        ...trainerbackgroundData.areaOfExpertise,\r\n                                                                        \"Yoga\",\r\n                                                                    ],\r\n                                                            }\r\n                                                        );\r\n                                                    } else {\r\n                                                        const index =\r\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                                                \"Yoga\"\r\n                                                            );\r\n                                                        if (index > -1) {\r\n                                                            trainerbackgroundData.areaOfExpertise.splice(\r\n                                                                index,\r\n                                                                1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                style={{\r\n                                                    color: \"#53BFD2\",\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"checkbox_label\">\r\n                                                Yoga\r\n                                            </div>\r\n                                            <Checkbox\r\n                                                checked={checkedPilates}\r\n                                                onChange={(e) => {\r\n                                                    setCheckedPilates(\r\n                                                        e.target.checked\r\n                                                    );\r\n\r\n                                                    if (e.target.checked) {\r\n                                                        setTrainerbackgroundData(\r\n                                                            {\r\n                                                                ...trainerbackgroundData,\r\n                                                                areaOfExpertise:\r\n                                                                    [\r\n                                                                        ...trainerbackgroundData.areaOfExpertise,\r\n                                                                        \"Pilates\",\r\n                                                                    ],\r\n                                                            }\r\n                                                        );\r\n                                                    } else {\r\n                                                        const index =\r\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                                                \"Pilates\"\r\n                                                            );\r\n                                                        if (index > -1) {\r\n                                                            trainerbackgroundData.areaOfExpertise.splice(\r\n                                                                index,\r\n                                                                1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                style={{\r\n                                                    color: \"#53BFD2\",\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"checkbox_label\">\r\n                                                Pilates\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"item2\">\r\n                                        <h6>Training experience</h6>\r\n                                        {inputFields.map((input, index) => {\r\n                                            return (\r\n                                                <React.Fragment key={index}>\r\n                                                    <div className=\"inputs_experience row no-gutters\">\r\n                                                        <div className=\"col-4 pr-1\">\r\n                                                            <input\r\n                                                                type=\"text\"\r\n                                                                placeholder=\"Name of the organization / GYM\"\r\n                                                                value={\r\n                                                                    input.orgnization\r\n                                                                }\r\n                                                                className=\"w-100\"\r\n                                                                name=\"orgnization\"\r\n                                                                onChange={(\r\n                                                                    event\r\n                                                                ) =>\r\n                                                                    handleChangeInput(\r\n                                                                        index,\r\n                                                                        event\r\n                                                                    )\r\n                                                                }\r\n                                                            />\r\n                                                        </div>\r\n                                                        <div className=\"col-3 pr-1\">\r\n                                                            <input\r\n                                                                type=\"text\"\r\n                                                                placeholder=\"Job Title\"\r\n                                                                value={\r\n                                                                    input.job\r\n                                                                }\r\n                                                                className=\"w-100\"\r\n                                                                name=\"job\"\r\n                                                                onChange={(\r\n                                                                    event\r\n                                                                ) =>\r\n                                                                    handleChangeInput(\r\n                                                                        index,\r\n                                                                        event\r\n                                                                    )\r\n                                                                }\r\n                                                            />\r\n                                                        </div>\r\n                                                        <div className=\"col-3\">\r\n                                                            <input\r\n                                                                type=\"number\"\r\n                                                                placeholder=\"Years\"\r\n                                                                className=\"w-100\"\r\n                                                                name=\"years\"\r\n                                                                value={\r\n                                                                    input.years\r\n                                                                }\r\n                                                                onChange={(\r\n                                                                    event\r\n                                                                ) =>\r\n                                                                    handleChangeInput(\r\n                                                                        index,\r\n                                                                        event\r\n                                                                    )\r\n                                                                }\r\n                                                            />\r\n                                                        </div>\r\n\r\n                                                        <div className=\"col-1\">\r\n                                                            {index !== 0 ? (\r\n                                                                <h5\r\n                                                                    className=\"text-danger pl-3\"\r\n                                                                    onClick={() =>\r\n                                                                        handleRemoveFields(\r\n                                                                            index\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    <CloseIcon />\r\n                                                                </h5>\r\n                                                            ) : null}\r\n                                                        </div>\r\n\r\n                                                        <span></span>\r\n                                                    </div>\r\n                                                    {index + 1 ===\r\n                                                    inputFields.length ? (\r\n                                                        <div className=\"d-flex\">\r\n                                                            <h5\r\n                                                                onClick={() =>\r\n                                                                    handleAddFields()\r\n                                                                }\r\n                                                            >\r\n                                                                + Add Work\r\n                                                                Experience\r\n                                                            </h5>\r\n                                                        </div>\r\n                                                    ) : null}\r\n                                                </React.Fragment>\r\n                                            );\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"item3\">\r\n                                        <h6>Certifications</h6>\r\n                                        {inputCertificatesFields.map(\r\n                                            (inputCertificatesField, index) => (\r\n                                                <React.Fragment key={index}>\r\n                                                    <div\r\n                                                        className=\"inputs_background row no-gutters\"\r\n                                                        key={index}\r\n                                                    >\r\n                                                        <div className=\"col-6 px-2\">\r\n                                                            <input\r\n                                                                type=\"text\"\r\n                                                                placeholder=\"Certification Title\"\r\n                                                                value={\r\n                                                                    inputCertificatesField.certificate\r\n                                                                }\r\n                                                                name=\"certificate\"\r\n                                                                onChange={(\r\n                                                                    event\r\n                                                                ) =>\r\n                                                                    handleChangeCertificateInput(\r\n                                                                        index,\r\n                                                                        event\r\n                                                                    )\r\n                                                                }\r\n                                                            />\r\n                                                        </div>\r\n                                                        <div className=\"col-5 px-2\">\r\n                                                            <YearDropDown\r\n                                                                label=\"Year you were Certified\"\r\n                                                                value={\r\n                                                                    inputCertificatesField.year\r\n                                                                }\r\n                                                                name=\"year\"\r\n                                                                handleChange={(\r\n                                                                    event\r\n                                                                ) =>\r\n                                                                    handleChangeCertificateInput(\r\n                                                                        index,\r\n                                                                        event\r\n                                                                    )\r\n                                                                }\r\n                                                            />\r\n                                                        </div>\r\n                                                        <div className=\"col-1\">\r\n                                                            {index !== 0 ? (\r\n                                                                <h5\r\n                                                                    className=\"text-danger pl-3\"\r\n                                                                    onClick={() =>\r\n                                                                        handleRemoveCertificateFields(\r\n                                                                            index\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    <CloseIcon />\r\n                                                                </h5>\r\n                                                            ) : null}\r\n                                                        </div>\r\n\r\n                                                        {/* <input\r\n                              type=\"text\"\r\n                              placeholder=\"\"\r\n                              value={inputCertificatesField.year}\r\n                              name=\"year\"\r\n                              onChange={(event) =>\r\n                                handleChangeCertificateInput(index, event)\r\n                              }\r\n                              type=\"number\"\r\n                            /> */}\r\n                                                    </div>\r\n                                                    {index + 1 ===\r\n                                                    inputCertificatesFields.length ? (\r\n                                                        <div className=\"d-flex\">\r\n                                                            <h5\r\n                                                                onClick={\r\n                                                                    handleAddCertificateFields\r\n                                                                }\r\n                                                            >\r\n                                                                + Add\r\n                                                                Certificate's\r\n                                                            </h5>\r\n                                                            {/* {index + 1 === inputCertificatesFields.length &&\r\n                              inputCertificatesFields.length !== 1 ? (\r\n                                <h5\r\n                                  className=\"text-danger pl-3\"\r\n                                  onClick={() =>\r\n                                    handleRemoveCertificateFields(index)\r\n                                  }\r\n                                >\r\n                                  Remove\r\n                                </h5>\r\n                              ) : null} */}\r\n                                                        </div>\r\n                                                    ) : null}\r\n                                                </React.Fragment>\r\n                                            )\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"item4\">\r\n                                        <h6>\r\n                                            Are you currently enrolled in any\r\n                                            continued education programs?\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <textarea\r\n                                                type=\"text\"\r\n                                                name=\"comment\"\r\n                                                placeholder=\"Tell us about any awaiting certifications \"\r\n                                                value={\r\n                                                    trainerbackgroundData.awaitingCertification\r\n                                                }\r\n                                                onChange={(e) =>\r\n                                                    setTrainerbackgroundData({\r\n                                                        ...trainerbackgroundData,\r\n                                                        awaitingCertification:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"item5\">\r\n                                        <h6>\r\n                                            Do you have a facility to train new\r\n                                            & outside clients?\r\n                                        </h6>\r\n                                        <div className=\"row d-flex\">\r\n                                            <div className=\"col-6\">\r\n                                                <select\r\n                                                    value={\r\n                                                        currentExperience.workMode\r\n                                                    }\r\n                                                    name=\"workMode\"\r\n                                                    onChange={(e) => {\r\n                                                        setCurrentExperience({\r\n                                                            ...currentExperience,\r\n                                                            workMode:\r\n                                                                e.target.value,\r\n                                                        });\r\n                                                    }}\r\n                                                >\r\n                                                    {worksMode.map(\r\n                                                        (list, index) => (\r\n                                                            <option\r\n                                                                value={\r\n                                                                    list.value\r\n                                                                }\r\n                                                                key={index}\r\n                                                            >\r\n                                                                {list.label}\r\n                                                            </option>\r\n                                                        )\r\n                                                    )}\r\n                                                </select>\r\n                                                {/* <NormalMultiSelect\r\n                            placeholder=\"Select Your Answer\"\r\n                            value={currentExperience.workMode}\r\n                            arrow={true}\r\n                            name=\"workMode\"\r\n                            options={worksMode}\r\n                            handleChange={(e) => {\r\n                              setCurrentExperience({\r\n                                ...currentExperience,\r\n                                workMode: e.target.value,\r\n                              });\r\n                            }}\r\n                          /> */}\r\n                                            </div>\r\n                                            {currentExperience.workMode ===\r\n                                            \"yes\" ? (\r\n                                                <div className=\"col-6\">\r\n                                                    <div className=\"inputs_experience_drop\">\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Details of facility\"\r\n                                                            value={\r\n                                                                currentExperience.workLocation\r\n                                                            }\r\n                                                            name=\"answer\"\r\n                                                            onChange={(e) => {\r\n                                                                setCurrentExperience(\r\n                                                                    {\r\n                                                                        ...currentExperience,\r\n                                                                        workLocation:\r\n                                                                            e\r\n                                                                                .target\r\n                                                                                .value,\r\n                                                                    }\r\n                                                                );\r\n                                                            }}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            ) : null}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"item6\">\r\n                                        <h6>\r\n                                            Why are you interested in joining\r\n                                            Motto?\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <textarea\r\n                                                type=\"text\"\r\n                                                name=\"comment\"\r\n                                                placeholder=\"Tell us all about it.\"\r\n                                                value={\r\n                                                    trainerbackgroundData.interestInMotto\r\n                                                }\r\n                                                onChange={(e) =>\r\n                                                    setTrainerbackgroundData({\r\n                                                        ...trainerbackgroundData,\r\n                                                        interestInMotto:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"item6\">\r\n                                        <h6>\r\n                                            Describe how you assess a client\r\n                                            before their first session?\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <textarea\r\n                                                type=\"text\"\r\n                                                name=\"comment\"\r\n                                                placeholder=\"Tell us all about it.\"\r\n                                                value={\r\n                                                    trainerbackgroundData.clientAssessment\r\n                                                }\r\n                                                onChange={(e) =>\r\n                                                    setTrainerbackgroundData({\r\n                                                        ...trainerbackgroundData,\r\n                                                        clientAssessment:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"item6\">\r\n                                        <h6>\r\n                                            Describe your training process &\r\n                                            philosophy\r\n                                        </h6>\r\n                                        <div className=\"inputs_experience\">\r\n                                            <textarea\r\n                                                type=\"text\"\r\n                                                name=\"comment\"\r\n                                                placeholder=\"Tell us all about it.\"\r\n                                                value={\r\n                                                    trainerbackgroundData.trainingProcess\r\n                                                }\r\n                                                onChange={(e) =>\r\n                                                    setTrainerbackgroundData({\r\n                                                        ...trainerbackgroundData,\r\n                                                        trainingProcess:\r\n                                                            e.target.value,\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"submit_button\">\r\n                                        <button\r\n                                            type=\"submit\"\r\n                                            style={{\r\n                                                textDecoration: \"none\",\r\n                                                color: \"#FFFFFF\",\r\n                                            }}\r\n                                            type=\"submit\"\r\n                                            onClick={handleSubmit}\r\n                                        >\r\n                                            Continue\r\n                                            <ArrowHoverBlacked />\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <img src={WaterMark} alt=\"icon\" className=\"bg_watermark\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    details: state.trainerReducer.details,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators(\r\n        {\r\n            updateTrainerDetailsApicall,\r\n            getTrainerDetails,\r\n            trainerDetail,\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst TrainerBackground = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TrainerBackgroundFC);\r\n\r\nexport default TrainerBackground;\r\n","export default __webpack_public_path__ + \"static/media/Arrow Back.d3693c0f.svg\";","export default __webpack_public_path__ + \"static/media/Drop Down 4.50302f8e.svg\";","import React, { Component } from \"react\";\r\nimport Select, { components } from \"react-select\";\r\nimport \"./select.scss\";\r\nimport logo from \"../../../assets/files/SVG/Drop Down 4.svg\";\r\nexport class NormalMultiSelect extends Component {\r\n    //change select\r\n    handleChange = (newValue) => {\r\n        let { isMulti } = this.props;\r\n        if (!!isMulti) {\r\n            let body = {\r\n                target: {\r\n                    name: this.props.name,\r\n                    value: [],\r\n                },\r\n            };\r\n            if (!!newValue && newValue.length) {\r\n                newValue.forEach((array) => {\r\n                    let obj = {\r\n                        value: array.value,\r\n                        label: array.label,\r\n                    };\r\n                    body.target.value.push(obj);\r\n                });\r\n            }\r\n            this.props.handleChange(body);\r\n        } else {\r\n            let body = {\r\n                target: {\r\n                    name: this.props.name,\r\n                    value: newValue ? newValue.value : \"\",\r\n                    label: newValue ? newValue.label : \"\",\r\n                },\r\n            };\r\n\r\n            this.props.handleChange(body);\r\n        }\r\n    };\r\n\r\n    //handle Input Change\r\n    handleInputChange = (newValue) => {\r\n        let body = {\r\n            target: {\r\n                name: this.props.name,\r\n                value: newValue ? newValue : \"\",\r\n            },\r\n        };\r\n        this.props.handleinputChange && this.props.handleinputChange(body);\r\n    };\r\n\r\n    render() {\r\n        let {\r\n            className = \"select-form-control w-100\",\r\n            options = [],\r\n            value = \"\",\r\n            name = \"\",\r\n            placeholder = \"Select\",\r\n            disabled = false,\r\n            arrow = false,\r\n            isReadOnly = false,\r\n            label = \"\",\r\n            isMulti = false,\r\n            isClearable = false,\r\n            isSearchable = false,\r\n            isBoldLabel = false,\r\n            showArrow = true,\r\n        } = this.props;\r\n\r\n        const DropdownIndicator = (props) => {\r\n            return (\r\n                components.DropdownIndicator && (\r\n                    <components.DropdownIndicator {...props}>\r\n                        <img src={logo} alt=\"dropdown\" className=\"dd_icon\" />\r\n                    </components.DropdownIndicator>\r\n                )\r\n            );\r\n        };\r\n        const customStyles = {\r\n            placeholder: (base) => ({\r\n                ...base,\r\n                fontSize: 18,\r\n                color: \"#000\",\r\n                fontWeight: 500,\r\n                lineHeight: 38,\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: \"100%\",\r\n                fontFamily: \"Montserrat\",\r\n            }),\r\n            indicatorSeparator: (base) => ({\r\n                ...base,\r\n                display: \"none\",\r\n            }),\r\n            valueContainer: (base) => ({\r\n                ...base,\r\n                padding: \"0px 20px\",\r\n                fontSize: 18,\r\n                color: \"#000\",\r\n                fontWeight: 500,\r\n                lineHeight: 38,\r\n                height: \"100%\",\r\n                fontFamily: \"Montserrat\",\r\n            }),\r\n            singleValue: (base) => ({\r\n                ...base,\r\n                color: \"#000\",\r\n                fontWeight: 500,\r\n            }),\r\n            dropdownIndicator: (base) => ({\r\n                ...base,\r\n                padding: 0,\r\n                height: \"26px\",\r\n                width: \"26px\",\r\n                color: \"black\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: \"100%\",\r\n                fontFamily: \"Montserrat\",\r\n            }),\r\n            option: (base, { isFocused }) => ({\r\n                ...base,\r\n                backgroundColor: isFocused ? \"#53BFD2\" : \"#fff\",\r\n                color: isFocused ? \"#fff\" : \"#000\",\r\n                fontSize: 18,\r\n                textAlign: \"left\",\r\n                fontFamily: \"Montserrat\",\r\n            }),\r\n            control: (base) => ({\r\n                ...base,\r\n                borderRadius: 50,\r\n                border: \"2px solid #bcbcbc\",\r\n                boxShadow: \"0 0 !important\",\r\n                outline: \"0 \",\r\n                background: \"white\",\r\n                height: 45,\r\n                minHeight: 45,\r\n                fontFamily: \"Montserrat\",\r\n            }),\r\n        };\r\n        return (\r\n            <>\r\n                {!isReadOnly ? (\r\n                    <div\r\n                        className={`${\r\n                            arrow ? \"select-section w-100\" : \"Select\"\r\n                        } ${isBoldLabel ? \"mt-0\" : \"\"}`}\r\n                    >\r\n                        {label !== \"\" ? (\r\n                            <div>\r\n                                <label\r\n                                    className={\r\n                                        isBoldLabel\r\n                                            ? \"mb-1 text-black-22\"\r\n                                            : \"font-weight-normal mb-1\"\r\n                                    }\r\n                                >\r\n                                    {label}\r\n                                </label>\r\n                            </div>\r\n                        ) : null}\r\n                        <Select\r\n                            className={className}\r\n                            classNamePrefix=\"Select\"\r\n                            isDisabled={disabled}\r\n                            isClearable={isClearable}\r\n                            isSearchable={isSearchable}\r\n                            name={name}\r\n                            options={options}\r\n                            onChange={this.handleChange}\r\n                            isMulti={isMulti}\r\n                            showArrow={showArrow}\r\n                            placeholder={placeholder}\r\n                            styles={customStyles}\r\n                            value={\r\n                                !!options && options.length > 0\r\n                                    ? options.find(\r\n                                          (data) => data.value === value\r\n                                      )\r\n                                        ? options.find(\r\n                                              (data) => data.value === value\r\n                                          )\r\n                                        : null\r\n                                    : null\r\n                            }\r\n                            components={{ DropdownIndicator }}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <p>{value}</p>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}