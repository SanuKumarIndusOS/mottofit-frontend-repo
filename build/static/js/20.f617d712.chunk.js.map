{"version":3,"sources":["component/TrainerDashBoard/DashboardCompontents/TrainerMessages/index.js","action/messagingAct.js","component/common/Message/ChatItem.js","helpers/Messaging.js","component/common/Message/ChatBox.js","assets/files/TrainerDashboard/Message/Jenny.png","assets/files/TrainerDashboard/Message/Availability Icon.svg","assets/files/TrainerDashboard/Message/Location Icon.svg","assets/files/TrainerDashboard/Message/Image 1.png","assets/files/TrainerDashboard/Message/Shedule Icon.svg"],"names":["TrainerMessage","require","connect","state","clientData","messagingReducer","activeChannel","activeChannelMessages","typingMembers","chatClientInstance","dispatch","bindActionCreators","trainerChannel","initClientDispatch","updateMessagingDetails","useState","individual_list","setIndividual","socialGroup_list","setSocialGroup_list","admin_list","setAdmin_list","PopulateContacts","channelID","members","channelData","console","log","joinChannelByID","then","currentChannelMembers","handleTabChange","unSubscribeChannel","useEffect","data","individualClient","socialGroups","admins","removeChatClient","isUser","parseInt","localStorage","getItem","className","defaultTab","tabFor","onClick","tabId","map","item","index","message","from","body","date_updated","lastUserProfilePic","filter","userId","getFormatDate","Date","now","isDataPresent","length","updatePersonTyping","payload","getState","type","identity","participant","tempMembers","currentChatItemOwner","userIdenity","currentPerson","userName","includes","MessagingActionType","UPDATE_MESSAGING_DETAILS","person","resetChannelDetails","RESET_CHANNEL_DETAILS","UPDATE_CLIENT_INSTANCE","ChatClientInstance","ChatItem","CurrentMessageComponent","currMsg","date","msgTime","moment","timestamp","format","isMyMsg","author","Chat","TwilioMessaging","handler","initClient","a","getToken","token","Client","create","client","INITIALIZE_CLIENT","initClientListeners","removeAllListeners","on","onParticipantStartTyping","onParticipantEndedTyping","updateToken","uniqueChannelId","Promise","resolve","reject","alert","isLoading","getChannelByUniqueName","channel","joinChannel","onChanelJoined","onMessagedAdded","member","onMemberJoined","onMemberLeft","UPDATE_CHANNEL_DETAILS","channelState","status","join","getMessages","messages","tempMessage","items","sid","UPDATE_MESSAGE_DETAILS","getIdentityToken","twilioApi","id","api","chatToken","catch","err","Toast","this","ChatBoxClass","props","scrollToMessageListBottom","messagesEndRef","current","scrollTo","scrollHeight","handleChange","value","target","setState","typing","handleSendMessage","e","preventDefault","sendMessage","String","formatMessage","lastMsgDate","formattedMessage","reduce","prevMsgArray","tempPrevMsgArray","currYear","msgYear","tempMsgDate","msgDate","React","createRef","prevProps","setTimeout","tempMsg","chatTitle","src","SheduleIcon","alt","startTime","AvailabilityIcon","LocationIcon","venue","toString","ref","onSubmit","placeholder","onChange","Component","ChatBox"],"mappings":"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","file":"static/js/20.f617d712.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Tabs, Tab, TabPanel, TabList } from \"react-web-tabs\";\r\nimport \"react-web-tabs/dist/react-web-tabs.css\";\r\nimport \"./style.scss\";\r\nimport Jenny from \"../../../../assets/files/TrainerDashboard/Message/Jenny.png\";\r\nimport Jonn from \"../../../../assets/files/TrainerDashboard/Message/Image 1.png\";\r\nimport SheduleIcon from \"../../../../assets/files/TrainerDashboard/Message/Shedule Icon.svg\";\r\nimport AvailabilityIcon from \"../../../../assets/files/TrainerDashboard/Message/Availability Icon.svg\";\r\nimport LocationIcon from \"../../../../assets/files/TrainerDashboard/Message/Location Icon.svg\";\r\nimport BlueHoverButton from \"../../../common/BlueArrowButton/index\";\r\nimport { trainerChannel } from \"action/trainerAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { twilioApi } from \"../../../../service/apiVariables\";\r\nimport { api } from \"../../../../service/api\";\r\nimport { Toast } from \"../../../../service/toast\";\r\nimport ChatBox from \"component/common/Message/ChatBox\";\r\nimport {\r\n  initClientDispatch,\r\n  updateMessagingDetails,\r\n} from \"action/messagingAct\";\r\nimport { getFormatDate } from \"service/helperFunctions\";\r\nimport { UserAvatar } from \"component/common/UserAvatar\";\r\nconst Chatt = require(\"twilio-chat\");\r\n\r\nconst TrainerMessageClass = ({\r\n  trainerChannel,\r\n  initClientDispatch,\r\n  clientData,\r\n  activeChannel,\r\n  activeChannelMessages,\r\n  typingMembers,\r\n  chatClientInstance,\r\n  updateMessagingDetails,\r\n}) => {\r\n  const [individual_list, setIndividual] = useState([]);\r\n  const [socialGroup_list, setSocialGroup_list] = useState([]);\r\n  const [admin_list, setAdmin_list] = useState([]);\r\n  const [Channel, setChannel] = useState([]);\r\n  const [Client, setClient] = useState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [text_thread, setText_thread] = useState([]);\r\n  const [chattoken, setToken] = useState(\"\");\r\n  const [channel_id, setChannel_id] = useState(\"\");\r\n\r\n  // Make Id dynamic\r\n  useEffect(() => {\r\n    // Get Contact_list\r\n\r\n    initClientDispatch();\r\n\r\n    trainerChannel().then((data) => {\r\n      setIndividual(data.individualClient);\r\n      setSocialGroup_list(data.socialGroups);\r\n      setAdmin_list(data.admins);\r\n    });\r\n\r\n    return () => {\r\n      chatClientInstance && chatClientInstance.removeChatClient();\r\n    };\r\n  }, []);\r\n\r\n  function PopulateContacts(channelID, members, channelData) {\r\n    console.log(channelID, chatClientInstance);\r\n\r\n    // \"CH15f50302975a435799691ca5f8d71092\";\r\n    chatClientInstance.joinChannelByID(channelID).then(() => {\r\n      console.log(\"Channel Loaded\");\r\n\r\n      let reduxData = {\r\n        currentChannelMembers: members,\r\n        channelData,\r\n      };\r\n\r\n      updateMessagingDetails(reduxData);\r\n    });\r\n  }\r\n\r\n  function handleTabChange() {\r\n    chatClientInstance && chatClientInstance.unSubscribeChannel();\r\n  }\r\n\r\n  const isUser = parseInt(localStorage.getItem(\"type\")) === 3;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main_message_container\">\r\n        <div className=\"message_outter_container\">\r\n          <h2>Messages</h2>\r\n          <div className=\"message_inner\">\r\n            <div className=\"message_wrapper\">\r\n              <Tabs defaultTab=\"one\">\r\n                <TabList>\r\n                  <Tab tabFor=\"one\" onClick={handleTabChange}>\r\n                    All\r\n                  </Tab>\r\n                  {!isUser && (\r\n                    <Tab tabFor=\"two\" onClick={handleTabChange}>\r\n                      INDIVIDUAL CLIENTS\r\n                    </Tab>\r\n                  )}\r\n                  <Tab tabFor=\"three\" onClick={handleTabChange}>\r\n                    SOCIAL GROUPS\r\n                  </Tab>\r\n                  <Tab tabFor=\"four\" onClick={handleTabChange}>\r\n                    ADMIN\r\n                  </Tab>\r\n                </TabList>\r\n                <div className=\"message_inner\">\r\n                  <TabPanel tabId=\"one\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {[\r\n                          ...individual_list,\r\n                          ...socialGroup_list,\r\n                          ...admin_list,\r\n                        ].map((item, index) => {\r\n                          const { from, body, date_updated } = item.message;\r\n\r\n                          let lastUserProfilePic =\r\n                            item[\"members\"]?.filter(\r\n                              ({ userId }) => userId === from\r\n                            )[0] ||\r\n                            item[\"members\"][0] ||\r\n                            {};\r\n\r\n                          return (\r\n                            <div\r\n                              className=\"contact_item\"\r\n                              key={`${Date.now()}_all_${index}`}\r\n                            >\r\n                              <div className=\"inner_link\">\r\n                                {/* <img\r\n                                  src={\r\n                                    lastUserProfilePic?.profilePicture || Jenny\r\n                                  }\r\n                                  alt={`${lastUserProfilePic?.userName} profile`}\r\n                                  onError={(e) => {\r\n                                    e.target.onerror = null;\r\n                                    e.target.src = Jenny;\r\n                                  }}\r\n                                /> */}\r\n                                {/* {JSON.stringify(lastUserProfilePic)} */}\r\n\r\n                                <UserAvatar {...lastUserProfilePic} />\r\n\r\n                                <div\r\n                                  className=\"message_link_notify\"\r\n                                  onClick={() =>\r\n                                    PopulateContacts(\r\n                                      item[\"channelUniqueName\"],\r\n                                      item[\"members\"],\r\n                                      item\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <h3>{item[\"chatTitle\"] || \"\"}</h3>\r\n                                  <div>\r\n                                    {body && <p>{body}</p>}\r\n                                    {date_updated && (\r\n                                      <span className=\"msg-timestamp-left\">\r\n                                        {getFormatDate(date_updated, \"LT\")}\r\n                                      </span>\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <ChatBox\r\n                          isDataPresent={\r\n                            [\r\n                              ...individual_list,\r\n                              ...socialGroup_list,\r\n                              ...admin_list,\r\n                            ].length > 0\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n\r\n                  <TabPanel tabId=\"two\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {individual_list.map((item, index) => {\r\n                          const { from, body, date_updated } = item.message;\r\n\r\n                          let lastUserProfilePic =\r\n                            item[\"members\"]?.filter(\r\n                              ({ userId }) => userId === from\r\n                            )[0] ||\r\n                            item[\"members\"][0] ||\r\n                            {};\r\n                          return (\r\n                            <div\r\n                              className=\"contact_item\"\r\n                              key={`${Date.now()}_${index}`}\r\n                            >\r\n                              <div className=\"inner_link\">\r\n                                {/* <img\r\n                                  src={\r\n                                    lastUserProfilePic?.profilePicture || Jenny\r\n                                  }\r\n                                  alt={`${lastUserProfilePic?.userName} profile`}\r\n                                  onError={(e) => {\r\n                                    e.target.onerror = null;\r\n                                    e.target.src = Jenny;\r\n                                  }}\r\n                                /> */}\r\n                                <UserAvatar {...lastUserProfilePic} />\r\n                                <div\r\n                                  className=\"message_link_notify\"\r\n                                  onClick={() =>\r\n                                    PopulateContacts(\r\n                                      item[\"channelUniqueName\"],\r\n                                      item[\"members\"],\r\n                                      item\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <h3>{item[\"chatTitle\"] || \"\"}</h3>\r\n                                  <div>\r\n                                    {body && <p>{body}</p>}\r\n                                    {date_updated && (\r\n                                      <span className=\"msg-timestamp-left\">\r\n                                        {getFormatDate(date_updated, \"LT\")}\r\n                                      </span>\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <ChatBox isDataPresent={individual_list.length > 0} />\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n                  <TabPanel tabId=\"three\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {socialGroup_list.map((item, index) => {\r\n                          const { from, body, date_updated } = item.message;\r\n\r\n                          let lastUserProfilePic =\r\n                            item[\"members\"]?.filter(\r\n                              ({ userId }) => userId === from\r\n                            )[0] ||\r\n                            item[\"members\"][0] ||\r\n                            {};\r\n                          return (\r\n                            <div\r\n                              className=\"contact_item\"\r\n                              key={`${index}_${Date.now()}`}\r\n                            >\r\n                              <div className=\"inner_link\">\r\n                                {/* <img\r\n                                  src={\r\n                                    lastUserProfilePic?.profilePicture || Jenny\r\n                                  }\r\n                                  alt={`${lastUserProfilePic?.userName} profile`}\r\n                                  onError={(e) => {\r\n                                    e.target.onerror = null;\r\n                                    e.target.src = Jenny;\r\n                                  }}\r\n                                /> */}\r\n                                <UserAvatar {...lastUserProfilePic} />\r\n                                <div\r\n                                  className=\"message_link_notify\"\r\n                                  onClick={() =>\r\n                                    PopulateContacts(\r\n                                      item[\"channelUniqueName\"],\r\n                                      item[\"members\"],\r\n                                      item\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <h3>{item[\"chatTitle\"] || \"\"}</h3>\r\n                                  <div>\r\n                                    {body && <p>{body}</p>}\r\n                                    {date_updated && (\r\n                                      <span className=\"msg-timestamp-left\">\r\n                                        {getFormatDate(date_updated, \"LT\")}\r\n                                      </span>\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <ChatBox isDataPresent={socialGroup_list.length > 0} />\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n                  <TabPanel tabId=\"four\">\r\n                    <div className=\"message_inner_one\">\r\n                      <div className=\"message_left\">\r\n                        {/* Todo Change to ALL */}\r\n                        {admin_list.map((item) => {\r\n                          const { from, body, date_updated } = item.message;\r\n\r\n                          let lastUserProfilePic =\r\n                            item[\"members\"]?.filter(\r\n                              ({ userId }) => userId === from\r\n                            )[0] ||\r\n                            item[\"members\"][0] ||\r\n                            {};\r\n                          return (\r\n                            <div className=\"contact_item\">\r\n                              <div className=\"inner_link\">\r\n                                {/* <img\r\n                                  src={\r\n                                    lastUserProfilePic?.profilePicture || Jenny\r\n                                  }\r\n                                  alt={`${lastUserProfilePic?.userName} profile`}\r\n                                  onError={(e) => {\r\n                                    e.target.onerror = null;\r\n                                    e.target.src = Jenny;\r\n                                  }}\r\n                                /> */}\r\n                                <UserAvatar {...lastUserProfilePic} />\r\n                                <div\r\n                                  className=\"message_link_notify\"\r\n                                  onClick={() =>\r\n                                    PopulateContacts(\r\n                                      item[\"channelUniqueName\"],\r\n                                      item[\"members\"],\r\n                                      item\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <h3>{item[\"chatTitle\"] || \"\"}</h3>\r\n                                  <div>\r\n                                    {body && <p>{body}</p>}\r\n                                    {date_updated && (\r\n                                      <span className=\"msg-timestamp-left\">\r\n                                        {getFormatDate(date_updated, \"LT\")}\r\n                                      </span>\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                      <div className=\"message_right\">\r\n                        <ChatBox isDataPresent={admin_list.length > 0} />\r\n                      </div>\r\n                    </div>\r\n                  </TabPanel>\r\n                </div>\r\n              </Tabs>\r\n              <div className=\"\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nconst RightChat = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"message_chat_right\">\r\n        <div className=\"message_text\">\r\n          <h5>{props.data}</h5>\r\n        </div>\r\n\r\n        <img src={Jonn} alt=\"icon\" />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n// const LeftChat = (props) => {\r\n//     return (\r\n//         <>\r\n//             <div className=\"message_chat_right\">\r\n//                 <div className=\"message_text\">\r\n//                     <h5>{props.data}</h5>\r\n//                 </div>\r\n\r\n//                 <img src={Jonn} alt=\"icon\" />\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\nconst mapStateToProps = (state) => ({\r\n  clientData: state.messagingReducer.clientData,\r\n  activeChannel: state.messagingReducer.activeChannel,\r\n  activeChannelMessages: state.messagingReducer.activeChannelMessages,\r\n  typingMembers: state.messagingReducer.typingMembers,\r\n  chatClientInstance: state.messagingReducer.chatClientInstance,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      trainerChannel,\r\n      initClientDispatch,\r\n      updateMessagingDetails,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst TrainerMessage = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TrainerMessageClass);\r\n\r\nexport default TrainerMessage;\r\n","import { MessagingActionType } from \"../service/actionType\";\r\nimport ChatClientInstance from \"../helpers/Messaging\";\r\n\r\nexport const updatePersonTyping = (payload) => (dispatch, getState) => {\r\n  const { typingMembers, currentChannelMembers } = getState().messagingReducer;\r\n  const { type, participant } = payload;\r\n  let { identity } = participant.state;\r\n  let tempMembers = typingMembers;\r\n\r\n  const currentChatItemOwner =\r\n    currentChannelMembers.filter(\r\n      ({ userIdenity }) => userIdenity === identity\r\n    )[0] || {};\r\n\r\n  let currentPerson = currentChatItemOwner?.userName || identity;\r\n\r\n  if (type === \"typingStarted\") {\r\n    // console.log(typingMembers, identity);\r\n\r\n    if (!typingMembers.includes(currentPerson)) {\r\n      tempMembers = [...typingMembers, currentPerson];\r\n\r\n      dispatch({\r\n        type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n        payload: { typingMembers: [...tempMembers] },\r\n      });\r\n    }\r\n  } else if (type === \"typingEnded\") {\r\n    // console.log(typingMembers, currentPerson);\r\n    if (typingMembers.includes(currentPerson)) {\r\n      tempMembers = [...typingMembers].filter(\r\n        (person) => person !== currentPerson\r\n      );\r\n      dispatch({\r\n        type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n        payload: { typingMembers: [...tempMembers] },\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const resetChannelDetails = () => (dispatch) => {\r\n  dispatch({\r\n    type: MessagingActionType.RESET_CHANNEL_DETAILS,\r\n  });\r\n};\r\n\r\nexport const updateMessagingDetails = (payload) => (dispatch) => {\r\n  dispatch({\r\n    type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n    payload,\r\n  });\r\n};\r\n\r\nexport const initClientDispatch = () => (dispatch, getState) => {\r\n  dispatch({\r\n    type: MessagingActionType.UPDATE_CLIENT_INSTANCE,\r\n    payload: new ChatClientInstance(dispatch, getState),\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport Jonn from \"../../../assets/files/TrainerDashboard/Message/Image 1.png\";\r\nimport { UserAvatar } from \"../UserAvatar\";\r\n\r\nexport const ChatItem = ({\r\n  currentChannelMembers = [],\r\n  currMsg: { type, state, date },\r\n}) => {\r\n  let CurrentMessageComponent;\r\n\r\n  if (type === \"message\") {\r\n    let msgCreatedDate = moment(state.timestamp);\r\n\r\n    let msgTime = msgCreatedDate.format(\"LT\");\r\n\r\n    const isMyMsg = state?.author === localStorage.getItem(\"user-id\");\r\n\r\n    const currentChatItemOwner =\r\n      currentChannelMembers.filter(\r\n        ({ userIdenity }) => userIdenity === state.author\r\n      )[0] || {};\r\n\r\n    CurrentMessageComponent = (\r\n      <div className={`message_chat_${isMyMsg ? \"right\" : \"left\"}`}>\r\n        <div className=\"message_text\">\r\n          <h5>{state?.body || \"\"}</h5>\r\n          <span className=\"msg-time\">{msgTime}</span>\r\n        </div>\r\n\r\n        <UserAvatar {...currentChatItemOwner} />\r\n\r\n        {/* <img\r\n          src={currentChatItemOwner?.profilePicture || Jonn}\r\n          alt=\"icon\"\r\n          onError={(e) => {\r\n            e.target.onerror = null;\r\n            e.target.src = Jonn;\r\n          }}\r\n        /> */}\r\n      </div>\r\n    );\r\n  } else {\r\n    CurrentMessageComponent = (\r\n      <div className=\"w-100 d-flex align-items-center justify-content-center my-3\">\r\n        <span className=\"info-badge\">{date}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>{CurrentMessageComponent}</div>;\r\n};\r\n","// import config from \"../../config\";\r\n\r\nimport { MessagingActionType } from \"../service/actionType\";\r\nimport { twilioApi } from \"../service/apiVariables\";\r\nimport { api } from \"../service/api\";\r\nimport { Toast } from \"../service/toast\";\r\nimport {\r\n  updatePersonTyping,\r\n  resetChannelDetails,\r\n} from \"../action/messagingAct\";\r\n\r\nconst Chat = require(\"twilio-chat\");\r\n\r\nexport default class TwilioMessaging {\r\n  constructor(handler, getState) {\r\n    this.getState = getState;\r\n\r\n    this.handler = handler;\r\n\r\n    this.activeChannel = null;\r\n\r\n    this.client = null;\r\n\r\n    this.initClient();\r\n  }\r\n\r\n  initClient = async () => {\r\n    const token = await this.getToken();\r\n\r\n    const client = await Chat.Client.create(token);\r\n\r\n    this.client = client;\r\n\r\n    this.handler({\r\n      type: MessagingActionType.INITIALIZE_CLIENT,\r\n      payload: client,\r\n    });\r\n\r\n    this.initClientListeners(client);\r\n  };\r\n\r\n  initClientListeners = (client) => {\r\n    // REMOVE ALL THE EXISTING LISTENERS\r\n    client.removeAllListeners();\r\n\r\n    // client.on(\"channelJoined\", async (channel) => {\r\n    //   // getting list of all messages since this is an existing channel\r\n    //   console.log(channel);\r\n\r\n    //   await this.onChanelJoined(channel);\r\n    // });\r\n\r\n    // LISTEN FOR GLOBAL MESSAGES\r\n\r\n    // client.on(\"messageAdded\", async (message) => {\r\n    //   await this.handler(this.onMessagedAdded(message));\r\n    // });\r\n\r\n    // LISTEN FOR PERSON WHOSE ARE TYPING\r\n    client.on(\"typingStarted\", (participant) => {\r\n      this.onParticipantStartTyping(participant);\r\n    });\r\n\r\n    // LISTEN FOR PERSON WHOM HAVE STOP TYPING\r\n    client.on(\"typingEnded\", (participant) => {\r\n      this.onParticipantEndedTyping(participant);\r\n    });\r\n\r\n    //LISTEN AND UPDATE IF TOKEN IS ABOUT TO EXPIRE\r\n\r\n    client.on(\"tokenAboutToExpire\", async () => {\r\n      this.log(\"token is about to expire\");\r\n      const token = await this.getToken();\r\n      client.updateToken(token);\r\n    });\r\n\r\n    // LISTEN IF ALREADY TOKEN HAS EXPIRED\r\n\r\n    client.on(\"tokenExpired\", async () => {\r\n      this.log(\"token is about to expire\");\r\n      const token = await this.getToken();\r\n      client.updateToken(token);\r\n    });\r\n  };\r\n\r\n  joinChannelByID = async (uniqueChannelId) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        this.unSubscribeChannel();\r\n        if (!this.client) return alert(\"Twilio loading\");\r\n\r\n        this.handler({\r\n          type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n          payload: { isLoading: true },\r\n        });\r\n\r\n        this.log(`Attempting to join ${uniqueChannelId} channel`);\r\n\r\n        const channel = await this.client.getChannelByUniqueName(\r\n          uniqueChannelId\r\n        );\r\n        await this.joinChannel(channel);\r\n\r\n        await this.onChanelJoined(channel);\r\n\r\n        this.log(`Channel joined`);\r\n\r\n        this.activeChannel = channel;\r\n\r\n        // LISTEN ON CHANNEL MESSAGE ADDED\r\n\r\n        channel.on(\"messageAdded\", async (message) => {\r\n          await this.onMessagedAdded(message);\r\n        });\r\n\r\n        // LISTEN FOR PERSON WHOSE ARE TYPING\r\n        channel.on(\"typingStarted\", (participant) => {\r\n          this.onParticipantStartTyping(participant);\r\n        });\r\n\r\n        // LISTEN FOR PERSON WHOM HAVE STOP TYPING\r\n        channel.on(\"typingEnded\", (participant) => {\r\n          this.onParticipantEndedTyping(participant);\r\n        });\r\n\r\n        // WHEN A MEMBER JOINED\r\n\r\n        channel.on(\"memberJoined\", (member) => {\r\n          this.onMemberJoined(member);\r\n        });\r\n\r\n        // WHEN A MEMBER LEFT\r\n        channel.on(\"memberLeft\", (member) => {\r\n          this.onMemberLeft(member);\r\n        });\r\n\r\n        this.handler({\r\n          type: MessagingActionType.UPDATE_CHANNEL_DETAILS,\r\n          payload: channel,\r\n        });\r\n        resolve(true);\r\n      } catch (err) {\r\n        this.log(`Not able to join the channel`);\r\n        reject(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  joinChannel = async (channel) => {\r\n    if (channel.channelState.status !== \"joined\") {\r\n      await channel.join();\r\n    }\r\n  };\r\n\r\n  // FUNC FIRES WHEN USER JOINED IN A CHANNEL\r\n\r\n  onChanelJoined = async (channel) => {\r\n    const messages = await channel.getMessages();\r\n\r\n    let tempMessage = messages.items || [];\r\n\r\n    this.handler({\r\n      type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n      payload: {\r\n        activeChannelMessages: [...tempMessage],\r\n        isLoading: false,\r\n      },\r\n    });\r\n  };\r\n\r\n  // FUNC FIRES WHEN USER RECIVES MESSAGE\r\n\r\n  onMessagedAdded = (message) => {\r\n    const { channel } = message;\r\n    if (channel.sid !== this.activeChannel.sid) {\r\n      console.log(message, \"msg\", \"diff channel\");\r\n      return {};\r\n    } else {\r\n      return this.handler({\r\n        type: MessagingActionType.UPDATE_MESSAGE_DETAILS,\r\n        payload: message,\r\n      });\r\n    }\r\n  };\r\n\r\n  // WHEN PERSON STARTS TYPING THIS FUNC FIRES\r\n\r\n  onParticipantStartTyping = (participant) => {\r\n    let payload = {\r\n      type: \"typingStarted\",\r\n      participant,\r\n    };\r\n    updatePersonTyping(payload)(this.handler, this.getState);\r\n  };\r\n\r\n  // WHEN PERSON STOPS TYPING THIS FUNC FIRES\r\n\r\n  onParticipantEndedTyping = (participant) => {\r\n    let payload = {\r\n      type: \"typingEnded\",\r\n      participant,\r\n    };\r\n    updatePersonTyping(payload)(this.handler, this.getState);\r\n  };\r\n\r\n  // WHEN NEW PERSON JOINS THE ROOM THIS FUNC FIRES\r\n\r\n  onMemberJoined = (member) => {\r\n    const { state } = member;\r\n\r\n    const { identity } = state;\r\n\r\n    this.log(`${identity} has joined the chat`);\r\n\r\n    return this.handler({\r\n      type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n      payload: {\r\n        status: `${identity} has joined the chat`,\r\n      },\r\n    });\r\n  };\r\n\r\n  // WHEN A PERSON LEFT THE ROOM THIS FUNC FIRES\r\n\r\n  onMemberLeft = (member) => {\r\n    const { state } = member;\r\n\r\n    const { identity } = state;\r\n\r\n    this.log(`${identity} has left the chat`);\r\n\r\n    return this.handler({\r\n      type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n      payload: {\r\n        status: `${identity} has left the chat`,\r\n      },\r\n    });\r\n  };\r\n\r\n  getToken = () => {\r\n    const { getIdentityToken } = twilioApi;\r\n\r\n    getIdentityToken.id = localStorage.getItem(\"user-id\");\r\n\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...getIdentityToken })\r\n        .then(({ chatToken }) => {\r\n          //   console.log(chatToken);\r\n          resolve(chatToken);\r\n        })\r\n        .catch((err) => {\r\n          Toast({ type: \"error\", message: err.message || \"Error\" });\r\n          reject(err);\r\n        });\r\n    });\r\n  };\r\n\r\n  // REMOVE THE LISTENERS FROM THE ACTIVE CHANNEL\r\n\r\n  unSubscribeChannel() {\r\n    if (this.activeChannel) {\r\n      this.activeChannel.removeAllListeners();\r\n      this.activeChannel = null;\r\n      this.log(\"Un subscribed from the channel\");\r\n    }\r\n    resetChannelDetails()(this.handler);\r\n  }\r\n\r\n  // REMOVE CHAT CLIENT\r\n\r\n  removeChatClient() {\r\n    if (this.client) {\r\n      this.client.removeAllListeners();\r\n      this.client = null;\r\n      this.handler({\r\n        type: MessagingActionType.UPDATE_MESSAGING_DETAILS,\r\n        payload: { clientData: null },\r\n      });\r\n      this.unSubscribeChannel();\r\n      this.log(\"chat client removed\");\r\n    }\r\n  }\r\n\r\n  log(message) {\r\n    console.log(`---------${message}------`);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport LocationIcon from \"../../../assets/files/TrainerDashboard/Message/Location Icon.svg\";\r\nimport SheduleIcon from \"../../../assets/files/TrainerDashboard/Message/Shedule Icon.svg\";\r\nimport AvailabilityIcon from \"../../../assets/files/TrainerDashboard/Message/Availability Icon.svg\";\r\nimport BlueHoverButton from \"../BlueArrowButton\";\r\n\r\nimport { ChatItem } from \"./ChatItem\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { trainerChannel } from \"action/trainerAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { getFormatDate } from \"service/helperFunctions\";\r\n\r\nclass ChatBoxClass extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.messagesEndRef = React.createRef();\r\n    this.state = {\r\n      message: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // console.log(this.props, prevProps);\r\n    if (\r\n      this.props.activeChannelMessages.length !==\r\n      prevProps.activeChannelMessages.length\r\n    ) {\r\n      this.scrollToMessageListBottom();\r\n      // console.log(\"hrllo\");\r\n    }\r\n    if (this.props.isLoading === false && prevProps.isLoading === true) {\r\n      setTimeout(() => {\r\n        this.scrollToMessageListBottom();\r\n        // console.log(\"hrllo\", this.props.isLoading, prevProps.isLoading);\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.scrollToMessageListBottom();\r\n  }\r\n\r\n  scrollToMessageListBottom = () => {\r\n    this.messagesEndRef.current?.scrollTo(\r\n      0,\r\n      this.messagesEndRef.current?.scrollHeight\r\n    );\r\n  };\r\n\r\n  handleChange = ({ target: { value } }) => {\r\n    const { activeChannel } = this.props;\r\n\r\n    this.setState({\r\n      message: value,\r\n    });\r\n    activeChannel && activeChannel.typing();\r\n  };\r\n\r\n  handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    const { message } = this.state;\r\n\r\n    const { activeChannel } = this.props;\r\n\r\n    if (!activeChannel) {\r\n      return console.log(\"Chat Service is not configured.\");\r\n    }\r\n\r\n    if (activeChannel) {\r\n      activeChannel.sendMessage(String(message)).then(() => {\r\n        this.setState({\r\n          message: \"\",\r\n        });\r\n        this.scrollToMessageListBottom();\r\n      });\r\n    }\r\n  };\r\n\r\n  formatMessage = (messages = []) => {\r\n    var lastMsgDate = \"\";\r\n    let formattedMessage = messages.reduce((prevMsgArray, currMsg) => {\r\n      let tempPrevMsgArray = [...prevMsgArray];\r\n\r\n      const { timestamp } = currMsg.state;\r\n\r\n      let currYear = getFormatDate(null, \"YYYY\");\r\n\r\n      let msgYear = getFormatDate(timestamp, \"YYYY\");\r\n\r\n      let tempMsgDate = getFormatDate(timestamp, \"MMMM DD\");\r\n\r\n      let msgDate =\r\n        currYear === msgYear ? tempMsgDate : `${tempMsgDate}, ${msgYear}`;\r\n\r\n      if (lastMsgDate === msgDate) {\r\n        tempPrevMsgArray = [\r\n          ...tempPrevMsgArray,\r\n          { type: \"message\", ...currMsg },\r\n        ];\r\n      } else {\r\n        lastMsgDate = msgDate;\r\n        tempPrevMsgArray = [\r\n          ...tempPrevMsgArray,\r\n          { type: \"timestamp\", date: msgDate },\r\n          { type: \"message\", ...currMsg },\r\n        ];\r\n      }\r\n\r\n      return tempPrevMsgArray;\r\n    }, []);\r\n\r\n    return formattedMessage;\r\n  };\r\n  render() {\r\n    const {\r\n      activeChannelMessages = [],\r\n      typingMembers = [],\r\n      currentChannelMembers = [],\r\n      isLoading = false,\r\n      activeChannel = {},\r\n      channelData = {},\r\n      isDataPresent = false,\r\n    } = this.props;\r\n\r\n    const { message } = this.state;\r\n\r\n    const tempMsg = this.formatMessage(activeChannelMessages);\r\n\r\n    const messages = activeChannelMessages;\r\n\r\n    if (!isDataPresent) return null;\r\n    return (\r\n      <div className=\"message_right_chatarea\">\r\n        {activeChannel?.sid ? (\r\n          <>\r\n            {!isLoading ? (\r\n              <>\r\n                <div className=\"message_right_header\">\r\n                  <h2>{channelData?.chatTitle || \"Title\"}</h2>\r\n                  <div className=\"message_header_times\">\r\n                    <div className=\"message_header_items\">\r\n                      <img src={SheduleIcon} alt=\"icon\" />\r\n                      <h5>\r\n                        {getFormatDate(\r\n                          channelData?.startTime,\r\n                          \"ddd MMM DD YYYY\",\r\n                          true\r\n                        )}\r\n                      </h5>\r\n                    </div>\r\n                    <div className=\"message_header_items\">\r\n                      <img src={AvailabilityIcon} alt=\"icon\" />\r\n                      <h5>\r\n                        {getFormatDate(channelData?.startTime, \"hh:mm A\", true)}\r\n                      </h5>\r\n                    </div>\r\n                    <div className=\"message_header_items\">\r\n                      <img src={LocationIcon} alt=\"icon\" />\r\n                      <h5>{channelData?.venue}</h5>\r\n                    </div>\r\n                  </div>\r\n                  <p>\r\n                    {typingMembers.length > 0 && (\r\n                      <span className=\"ml-auto text-primary fw-600\">{`${typingMembers.toString()} ${\r\n                        typingMembers.length > 1 ? \"are\" : \"is\"\r\n                      } typing...`}</span>\r\n                    )}\r\n                  </p>\r\n                </div>\r\n                <div\r\n                  className=\"message_right_textarea\"\r\n                  ref={this.messagesEndRef}\r\n                >\r\n                  {tempMsg?.length > 0 ? (\r\n                    tempMsg.map((item, index) => {\r\n                      return (\r\n                        <ChatItem\r\n                          item={item}\r\n                          currentChannelMembers={currentChannelMembers}\r\n                          key={`${Date.now()}_${index}`}\r\n                          currMsg={item}\r\n                        />\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <div className=\"w-100 h-100 d-flex align-items-center justify-content-center\">\r\n                      <span className=\"info-badge\">No message</span>\r\n                    </div>\r\n                  )}\r\n                  <div id=\"end-message\" />\r\n                </div>\r\n                <form className=\"w-100\" onSubmit={this.handleSendMessage}>\r\n                  <div className=\"message_right_input\">\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Type your message here..\"\r\n                      value={message}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    <div className=\"submit-btn-block\">\r\n                      <button className=\"transparent-btn\">\r\n                        <BlueHoverButton />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </>\r\n            ) : (\r\n              <div className=\"w-100 h-100 d-flex align-items-center justify-content-center\">\r\n                <span className=\"info-badge\">{`${\r\n                  isLoading ? \"Loading...\" : \"Connecting...\"\r\n                }`}</span>\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div className=\"w-100 h-100 d-flex align-items-center justify-content-center\">\r\n            <span className=\"info-badge\">{`${\r\n              isLoading ? \"Loading...\" : \"Select a chat to start messaging\"\r\n            }`}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  clientData: state.messagingReducer.clientData,\r\n  activeChannel: state.messagingReducer.activeChannel,\r\n  activeChannelMessages: state.messagingReducer.activeChannelMessages,\r\n  typingMembers: state.messagingReducer.typingMembers,\r\n  chatClientInstance: state.messagingReducer.chatClientInstance,\r\n  currentChannelMembers: state.messagingReducer.currentChannelMembers,\r\n  isLoading: state.messagingReducer.isLoading,\r\n  channelData: state.messagingReducer.channelData,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      trainerChannel,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst ChatBox = connect(mapStateToProps, mapDispatchToProps)(ChatBoxClass);\r\n\r\nexport default ChatBox;\r\n","export default __webpack_public_path__ + \"static/media/Jenny.c50273b9.png\";","export default __webpack_public_path__ + \"static/media/Availability Icon.ad0517cb.svg\";","export default __webpack_public_path__ + \"static/media/Location Icon.cbb0b32d.svg\";","export default __webpack_public_path__ + \"static/media/Image 1.5667afc3.png\";","export default __webpack_public_path__ + \"static/media/Shedule Icon.7b9fb7aa.svg\";"],"sourceRoot":""}