{"version":3,"sources":["component/common/ErrorComponent/index.js","component/TrainerDashBoard/DashboardCompontents/PasswordSetting/index.js"],"names":["ErrorComponent","message","className","style","fontSize","PasswordSetting","connect","dispatch","bindActionCreators","changePasswordAct","props","useState","passwordShown","setPasswordShown","newPasswordShown","setNewPasswordShown","password","newPassword","confirmPassword","passwordData","setPasswordData","error","setErrors","validateFields","data","fieldInvalidList","validate","passwordValidation","format","pattern","flags","length","minimum","tooShort","maximum","tooLong","presence","allowEmpty","equality","attribute","comparator","v1","v2","JSON","stringify","validationRules","undefined","errors","showNewPassword","onChangeValue","e","persist","target","name","value","tempErrors","onSubmit","preventDefault","body","payload","location","pathname","currentApi","split","AuthApi","changePasswordUser","changePasswordTrainer","then","history","push","catch","err","Toast","type","placeholder","onChange","src","Password","alt","onClick","cursor"],"mappings":"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","file":"static/js/84.d82fe042.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ErrorComponent = ({ message }) => {\r\n  return (\r\n    <span className=\"text-danger\" style={{ fontSize: \"16px\" }}>\r\n      {message ? message : \"Error in field\"}\r\n    </span>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./styles.scss\";\r\nimport { history } from \"helpers\";\r\nimport Password from \"../../../../assets/files/SignUp/Password Icon.svg\";\r\nimport ArrowHoverBlacked from \"component/common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport { changePasswordAct } from \"action/authAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport validate from \"service/validation\";\r\nimport { ErrorComponent } from \"component/common/ErrorComponent\";\r\nimport { AuthApi } from \"service/apiVariables\";\r\nimport { Toast } from \"service/toast\";\r\nconst PasswordSettingClass = (props) => {\r\n  // Password show or hide\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n  const [newPasswordShown, setNewPasswordShown] = useState(false);\r\n\r\n  const [passwordData, setPasswordData] = useState({\r\n    password: \"\",\r\n    newPassword: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let body = {\r\n      password: passwordData.password,\r\n      newPassword: passwordData.newPassword,\r\n    };\r\n\r\n    let payload = {\r\n      password: passwordData.password,\r\n      newPassword: passwordData.newPassword,\r\n      confirmPassword: passwordData.confirmPassword,\r\n    };\r\n\r\n    const { pathname = \"\" } = props.location;\r\n\r\n    const userType = pathname.split(\"/\")[1];\r\n\r\n    let currentApi =\r\n      userType === \"users\"\r\n        ? AuthApi.changePasswordUser\r\n        : AuthApi.changePasswordTrainer;\r\n\r\n    if (!validateFields(payload)) return;\r\n    props\r\n      .changePasswordAct(body, currentApi)\r\n      .then(() => {\r\n        history.push(\"/trainers/dashboard/schedule\");\r\n      })\r\n      .catch((err) =>\r\n        Toast({ type: \"error\", message: err.message || \"Error\" })\r\n      );\r\n  };\r\n  const [error, setErrors] = useState({});\r\n  const validationRules = () => {\r\n    let passwordValidation = {\r\n      format: {\r\n        pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!_#%*?&])[A-Za-z\\d@_#$!%*?&]*$/,\r\n        flags: \"i\",\r\n        message:\r\n          \"^Password must contain at least one uppercase letter, one lowercase letter, one number and one special character\",\r\n      },\r\n      length: {\r\n        minimum: 8,\r\n        tooShort: \"must contain alteast 8 character\",\r\n        maximum: 12,\r\n        tooLong: \"must contain less than 12 character\",\r\n      },\r\n    };\r\n    return {\r\n      password: {\r\n        presence: {\r\n          allowEmpty: false,\r\n          message: \"^Password is required\",\r\n        },\r\n        ...passwordValidation,\r\n      },\r\n      newPassword: {\r\n        presence: {\r\n          allowEmpty: false,\r\n          message: \"^New password is required\",\r\n        },\r\n        ...passwordValidation,\r\n      },\r\n      confirmPassword: {\r\n        presence: {\r\n          allowEmpty: false,\r\n          message: \"^Confirm password is required\",\r\n        },\r\n        equality: {\r\n          attribute: \"newPassword\",\r\n          message: \"^Passwords doesn't match\",\r\n          comparator: function (v1, v2) {\r\n            return JSON.stringify(v1) === JSON.stringify(v2);\r\n          },\r\n        },\r\n        ...passwordValidation,\r\n      },\r\n    };\r\n  };\r\n\r\n  const validateFields = (data) => {\r\n    let fieldInvalidList = validate(data, validationRules());\r\n\r\n    if (fieldInvalidList !== undefined) {\r\n      let errors = {\r\n        ...fieldInvalidList,\r\n      };\r\n\r\n      setErrors({ ...errors, ...fieldInvalidList });\r\n    }\r\n\r\n    return !fieldInvalidList;\r\n  };\r\n  // Password show or hide\r\n  const showPassword = () => {\r\n    setPasswordShown(passwordShown ? false : true);\r\n  };\r\n  const showNewPassword = () => {\r\n    setNewPasswordShown(newPasswordShown ? false : true);\r\n  };\r\n  const onChangeValue = (e) => {\r\n    e.persist();\r\n\r\n    const { name, value } = e.target || e || {};\r\n\r\n    const tempErrors = { ...error };\r\n\r\n    tempErrors[name] = undefined;\r\n    setPasswordData({ ...passwordData, [name]: value });\r\n    setErrors({ ...error, ...tempErrors });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"password_main\">\r\n          <div className=\"password_heading\">\r\n            <h2>Password Change</h2>\r\n          </div>\r\n          <div className=\"password_form\">\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"newPassword\">\r\n                <input\r\n                  type={passwordShown ? \"text\" : \"password\"}\r\n                  placeholder=\"Old Password\"\r\n                  value={passwordData.password}\r\n                  onChange={(e) => onChangeValue(e)}\r\n                  name=\"password\"\r\n                />\r\n                <img\r\n                  src={Password}\r\n                  alt=\"icon\"\r\n                  onClick={showPassword}\r\n                  style={{ cursor: \"pointer\" }}\r\n                />\r\n              </div>\r\n              {error.password && <ErrorComponent message={error.password[0]} />}\r\n              <div className=\"newPassword\">\r\n                <input\r\n                  type={newPasswordShown ? \"text\" : \"password\"}\r\n                  placeholder=\"New Password\"\r\n                  value={passwordData.newPassword}\r\n                  onChange={(e) => onChangeValue(e)}\r\n                  name=\"newPassword\"\r\n                />\r\n                <img\r\n                  src={Password}\r\n                  alt=\"icon\"\r\n                  onClick={showNewPassword}\r\n                  style={{ cursor: \"pointer\" }}\r\n                />\r\n              </div>\r\n              {error.newPassword && (\r\n                <ErrorComponent message={error.newPassword[0]} />\r\n              )}\r\n              <div className=\"newPassword\">\r\n                <input\r\n                  type={newPasswordShown ? \"text\" : \"password\"}\r\n                  placeholder=\"Confirm New Password\"\r\n                  value={passwordData.confirmPassword}\r\n                  onChange={(e) => onChangeValue(e)}\r\n                  name=\"confirmPassword\"\r\n                />\r\n                <img\r\n                  src={Password}\r\n                  alt=\"icon\"\r\n                  onClick={showNewPassword}\r\n                  style={{ cursor: \"pointer\" }}\r\n                />\r\n              </div>\r\n              {error.confirmPassword && (\r\n                <ErrorComponent message={error.confirmPassword[0]} />\r\n              )}\r\n              <button type=\"submit\">\r\n                Submit <ArrowHoverBlacked />\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      changePasswordAct,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst PasswordSetting = connect(null, mapDispatchToProps)(PasswordSettingClass);\r\n\r\nexport default PasswordSetting;\r\n"],"sourceRoot":""}