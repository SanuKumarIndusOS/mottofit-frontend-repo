{"version":3,"sources":["component/common/NormalMultiSelect/index.js","component/TrainerOnBoard/TrainerBackground/index.js","assets/files/SVG/Arrow Back.svg","assets/files/SVG/Drop Down 4.svg","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js"],"names":["NormalMultiSelect","handleChange","newValue","props","isMulti","body","target","name","value","length","forEach","array","obj","label","push","handleInputChange","handleinputChange","this","className","options","placeholder","disabled","arrow","isReadOnly","isClearable","isSearchable","isBoldLabel","showArrow","customStyles","base","fontSize","color","fontWeight","lineHeight","display","justifyContent","alignItems","height","fontFamily","indicatorSeparator","valueContainer","padding","singleValue","dropdownIndicator","width","option","isFocused","backgroundColor","textAlign","control","borderRadius","border","boxShadow","outline","background","minHeight","classNamePrefix","isDisabled","onChange","styles","find","data","components","DropdownIndicator","src","logo","alt","Component","worksMode","TrainerBackground","connect","state","details","trainerReducer","dispatch","bindActionCreators","updateTrainerDetailsApicall","getTrainerDetails","trainerDetail","React","useState","checkedBoxing","setCheckedBoxing","checkedHIIT","setCheckedHIIT","checkedYoga","setCheckedYoga","checkedPilates","setCheckedPilates","workMode","workLocation","currentExperience","setCurrentExperience","areaOfExpertise","clientAssessment","trainingProcess","interestInMotto","awaitingCertification","trainerbackgroundData","setTrainerbackgroundData","orgnization","job","years","inputFields","setInputField","certificate","year","upload","inputCertificatesFields","setinputCertificatesField","handleChangeInput","index","event","values","handleChangeCertificateInput","handleAddCertificateFields","useEffect","then","Set","previousExperience","certification","indexOf","ArrowBack","to","ArrowNext","checked","e","splice","style","map","input","Fragment","type","onClick","handleRemoveFields","inputCertificatesField","handleRemoveCertificateFields","list","textDecoration","storeData","history","WaterMark","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","createSvgIcon","d","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","ref","_props$checkedIcon","checkedIcon","classes","_props$color","_props$icon","icon","iconProp","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","indeterminateIconProp","inputProps","_props$size","size","other","_objectWithoutProperties","SwitchBase","_extends","root","clsx","concat","capitalize","undefined","withStyles","theme","palette","text","secondary","colorPrimary","primary","main","fade","action","hoverOpacity","colorSecondary"],"mappings":"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","file":"static/js/16.127cc276.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Select, { components } from \"react-select\";\r\nimport \"./select.scss\";\r\nimport logo from \"../../../assets/files/SVG/Drop Down 4.svg\";\r\nexport class NormalMultiSelect extends Component {\r\n    //change select\r\n    handleChange = (newValue) => {\r\n        let { isMulti } = this.props;\r\n        if (!!isMulti) {\r\n            let body = {\r\n                target: {\r\n                    name: this.props.name,\r\n                    value: [],\r\n                },\r\n            };\r\n            if (!!newValue && newValue.length) {\r\n                newValue.forEach((array) => {\r\n                    let obj = {\r\n                        value: array.value,\r\n                        label: array.label,\r\n                    };\r\n                    body.target.value.push(obj);\r\n                });\r\n            }\r\n            this.props.handleChange(body);\r\n        } else {\r\n            let body = {\r\n                target: {\r\n                    name: this.props.name,\r\n                    value: newValue ? newValue.value : \"\",\r\n                    label: newValue ? newValue.label : \"\",\r\n                },\r\n            };\r\n\r\n            this.props.handleChange(body);\r\n        }\r\n    };\r\n\r\n    //handle Input Change\r\n    handleInputChange = (newValue) => {\r\n        let body = {\r\n            target: {\r\n                name: this.props.name,\r\n                value: newValue ? newValue : \"\",\r\n            },\r\n        };\r\n        this.props.handleinputChange && this.props.handleinputChange(body);\r\n    };\r\n\r\n    render() {\r\n        let {\r\n            className = \"select-form-control w-100\",\r\n            options = [],\r\n            value = \"\",\r\n            name = \"\",\r\n            placeholder = \"Select\",\r\n            disabled = false,\r\n            arrow = false,\r\n            isReadOnly = false,\r\n            label = \"\",\r\n            isMulti = false,\r\n            isClearable = false,\r\n            isSearchable = false,\r\n            isBoldLabel = false,\r\n            showArrow = true,\r\n        } = this.props;\r\n\r\n        const DropdownIndicator = (props) => {\r\n            return (\r\n                components.DropdownIndicator && (\r\n                    <components.DropdownIndicator {...props}>\r\n                        <img src={logo} alt=\"dropdown\" />\r\n                    </components.DropdownIndicator>\r\n                )\r\n            );\r\n        };\r\n        const customStyles = {\r\n            placeholder: (base) => ({\r\n                ...base,\r\n                fontSize: 18,\r\n                color: \"#000\",\r\n                fontWeight: 500,\r\n                lineHeight: 38,\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: \"100%\",\r\n                fontFamily: \"Montserrat\",\r\n            }),\r\n            indicatorSeparator: (base) => ({\r\n                ...base,\r\n                display: \"none\",\r\n            }),\r\n            valueContainer: (base) => ({\r\n                ...base,\r\n                padding: \"0px 20px\",\r\n                fontSize: 18,\r\n                color: \"#000\",\r\n                fontWeight: 500,\r\n                lineHeight: 38,\r\n                height: \"100%\",\r\n                fontFamily: \"Montserrat\",\r\n            }),\r\n            singleValue: (base) => ({\r\n                ...base,\r\n                color: \"#000\",\r\n                fontWeight: 500,\r\n            }),\r\n            dropdownIndicator: (base) => ({\r\n                ...base,\r\n                padding: 0,\r\n                height: \"26px\",\r\n                width: \"26px\",\r\n                color: \"black\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: \"100%\",\r\n                fontFamily: \"Montserrat\",\r\n            }),\r\n            option: (base, { isFocused }) => ({\r\n                ...base,\r\n                backgroundColor: isFocused ? \"#53BFD2\" : \"#fff\",\r\n                color: isFocused ? \"#fff\" : \"#000\",\r\n                fontSize: 18,\r\n                textAlign: \"left\",\r\n                fontFamily: \"Montserrat\",\r\n            }),\r\n            control: (base) => ({\r\n                ...base,\r\n                borderRadius: 50,\r\n                border: \"2px solid #bcbcbc\",\r\n                boxShadow: \"0 0 !important\",\r\n                outline: \"0 \",\r\n                background: \"white\",\r\n                height: 45,\r\n                minHeight: 45,\r\n                fontFamily: \"Montserrat\",\r\n            }),\r\n        };\r\n        return (\r\n            <>\r\n                {!isReadOnly ? (\r\n                    <div\r\n                        className={`${\r\n                            arrow ? \"select-section w-100\" : \"Select\"\r\n                        } ${isBoldLabel ? \"mt-0\" : \"\"}`}\r\n                    >\r\n                        {label !== \"\" ? (\r\n                            <div>\r\n                                <label\r\n                                    className={\r\n                                        isBoldLabel\r\n                                            ? \"mb-1 text-black-22\"\r\n                                            : \"font-weight-normal mb-1\"\r\n                                    }\r\n                                >\r\n                                    {label}\r\n                                </label>\r\n                            </div>\r\n                        ) : null}\r\n                        <Select\r\n                            className={className}\r\n                            classNamePrefix=\"Select\"\r\n                            isDisabled={disabled}\r\n                            isClearable={isClearable}\r\n                            isSearchable={isSearchable}\r\n                            name={name}\r\n                            options={options}\r\n                            onChange={this.handleChange}\r\n                            isMulti={isMulti}\r\n                            showArrow={showArrow}\r\n                            placeholder={placeholder}\r\n                            styles={customStyles}\r\n                            value={\r\n                                !!options && options.length > 0\r\n                                    ? options.find(\r\n                                          (data) => data.value === value\r\n                                      )\r\n                                        ? options.find(\r\n                                              (data) => data.value === value\r\n                                          )\r\n                                        : null\r\n                                    : null\r\n                            }\r\n                            components={{ DropdownIndicator }}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <p>{value}</p>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./styles.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ArrowBack from \"../../../assets/files/SVG/Arrow Back.svg\";\r\nimport ArrowNext from \"../../../assets/files/SVG/Arrow Next.svg\";\r\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport WaterMark from \"../../../assets/files/SVG/M Watermark.svg\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport {\r\n  updateTrainerDetailsApicall,\r\n  getTrainerDetails,\r\n  trainerDetail,\r\n} from \"action/trainerAct\";\r\nimport { history } from \"helpers\";\r\nimport { NormalMultiSelect } from \"component/common/NormalMultiSelect\";\r\nimport \"./dropdown.scss\";\r\nimport { ListRounded } from \"@material-ui/icons\";\r\n\r\nconst worksMode = [\r\n  {\r\n    label: \"Yes\",\r\n    value: \"yes\",\r\n  },\r\n  {\r\n    label: \"No\",\r\n    value: \"no\",\r\n  },\r\n];\r\n\r\nconst TrainerBackgroundFC = ({\r\n  updateTrainerDetailsApicall,\r\n  details,\r\n  trainerDetail,\r\n}) => {\r\n  const [checkedBoxing, setCheckedBoxing] = React.useState(false);\r\n  const [checkedHIIT, setCheckedHIIT] = React.useState(false);\r\n  const [checkedYoga, setCheckedYoga] = React.useState(false);\r\n  const [checkedPilates, setCheckedPilates] = React.useState(false);\r\n\r\n  const [currentExperience, setCurrentExperience] = useState({\r\n    workMode: \"\",\r\n    workLocation: \"\",\r\n  });\r\n  const [trainerbackgroundData, setTrainerbackgroundData] = useState({\r\n    areaOfExpertise: [],\r\n    clientAssessment: \"\",\r\n    trainingProcess: \"\",\r\n    interestInMotto: \"\",\r\n    awaitingCertification: \"\",\r\n  });\r\n\r\n  const [inputFields, setInputField] = useState([\r\n    {\r\n      orgnization: \"\",\r\n      job: \"\",\r\n      years: \"\",\r\n    },\r\n  ]);\r\n\r\n  const [inputCertificatesFields, setinputCertificatesField] = useState([\r\n    {\r\n      certificate: \"\",\r\n      year: \"\",\r\n      upload: \"\",\r\n    },\r\n  ]);\r\n  const handleChangeInput = (index, event) => {\r\n    const values = [...inputFields];\r\n    values[index][event.target.name] = event.target.value;\r\n    setInputField(values);\r\n  };\r\n  const handleChangeCertificateInput = (index, event) => {\r\n    const values = [...inputCertificatesFields];\r\n    values[index][event.target.name] = event.target.value;\r\n    setinputCertificatesField(values);\r\n  };\r\n\r\n  const handleAddFields = () => {\r\n    setInputField([...inputFields, { orgnization: \"\", job: \"\", years: \"\" }]);\r\n  };\r\n\r\n  const handleAddCertificateFields = () => {\r\n    setinputCertificatesField([\r\n      ...inputCertificatesFields,\r\n      { certificate: \"\", year: \"\", upload: \"\" },\r\n    ]);\r\n  };\r\n\r\n  const handleRemoveFields = (index) => {\r\n    const values = [...inputFields];\r\n    values.splice(index, 1);\r\n    setInputField(values);\r\n  };\r\n  const handleRemoveCertificateFields = (index) => {\r\n    const values = [...inputCertificatesFields];\r\n    values.splice(index, 1);\r\n    setinputCertificatesField(values);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const storeData = {\r\n      areaOfExpertise: trainerbackgroundData.areaOfExpertise,\r\n      previousExperience: inputFields,\r\n      certification: inputCertificatesFields,\r\n      clientAssessment: trainerbackgroundData.clientAssessment,\r\n      trainingProcess: trainerbackgroundData.trainingProcess,\r\n      interestInMotto: trainerbackgroundData.interestInMotto,\r\n      awaitingCertification: trainerbackgroundData.awaitingCertification,\r\n    };\r\n    updateTrainerDetailsApicall(storeData).then(() => {\r\n      history.push(`/trainer/availability`);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    trainerDetail().then((data) => {\r\n      if (data) {\r\n        setTrainerbackgroundData({\r\n          ...trainerbackgroundData,\r\n          areaOfExpertise: [...new Set(data.areaOfExpertise)],\r\n          clientAssessment: data.clientAssessment,\r\n          trainingProcess: data.trainingProcess,\r\n          interestInMotto: data.interestInMotto,\r\n          awaitingCertification: data.awaitingCertification\r\n            ? data.awaitingCertification\r\n            : \"\",\r\n        });\r\n        if (data.previousExperience) {\r\n          setInputField(data.previousExperience);\r\n        }\r\n        if (data.certification) {\r\n          setinputCertificatesField(data.certification);\r\n        }\r\n        if (data.currentExperience) {\r\n          setCurrentExperience(data.currentExperience);\r\n        }\r\n        if (data.areaOfExpertise) {\r\n          if (data.areaOfExpertise.indexOf(\"Boxing\") >= 0)\r\n            setCheckedBoxing(true);\r\n          if (data.areaOfExpertise.indexOf(\"Pilates\") >= 0)\r\n            setCheckedPilates(true);\r\n          if (data.areaOfExpertise.indexOf(\"Yoga\") >= 0) setCheckedYoga(true);\r\n          if (data.areaOfExpertise.indexOf(\"Strength & HIIT\") >= 0)\r\n            setCheckedHIIT(true);\r\n        }\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"outter_container_bg\">\r\n        <div className=\"container\">\r\n          <div className=\"links_wrapper\">\r\n            <div className=\"outter_links\">\r\n              <img src={ArrowBack} alt=\"icon\" />\r\n              <div className=\"inner_links\">\r\n                <Link to=\"/trainer/about\"> Back to About You</Link>\r\n                <div></div>\r\n              </div>\r\n            </div>\r\n            <div className=\"outter_links\">\r\n              <div className=\"inner_links\">\r\n                <Link to=\"/trainer/availability\">Go to Availability</Link>\r\n                <div></div>\r\n              </div>\r\n              <img src={ArrowNext} alt=\"icon\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"main_wrapper\">\r\n            <div className=\"wrapper_inneritems\">\r\n              <h1>Detail out your training background</h1>\r\n              <div className=\"contents_wrapper\">\r\n                <div>\r\n                  <div className=\"item1\">\r\n                    <h6>\r\n                      Tell us what you train! Select all the verticals that\r\n                      apply\r\n                    </h6>\r\n                    <div className=\"inputs_experience\">\r\n                      <Checkbox\r\n                        checked={checkedHIIT}\r\n                        onChange={(e) => {\r\n                          setCheckedHIIT(e.target.checked);\r\n\r\n                          if (e.target.checked) {\r\n                            setTrainerbackgroundData({\r\n                              ...trainerbackgroundData,\r\n                              areaOfExpertise: [\r\n                                ...trainerbackgroundData.areaOfExpertise,\r\n                                \"Strength & HIIT\",\r\n                              ],\r\n                            });\r\n                          } else {\r\n                            const index =\r\n                              trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                \"Strength & HIIT\"\r\n                              );\r\n                            if (index > -1) {\r\n                              trainerbackgroundData.areaOfExpertise.splice(\r\n                                index,\r\n                                1\r\n                              );\r\n                            }\r\n                          }\r\n                        }}\r\n                        style={{\r\n                          color: \"#53BFD2\",\r\n                        }}\r\n                      />\r\n                      <div className=\"checkbox_label\">Strength & HIIT</div>\r\n                      <Checkbox\r\n                        checked={checkedBoxing}\r\n                        // checked={true}\r\n                        onChange={(e) => {\r\n                          setCheckedBoxing(e.target.checked);\r\n                          if (e.target.checked) {\r\n                            setTrainerbackgroundData({\r\n                              ...trainerbackgroundData,\r\n                              areaOfExpertise: [\r\n                                ...trainerbackgroundData.areaOfExpertise,\r\n                                \"Boxing\",\r\n                              ],\r\n                            });\r\n                          } else {\r\n                            const index =\r\n                              trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                \"Boxing\"\r\n                              );\r\n                            if (index > -1) {\r\n                              trainerbackgroundData.areaOfExpertise.splice(\r\n                                index,\r\n                                1\r\n                              );\r\n                            }\r\n                          }\r\n                        }}\r\n                        style={{\r\n                          color: \"#53BFD2\",\r\n                        }}\r\n                      />\r\n                      <div className=\"checkbox_label\">Boxing</div>\r\n                      <Checkbox\r\n                        checked={checkedYoga}\r\n                        onChange={(e) => {\r\n                          setCheckedYoga(e.target.checked);\r\n\r\n                          if (e.target.checked) {\r\n                            setTrainerbackgroundData({\r\n                              ...trainerbackgroundData,\r\n                              areaOfExpertise: [\r\n                                ...trainerbackgroundData.areaOfExpertise,\r\n                                \"Yoga\",\r\n                              ],\r\n                            });\r\n                          } else {\r\n                            const index =\r\n                              trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                \"Yoga\"\r\n                              );\r\n                            if (index > -1) {\r\n                              trainerbackgroundData.areaOfExpertise.splice(\r\n                                index,\r\n                                1\r\n                              );\r\n                            }\r\n                          }\r\n                        }}\r\n                        style={{\r\n                          color: \"#53BFD2\",\r\n                        }}\r\n                      />\r\n                      <div className=\"checkbox_label\">Yoga</div>\r\n                      <Checkbox\r\n                        checked={checkedPilates}\r\n                        onChange={(e) => {\r\n                          setCheckedPilates(e.target.checked);\r\n\r\n                          if (e.target.checked) {\r\n                            setTrainerbackgroundData({\r\n                              ...trainerbackgroundData,\r\n                              areaOfExpertise: [\r\n                                ...trainerbackgroundData.areaOfExpertise,\r\n                                \"Pilates\",\r\n                              ],\r\n                            });\r\n                          } else {\r\n                            const index =\r\n                              trainerbackgroundData.areaOfExpertise.indexOf(\r\n                                \"Pilates\"\r\n                              );\r\n                            if (index > -1) {\r\n                              trainerbackgroundData.areaOfExpertise.splice(\r\n                                index,\r\n                                1\r\n                              );\r\n                            }\r\n                          }\r\n                        }}\r\n                        style={{\r\n                          color: \"#53BFD2\",\r\n                        }}\r\n                      />\r\n                      <div className=\"checkbox_label\">Pilates</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"item2\">\r\n                    <h6>Training experience</h6>\r\n                    {inputFields.map((input, index) => {\r\n                      return (\r\n                        <React.Fragment key={index}>\r\n                          <div className=\"inputs_experience\">\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Name of the organization / GYM\"\r\n                              value={input.orgnization}\r\n                              name=\"orgnization\"\r\n                              onChange={(event) =>\r\n                                handleChangeInput(index, event)\r\n                              }\r\n                            />\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Job Title\"\r\n                              value={input.job}\r\n                              name=\"job\"\r\n                              onChange={(event) =>\r\n                                handleChangeInput(index, event)\r\n                              }\r\n                            />\r\n                            <input\r\n                              type=\"number\"\r\n                              placeholder=\"Years\"\r\n                              name=\"years\"\r\n                              value={input.years}\r\n                              onChange={(event) =>\r\n                                handleChangeInput(index, event)\r\n                              }\r\n                            />\r\n                          </div>\r\n                          {index + 1 === inputFields.length ? (\r\n                            <div className=\"d-flex\">\r\n                              <h5 onClick={() => handleAddFields()}>\r\n                                + Add Work Experience\r\n                              </h5>\r\n                              {index + 1 === inputFields.length &&\r\n                              inputFields.length !== 1 ? (\r\n                                <h5\r\n                                  className=\"text-danger pl-3\"\r\n                                  onClick={() => handleRemoveFields(index)}\r\n                                >\r\n                                  Remove\r\n                                </h5>\r\n                              ) : null}\r\n                            </div>\r\n                          ) : null}\r\n                        </React.Fragment>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  <div className=\"item3\">\r\n                    <h6>Certifications</h6>\r\n                    {inputCertificatesFields.map(\r\n                      (inputCertificatesField, index) => (\r\n                        <React.Fragment key={index}>\r\n                          <div className=\"inputs_background\" key={index}>\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Certification Title\"\r\n                              value={inputCertificatesField.certificate}\r\n                              name=\"certificate\"\r\n                              onChange={(event) =>\r\n                                handleChangeCertificateInput(index, event)\r\n                              }\r\n                            />\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Year you were Certified\"\r\n                              value={inputCertificatesField.year}\r\n                              name=\"year\"\r\n                              onChange={(event) =>\r\n                                handleChangeCertificateInput(index, event)\r\n                              }\r\n                              type=\"number\"\r\n                            />\r\n                          </div>\r\n                          {index + 1 === inputCertificatesFields.length ? (\r\n                            <div className=\"d-flex\">\r\n                              <h5 onClick={handleAddCertificateFields}>\r\n                                + Add Certificate's\r\n                              </h5>\r\n                              {index + 1 === inputCertificatesFields.length &&\r\n                              inputCertificatesFields.length !== 1 ? (\r\n                                <h5\r\n                                  className=\"text-danger pl-3\"\r\n                                  onClick={() =>\r\n                                    handleRemoveCertificateFields(index)\r\n                                  }\r\n                                >\r\n                                  Remove\r\n                                </h5>\r\n                              ) : null}\r\n                            </div>\r\n                          ) : null}\r\n                        </React.Fragment>\r\n                      )\r\n                    )}\r\n                  </div>\r\n                  <div className=\"item4\">\r\n                    <h6>\r\n                      Are you currently enrolled in any continued education\r\n                      programs?\r\n                    </h6>\r\n                    <div className=\"inputs_experience\">\r\n                      <textarea\r\n                        type=\"text\"\r\n                        name=\"comment\"\r\n                        placeholder=\"Tell us about any awaiting certifications \"\r\n                        value={trainerbackgroundData.awaitingCertification}\r\n                        onChange={(e) =>\r\n                          setTrainerbackgroundData({\r\n                            ...trainerbackgroundData,\r\n                            awaitingCertification: e.target.value,\r\n                          })\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"item5\">\r\n                    <h6>\r\n                      Do you have a facility to train new & outside clients?\r\n                    </h6>\r\n                    <div className=\"\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                          <select\r\n                            value={currentExperience.workMode}\r\n                            name=\"workMode\"\r\n                            onChange={(e) => {\r\n                              setCurrentExperience({\r\n                                ...currentExperience,\r\n                                workMode: e.target.value,\r\n                              });\r\n                            }}\r\n                          >\r\n                            {worksMode.map((list, index) => (\r\n                              <option value={list.value} key={index}>\r\n                                {list.label}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n                          {/* <NormalMultiSelect\r\n                            placeholder=\"Select Your Answer\"\r\n                            value={currentExperience.workMode}\r\n                            arrow={true}\r\n                            name=\"workMode\"\r\n                            options={worksMode}\r\n                            handleChange={(e) => {\r\n                              setCurrentExperience({\r\n                                ...currentExperience,\r\n                                workMode: e.target.value,\r\n                              });\r\n                            }}\r\n                          /> */}\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                          {currentExperience.workMode === \"yes\" ? (\r\n                            <div className=\"inputs_experience_drop\">\r\n                              <input\r\n                                type=\"text\"\r\n                                placeholder=\"Details of facility\"\r\n                                value={currentExperience.workLocation}\r\n                                name=\"answer\"\r\n                                onChange={(e) => {\r\n                                  setCurrentExperience({\r\n                                    ...currentExperience,\r\n                                    workLocation: e.target.value,\r\n                                  });\r\n                                }}\r\n                              />\r\n                            </div>\r\n                          ) : null}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"item6\">\r\n                    <h6>Why are you interested in joining Motto?</h6>\r\n                    <div className=\"inputs_experience\">\r\n                      <textarea\r\n                        type=\"text\"\r\n                        name=\"comment\"\r\n                        placeholder=\"Tell us all about it.\"\r\n                        value={trainerbackgroundData.interestInMotto}\r\n                        onChange={(e) =>\r\n                          setTrainerbackgroundData({\r\n                            ...trainerbackgroundData,\r\n                            interestInMotto: e.target.value,\r\n                          })\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"item6\">\r\n                    <h6>\r\n                      Describe how you assess a client before their first\r\n                      session?\r\n                    </h6>\r\n                    <div className=\"inputs_experience\">\r\n                      <textarea\r\n                        type=\"text\"\r\n                        name=\"comment\"\r\n                        placeholder=\"Tell us all about it.\"\r\n                        value={trainerbackgroundData.clientAssessment}\r\n                        onChange={(e) =>\r\n                          setTrainerbackgroundData({\r\n                            ...trainerbackgroundData,\r\n                            clientAssessment: e.target.value,\r\n                          })\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"item6\">\r\n                    <h6>Describe your training process & philosophy</h6>\r\n                    <div className=\"inputs_experience\">\r\n                      <textarea\r\n                        type=\"text\"\r\n                        name=\"comment\"\r\n                        placeholder=\"Tell us all about it.\"\r\n                        value={trainerbackgroundData.trainingProcess}\r\n                        onChange={(e) =>\r\n                          setTrainerbackgroundData({\r\n                            ...trainerbackgroundData,\r\n                            trainingProcess: e.target.value,\r\n                          })\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"submit_button\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      style={{\r\n                        textDecoration: \"none\",\r\n                        color: \"#FFFFFF\",\r\n                      }}\r\n                      type=\"submit\"\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      Continue\r\n                      <ArrowHoverBlacked />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <img src={WaterMark} alt=\"icon\" className=\"bg_watermark\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  details: state.trainerReducer.details,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      updateTrainerDetailsApicall,\r\n      getTrainerDetails,\r\n      trainerDetail,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst TrainerBackground = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TrainerBackgroundFC);\r\n\r\nexport default TrainerBackground;\r\n","export default __webpack_public_path__ + \"static/media/Arrow Back.d3693c0f.svg\";","export default __webpack_public_path__ + \"static/media/Drop Down 4.50302f8e.svg\";","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = /*#__PURE__*/React.createElement(CheckBoxIcon, null);\nvar defaultIcon = /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = /*#__PURE__*/React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      iconProp = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  var icon = indeterminate ? indeterminateIconProp : iconProp;\n  var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  return /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: icon.props.fontSize === undefined && size === \"small\" ? size : icon.props.fontSize\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: indeterminateIcon.props.fontSize === undefined && size === \"small\" ? size : indeterminateIcon.props.fontSize\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);"],"sourceRoot":""}