{"version":3,"sources":["../node_modules/date-fns/esm/getDate/index.js","../node_modules/date-fns/esm/getYear/index.js","../node_modules/date-fns/esm/differenceInCalendarMonths/index.js","../node_modules/date-fns/esm/differenceInCalendarWeeks/index.js","../node_modules/date-fns/esm/startOfMonth/index.js","../node_modules/date-fns/esm/endOfWeek/index.js","../node_modules/date-fns/esm/endOfMonth/index.js","../node_modules/date-fns/esm/isSameMonth/index.js","../node_modules/date-fns/esm/isAfter/index.js","../node_modules/date-fns/esm/isBefore/index.js","../node_modules/date-fns/esm/_lib/assign/index.js","../node_modules/date-fns/esm/_lib/setUTCDay/index.js","../node_modules/date-fns/esm/parse/_lib/parsers/index.js","../node_modules/date-fns/esm/_lib/setUTCWeek/index.js","../node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","../node_modules/date-fns/esm/_lib/setUTCISODay/index.js","../node_modules/date-fns/esm/parse/index.js","../node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","../node_modules/date-fns/esm/_lib/format/formatters/index.js","../node_modules/date-fns/esm/format/index.js","../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/date-fns/esm/toDate/index.js","../node_modules/date-fns/esm/_lib/toInteger/index.js","../../src/index.tsx","../node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","../node_modules/date-fns/esm/isValid/index.js","../node_modules/date-fns/esm/subMilliseconds/index.js","../node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","../node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","../node_modules/date-fns/esm/getDaysInMonth/index.js","../node_modules/date-fns/esm/setMonth/index.js","../node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","../node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","../node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","../node_modules/date-fns/esm/addMilliseconds/index.js","../node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","../node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","../node_modules/date-fns/esm/addDays/index.js","../node_modules/date-fns/esm/addMonths/index.js","../node_modules/date-fns/esm/startOfWeek/index.js","../node_modules/date-fns/esm/differenceInCalendarDays/index.js","../node_modules/date-fns/esm/startOfDay/index.js","../node_modules/date-fns/esm/isSameDay/index.js","../node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","../node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","../node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","../node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","../node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","../node_modules/date-fns/esm/_lib/format/longFormatters/index.js","../node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","../node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","../node_modules/date-fns/esm/_lib/protectedTokens/index.js","../node_modules/date-fns/esm/addWeeks/index.js","../node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","../node_modules/date-fns/esm/locale/en-US/index.js","../node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","../node_modules/date-fns/esm/_lib/getUTCWeek/index.js","../node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","../node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","../node_modules/date-fns/esm/subMonths/index.js"],"names":["getDate","dirtyDate","requiredArgs","arguments","date","toDate","dayOfMonth","getYear","year","getFullYear","differenceInCalendarMonths","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","yearDiff","monthDiff","getMonth","MILLISECONDS_IN_WEEK","differenceInCalendarWeeks","dirtyOptions","startOfWeekLeft","startOfWeek","startOfWeekRight","timestampLeft","getTime","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","startOfMonth","setDate","setHours","endOfWeek","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","toInteger","RangeError","day","getDay","diff","endOfMonth","month","setFullYear","isSameMonth","isAfter","dirtyDateToCompare","dateToCompare","isBefore","assign","target","dirtyObject","TypeError","property","hasOwnProperty","setUTCDay","dirtyDay","currentDay","getUTCDay","remainder","dayIndex","setUTCDate","getUTCDate","numericPatterns","timezonePatterns","parseNumericPattern","pattern","string","valueCallback","matchResult","match","value","parseInt","rest","slice","length","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","twoDigitYear","currentYear","result","isCommonEra","absCurrentYear","rangeEnd","floor","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYearIndex","parsers","G","priority","parse","token","_options","era","width","set","flags","setUTCFullYear","setUTCHours","incompatibleTokens","y","isTwoDigitYear","ordinalNumber","unit","validate","_date","getUTCFullYear","normalizedTwoDigitYear","Y","getUTCWeekYear","firstWeekContainsDate","startOfUTCWeek","R","_match","_flags","firstWeekOfYear","Date","startOfUTCISOWeek","u","Q","quarter","context","setUTCMonth","q","M","L","w","dirtyWeek","week","getUTCWeek","setUTCWeek","I","dirtyISOWeek","isoWeek","getUTCISOWeek","setUTCISOWeek","d","subPriority","isLeapYear","getUTCMonth","D","E","e","wholeWeekDays","c","i","setUTCISODay","a","dayPeriod","b","B","h","isPM","getUTCHours","H","K","k","hours","m","setUTCMinutes","s","setUTCSeconds","S","pow","setUTCMilliseconds","X","timestampIsSet","x","t","_token","T","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","unescapedLatinCharacterRegExp","dirtyDateString","dirtyFormatString","dirtyReferenceDate","dateString","String","formatString","defaultLocale","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","NaN","subFnOptions","setters","dateToSystemTimezone","index","tokens","map","substring","firstCharacter","longFormatter","longFormatters","formatLong","join","usedTokens","useAdditionalWeekYearTokens","isProtectedWeekYearToken","throwProtectedError","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","parser","Array","isArray","incompatibleToken","_i","usedToken","indexOf","concat","fullToken","push","parseResult","cleanEscapedString","test","uniquePrioritySetters","setter","sort","filter","array","setterArray","isNaN","utcDate","subMilliseconds","convertedDate","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","input","replace","MILLISECONDS_IN_DAY","dayPeriodEnum","formatTimezoneShort","offset","dirtyDelimiter","sign","absOffset","abs","minutes","delimiter","addLeadingZeros","formatTimezoneWithOptionalMinutes","formatTimezone","formatters","localize","signedYear","lightFormatters","signedWeekYear","weekYear","isoWeekYear","getUTCISOWeekYear","ceil","dayOfYear","timestamp","startOfYearTimestamp","difference","getUTCDayOfYear","dayOfWeek","localDayOfWeek","isoDayOfWeek","dayPeriodEnumValue","toLowerCase","_localize","timezoneOffset","_originalDate","getTimezoneOffset","O","z","originalDate","format","dirtyFormatStr","formatStr","isValid","formatterOptions","formatter","required","args","argument","argStr","Object","prototype","toString","call","console","warn","Error","stack","dirtyNumber","number","Number","src","hoverSrc","style","disabled","onClick","className","React","useState","imageSrc","setImageSrc","mouseOver","useCallback","mouseOut","onMouseOver","onMouseOut","UTC","getHours","getMinutes","getSeconds","getMilliseconds","dirtyAmount","amount","addMilliseconds","getDaysInMonth","monthIndex","lastDayOfMonth","setMonth","dirtyMonth","dateWithDesiredMonth","daysInMonth","min","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatDistance","count","addSuffix","comparison","buildFormatLongFn","defaultWidth","formats","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","formatRelative","_baseDate","toUpperCase","numberOfDigits","milliseconds","fractionalSeconds","firstWeekOfNextYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","addDays","addMonths","endOfDesiredMonth","differenceInCalendarDays","startOfDayLeft","startOfDay","startOfDayRight","isSameDay","dateLeftStartOfDay","dateRightStartOfDay","buildMatchFn","dirtyString","matchPattern","matchPatterns","defaultMatchWidth","matchedString","parsePatterns","defaultParseWidth","predicate","key","findIndex","object","findKey","parsePattern","narrow","abbreviated","wide","any","short","am","pm","midnight","noon","morning","afternoon","evening","night","buildLocalizeFn","dirtyIndex","valuesArray","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","argumentCallback","_dirtyOptions","rem100","dateLongFormatter","timeLongFormatter","time","p","P","dateTimeFormat","datePattern","timePattern","dateTime","targetLength","output","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","protectedDayOfYearTokens","protectedWeekYearTokens","addWeeks","days","full","long","medium","code","startOfUTCWeekYear","firstWeek","startOfUTCISOWeekYear","fourthOfJanuary","subMonths"],"mappings":"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","file":"static/js/8.19e4d099.chunk.js","sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * const result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */\n\nexport default function getDate(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = date.getDate();\n  return dayOfMonth;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\n\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  return year;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);\n  var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month?\n *\n * @description\n * Are the given dates in the same month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport setUTCDay from \"../../../_lib/setUTCDay/index.js\";\nimport setUTCISODay from \"../../../_lib/setUTCISODay/index.js\";\nimport setUTCISOWeek from \"../../../_lib/setUTCISOWeek/index.js\";\nimport setUTCWeek from \"../../../_lib/setUTCWeek/index.js\";\nimport startOfUTCISOWeek from \"../../../_lib/startOfUTCISOWeek/index.js\";\nimport startOfUTCWeek from \"../../../_lib/startOfUTCWeek/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCWeek from \"../getUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCISOWeek from \"../getUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport parsers from \"./_lib/parsers/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward (toDate no longer accepts a string)\n *   toDate(1392098430000) // Unix to timestamp\n *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale // If timezone isn't specified, it will be set to the system timezone\n\n  };\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import lightFormatters from \"../lightFormatters/index.js\";\nimport getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n   * |  d  | Day of month                   |  D  | Day of year                    |\n   * |  e  | Local day of week              |  E  | Day of week                    |\n   * |  f  |                                |  F* | Day of week in month           |\n   * |  g* | Modified Julian day            |  G  | Era                            |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  i! | ISO day of week                |  I! | ISO week of year               |\n   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n   * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  n  |                                |  N  |                                |\n   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n   * |  p! | Long localized time            |  P! | Long localized date            |\n   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n   * |  u  | Extended year                  |  U* | Cyclic year                    |\n   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n   * |  w  | Local week of year             |  W* | Week of month                  |\n   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   *\n   * Letters marked by ! are non-standard, but implemented by date-fns:\n   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n   *   i.e. 7 for Sunday, 1 for Monday, etc.\n   * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n   *   `R` is supposed to be used in conjunction with `I` and `i`\n   *   for universal ISO week-numbering date, whereas\n   *   `Y` is supposed to be used in conjunction with `w` and `e`\n   *   for week-numbering date specific to the locale.\n   * - `P` is long localized date format\n   * - `p` is long localized time format\n   */\n\n};\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import React from \"react\";\n\nexport type HoverImageProps = {\n  src: string;\n  hoverSrc: string;\n  disabled?: boolean;\n  className?: string;\n  style?: any;\n  onClick?: React.MouseEventHandler;\n};\nconst HoverImage: React.FC<HoverImageProps> = ({\n  src,\n  hoverSrc,\n  style,\n  disabled,\n  onClick,\n  className,\n}) => {\n  const [imageSrc, setImageSrc] = React.useState<string>(src);\n\n  const mouseOver = React.useCallback(() => {\n    setImageSrc(hoverSrc);\n  }, []);\n\n  const mouseOut = React.useCallback(() => {\n    setImageSrc(src);\n  }, []);\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (!onClick) return;\n    if (!disabled) {\n      onClick(e);\n    }\n  };\n\n  return (\n    <img\n      src={imageSrc}\n      style={style}\n      onMouseOver={mouseOver}\n      onMouseOut={mouseOut}\n      onClick={handleClick}\n      className={className}\n    />\n  );\n};\n\nexport default HoverImage;\n","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * const result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getDaysInMonth from \"../getDaysInMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}","export default function buildFormatLongFn(args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","export default function buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = findIndex(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n}","import buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nimport buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","export default function buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index];\n  };\n}","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n};\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import toInteger from \"../toInteger/index.js\";\nimport getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}"],"sourceRoot":""}