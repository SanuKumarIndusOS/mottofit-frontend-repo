{"version":3,"sources":["component/TrainerOnBoard/TrainerBackground/index.js","assets/files/SVG/Arrow Back.svg","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js"],"names":["worksMode","label","value","TrainerBackground","connect","state","details","trainerReducer","trainerPersonalData","data","dispatch","bindActionCreators","updateTrainerDetails","getTrainerDetails","React","useState","checkedBoxing","setCheckedBoxing","checkedHIIT","setCheckedHIIT","checkedYoga","setCheckedYoga","checkedPilates","setCheckedPilates","workMode","workLocation","currentExperiencee","setCurrentExperiencee","areaOfExpertise","previousExperience","certification","clientAssessment","trainingProcess","interestInMotto","currentExperience","awaitingCertification","trainerbackgroundData","setTrainerbackgroundData","console","log","orgnization","job","years","inputFields","setInputField","certificate","year","upload","inputCertificatesFields","setinputCertificatesField","handleChangeInput","index","event","values","target","name","handleChangeCertificateInput","useEffect","Object","keys","length","tempData","className","src","ArrowBack","alt","to","ArrowNext","checked","onChange","e","indexOf","splice","style","color","map","input","type","placeholder","onClick","inputCertificatesField","required","title","list","maxlength","textDecoration","storeData","history","push","WaterMark","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","createSvgIcon","d","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","props","ref","_props$checkedIcon","checkedIcon","classes","_props$color","_props$icon","icon","iconProp","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","indeterminateIconProp","inputProps","_props$size","size","other","_objectWithoutProperties","SwitchBase","_extends","root","clsx","concat","capitalize","disabled","fontSize","undefined","withStyles","theme","palette","text","secondary","colorPrimary","primary","main","backgroundColor","fade","action","hoverOpacity","colorSecondary"],"mappings":"8RAeMA,EAAY,CACd,CACIC,MAAO,MACPC,MAAO,OAEX,CACID,MAAO,KACPC,MAAO,OAsqBTC,EAAoBC,aAfF,SAACC,GAAD,MAAY,CAChCC,QAASD,EAAME,eAAeD,QAC9BE,oBAAqBH,EAAME,eAAeE,SAGnB,SAACC,GACxB,OAAOC,YACH,CACIC,4CACAC,uCAEJH,KAIkBN,EAlqBE,SAAC,GAAuC,IAAD,EAApCQ,EAAoC,EAApCA,qBAAsBN,EAAc,EAAdA,QACjD,EAA0CQ,IAAMC,UAAS,GAAzD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsCH,IAAMC,UAAS,GAArD,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAsCL,IAAMC,UAAS,GAArD,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA4CP,IAAMC,UAAS,GAA3D,mBAAOO,EAAP,KAAuBC,EAAvB,KAEA,EAAoDR,mBAAS,CACzDS,SAAU,GACVC,aAAc,KAFlB,mBAAOC,EAAP,KAA2BC,EAA3B,KAIA,EAA0DZ,mBAAS,CAC/Da,gBAAiB,GACjBC,mBAAoB,GACpBC,cAAe,GACfC,iBAAkB,GAClBC,gBAAiB,GACjBC,gBAAiB,GACjBC,kBAAmB,GACnBC,sBAAuB,KAR3B,mBAAOC,EAAP,KAA8BC,EAA9B,KAWAC,QAAQC,IAAIH,EAAuB,yBAEnC,MAA0CrB,mBAAS,KAAnD,mBACA,GADA,UACqCA,mBAAS,CAC1C,CACIyB,YAAa,GACbC,IAAK,GACLC,MAAO,OAJf,mBAAOC,EAAP,KAAoBC,EAApB,KAQA,EAA6D7B,mBAAS,CAClE,CACI8B,YAAa,GACbC,KAAM,GACNC,OAAQ,MAJhB,mBAAOC,EAAP,KAAgCC,EAAhC,KAOMC,GAAoB,SAACC,EAAOC,GAC9B,IAAMC,EAAM,YAAOV,GACnBU,EAAOF,GAAOC,EAAME,OAAOC,MAAQH,EAAME,OAAOpD,MAChD0C,EAAcS,GAEdf,QAAQC,IAAII,GAEZN,EAAyB,2BAClBD,GADiB,IAEpBP,mBAAoBc,MAGtBa,GAA+B,SAACL,EAAOC,GACzC,IAAMC,EAAM,YAAOL,GACnBK,EAAOF,GAAOC,EAAME,OAAOC,MAAQH,EAAME,OAAOpD,MAChD+C,EAA0BI,GAE1BhB,EAAyB,2BAClBD,GADiB,IAEpBN,cAAekB,MA4EvB,OAzBAS,qBAAU,WACN,GAAIC,OAAOC,KAAKrD,GAASsD,OAAS,EAAG,CACjC,IAAIC,EAAW,CACXjC,iBAAwB,OAAPtB,QAAO,IAAPA,OAAA,EAAAA,EAASsB,kBAAmB,GAC7CC,oBAA2B,OAAPvB,QAAO,IAAPA,OAAA,EAAAA,EAASuB,qBAAsB,GACnDC,eAAsB,OAAPxB,QAAO,IAAPA,OAAA,EAAAA,EAASuC,cAAe,GACvCd,iBAAkBzB,EAAQyB,iBAC1BC,gBAAiB1B,EAAQ0B,gBACzBC,gBAAiB3B,EAAQ2B,gBACzBE,sBAAuB7B,EAAQ6B,uBAGnC7B,EAAQ4B,mBACJP,EAAsBrB,EAAQ4B,mBAElC5B,EAAQuB,oBACJe,EAActC,EAAQuB,oBAE1BvB,EAAQwB,eACJmB,EAA0B3C,EAAQwB,eAEtCO,EAAyBwB,MAE9B,IAGC,mCACI,qBAAKC,UAAU,sBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,sBAAKA,UAAU,eAAf,UACI,qBAAKC,IAAKC,UAAWC,IAAI,SACzB,sBAAKH,UAAU,cAAf,UACI,eAAC,IAAD,CAAMI,GAAG,iBAAT,UACK,IADL,uBAIA,8BAGR,sBAAKJ,UAAU,eAAf,UACI,sBAAKA,UAAU,cAAf,UACI,cAAC,IAAD,CAAMI,GAAG,wBAAT,gCAGA,2BAEJ,qBAAKH,IAAKI,UAAWF,IAAI,eAGjC,qBAAKH,UAAU,eAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,qEAEA,sBAOA,qBAAKA,UAAU,mBAAf,SACI,iCACI,sBAAKA,UAAU,QAAf,UACI,6FAIA,sBAAKA,UAAU,oBAAf,UACI,cAAC,IAAD,CACIM,QAASlD,EACTmD,SAAU,SAACC,GAQP,GAPAnD,EACImD,EAAEhB,OAAOc,SAEb9B,QAAQC,IACJ+B,EAAEhB,OAAOc,SAGTE,EAAEhB,OAAOc,QACT/B,EAAyB,2BAEdD,GAFa,IAGhBR,gBAAgB,GAAD,mBAEJQ,EAAsBR,iBAFlB,CAGP,uBAKhBU,QAAQC,IACJH,EAAsBR,qBAEvB,CACH,IAAMuB,EACFf,EAAsBR,gBAAgB2C,QAClC,mBAGJpB,GAAS,GACTf,EAAsBR,gBAAgB4C,OAClCrB,EACA,GAGRb,QAAQC,IACJH,EAAsBR,iBAI9BU,QAAQC,IACJH,IAGRqC,MAAO,CACHC,MAAO,aAOf,qBAAKZ,UAAU,iBAAf,6BAGA,cAAC,IAAD,CACIM,QAASpD,EAETqD,SAAU,SAACC,GAQP,GAPArD,EACIqD,EAAEhB,OAAOc,SAEb9B,QAAQC,IACJ+B,EAAEhB,OAAOc,SAGTE,EAAEhB,OAAOc,QACT9B,QAAQC,IACJ,aAEJF,EAAyB,2BAEdD,GAFa,IAGhBR,gBAAgB,GAAD,mBAEJQ,EAAsBR,iBAFlB,CAGP,cAKhBU,QAAQC,IACJH,EAAsBR,qBAEvB,CACHU,QAAQC,IACJ,eAGJ,IAAMY,EACFf,EAAsBR,gBAAgB2C,QAClC,UAGJpB,GAAS,GACTf,EAAsBR,gBAAgB4C,OAClCrB,EACA,GAGRb,QAAQC,IACJH,EAAsBR,iBAI9BU,QAAQC,IACJH,IAGRqC,MAAO,CACHC,MAAO,aAGf,qBAAKZ,UAAU,iBAAf,oBAGA,cAAC,IAAD,CACIM,QAAShD,EACTiD,SAAU,SAACC,GAKP,GAJAjD,EACIiD,EAAEhB,OAAOc,SAGTE,EAAEhB,OAAOc,QACT/B,EAAyB,2BAEdD,GAFa,IAGhBR,gBAAgB,GAAD,mBAEJQ,EAAsBR,iBAFlB,CAGP,gBAIb,CACH,IAAMuB,EACFf,EAAsBR,gBAAgB2C,QAClC,QAGJpB,GAAS,GACTf,EAAsBR,gBAAgB4C,OAClCrB,EACA,KAKhBsB,MAAO,CACHC,MAAO,aAGf,qBAAKZ,UAAU,iBAAf,kBAGA,cAAC,IAAD,CACIM,QAAS9C,EACT+C,SAAU,SAACC,GAKP,GAJA/C,EACI+C,EAAEhB,OAAOc,SAGTE,EAAEhB,OAAOc,QACT/B,EAAyB,2BAEdD,GAFa,IAGhBR,gBAAgB,GAAD,mBAEJQ,EAAsBR,iBAFlB,CAGP,mBAIb,CACH,IAAMuB,EACFf,EAAsBR,gBAAgB2C,QAClC,WAGJpB,GAAS,GACTf,EAAsBR,gBAAgB4C,OAClCrB,EACA,KAKhBsB,MAAO,CACHC,MAAO,aAGf,qBAAKZ,UAAU,iBAAf,2BAKR,sBAAKA,UAAU,QAAf,UACI,qDACCnB,EAAYgC,KAAI,SAACC,EAAOzB,GACrB,OACI,sBACIW,UAAU,oBADd,UAII,uBACIe,KAAK,OACLC,YAAY,iCACZ5E,MACI0E,EAAMpC,YAEVe,KAAK,cACLc,SAAU,SAACjB,GAAD,OACNF,GACIC,EACAC,MAIZ,uBACIyB,KAAK,OACLC,YAAY,YACZ5E,MAAO0E,EAAMnC,IACbc,KAAK,MACLc,SAAU,SAACjB,GAAD,OACNF,GACIC,EACAC,MAIZ,uBACIyB,KAAK,SACLC,YAAY,QACZvB,KAAK,QACLrD,MAAO0E,EAAMlC,MACb2B,SAAU,SAACjB,GAAD,OACNF,GACIC,EACAC,QApCPD,MA4CjB,oBAAI4B,QAAS,WAvW7CnC,EAAc,GAAD,mBACND,GADM,CAET,CAAEH,YAAa,GAAIC,IAAK,GAAIC,MAAO,QAqWP,sCAWJ,sBAAKoB,UAAU,QAAf,UACI,gDACCd,EAAwB2B,KACrB,SAACK,EAAwB7B,GAAzB,OACI,sBACIW,UAAU,oBADd,UAII,uBACIe,KAAK,OACLC,YAAY,sBACZ5E,MACI8E,EAAuBnC,YAE3BU,KAAK,cACLc,SAAU,SAACjB,GAAD,OACNI,GACIL,EACAC,MAIZ,uBACIyB,KAAK,OACLC,YAAY,0BACZ5E,MACI8E,EAAuBlC,KAE3BS,KAAK,OACLc,SAAU,SAACjB,GAAD,OACNI,GACIL,EACAC,QA1BPD,MAkCjB,oBACI4B,QArZL,WAC/B9B,EAA0B,GAAD,mBAClBD,GADkB,CAErB,CAAEH,YAAa,GAAIC,KAAM,GAAIC,OAAQ,OAGzCT,QAAQC,IAAIS,IA8YoB,oCAMJ,sBAAKc,UAAU,QAAf,UACI,iGAIA,qBAAKA,UAAU,oBAAf,SACI,0BACIe,KAAK,OACLtB,KAAK,UACLuB,YAAY,6CACZ5E,MACIkC,EAAsBD,sBAE1BkC,SAAU,SAACC,GAAD,OACNjC,EAAyB,2BAClBD,GADiB,IAEpBD,sBACImC,EAAEhB,OAAOpD,iBAMjC,sBAAK4D,UAAU,QAAf,UACI,wFAIA,sBAAKA,UAAU,yBAAf,UACI,cAAC,WAAD,CACImB,UAAQ,EACRnB,UAAU,kBACVoB,MAAM,qBACNC,KAAMnF,EACNE,MACIwB,EAAmBF,SAEvB6C,SAAU,SAACC,GACP3C,EAAsB,2BACfD,GADc,IAEjBF,SAAU8C,EAAEpE,YAOxB,QADCwB,EAAmBF,SAEhB,mCACI,uBACIqD,KAAK,OACLC,YAAY,sBACZ5E,MACIwB,EAAmBD,aAEvB8B,KAAK,SACLc,SAAU,SAACC,GACP3C,EAAsB,2BAEXD,GAFU,IAGbD,aACI6C,EAAEhB,OACGpD,SAGjBmC,EAAyB,2BAEdD,GAFa,IAGhBF,kBACIR,UAMxB,WAGZ,sBAAKoC,UAAU,QAAf,UACI,0EAIA,qBAAKA,UAAU,oBAAf,SACI,0BACIsB,UAAU,MACVP,KAAK,OACLtB,KAAK,UACLuB,YAAY,kDACZ5E,MACIkC,EAAsBH,gBAE1BoC,SAAU,SAACC,GAAD,OACNjC,EAAyB,2BAClBD,GADiB,IAEpBH,gBACIqC,EAAEhB,OAAOpD,iBAMjC,sBAAK4D,UAAU,QAAf,UACI,8FAIA,qBAAKA,UAAU,oBAAf,SACI,0BACIe,KAAK,OACLtB,KAAK,UACL6B,UAAU,MACVN,YAAY,kDACZ5E,MACIkC,EAAsBL,iBAE1BsC,SAAU,SAACC,GAAD,OACNjC,EAAyB,2BAClBD,GADiB,IAEpBL,iBACIuC,EAAEhB,OAAOpD,iBAMjC,sBAAK4D,UAAU,QAAf,UACI,6EAIA,qBAAKA,UAAU,oBAAf,SACI,0BACIe,KAAK,OACLtB,KAAK,UACL6B,UAAU,MACVN,YAAY,kDACZ5E,MACIkC,EAAsBJ,gBAE1BqC,SAAU,SAACC,GAAD,OACNjC,EAAyB,2BAClBD,GADiB,IAEpBJ,gBACIsC,EAAEhB,OAAOpD,iBAOjC,qBAAK4D,UAAU,gBAAf,SACI,4BACIe,KAAK,SACLJ,MAAO,CACHY,eAAgB,OAChBX,MAAO,YAJf,qBAMS,UANT,yBAniBf,WACjB,IAAMY,EAAY,CACdhF,QAAQ,2BACDA,GADA,IAEHsB,gBAAiBQ,EAAsBR,gBACvCC,mBAAoBO,EAAsBP,mBAC1CC,cAAeM,EAAsBN,cACrCC,iBAAkBK,EAAsBL,iBACxCC,gBAAiBI,EAAsBJ,gBACvCC,gBAAiBG,EAAsBH,gBACvCC,kBAAmBR,EACnBS,sBACIC,EAAsBD,yBAIlCvB,EAAqB0E,GAErBC,UAAQC,KAAR,4BAihBgC,qCAUI,cAAC,UAAD,MAVJ,gBAiBpB,qBAAKzB,IAAK0B,UAAWxB,IAAI,OAAOH,UAAU,2BA2B/C3D,a,iCCjsBf,OAAe,cAA0B,wC,uICI1B,SAASuF,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYvC,OAAOqC,GAAO,OAAOH,MAAMM,KAAKH,GFIvD,CAAgBJ,IAAQ,OAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE,K,8FIC/EC,cAA4BvF,gBAAoB,OAAQ,CACrEwF,EAAG,+FACD,wBCFWD,cAA4BvF,gBAAoB,OAAQ,CACrEwF,EAAG,wIACD,Y,SCFWD,cAA4BvF,gBAAoB,OAAQ,CACrEwF,EAAG,kGACD,yB,kBCwDAC,EAAkCzF,gBAAoB0F,EAAc,MACpEC,EAA2B3F,gBAAoB4F,EAA0B,MACzEC,EAAwC7F,gBAAoB8F,EAA2B,MACvFC,EAAwB/F,cAAiB,SAAkBgG,EAAOC,GACpE,IAAIC,EAAqBF,EAAMG,YAC3BA,OAAqC,IAAvBD,EAAgCT,EAAqBS,EACnEE,EAAUJ,EAAMI,QAChBC,EAAeL,EAAMpC,MACrBA,OAAyB,IAAjByC,EAA0B,YAAcA,EAChDC,EAAcN,EAAMO,KACpBC,OAA2B,IAAhBF,EAAyBX,EAAcW,EAClDG,EAAuBT,EAAMU,cAC7BA,OAAyC,IAAzBD,GAA0CA,EAC1DE,EAAwBX,EAAMY,kBAC9BC,OAAkD,IAA1BF,EAAmCd,EAA2Bc,EACtFG,EAAad,EAAMc,WACnBC,EAAcf,EAAMgB,KACpBA,OAAuB,IAAhBD,EAAyB,SAAWA,EAC3CE,EAAQC,YAAyBlB,EAAO,CAAC,cAAe,UAAW,QAAS,OAAQ,gBAAiB,oBAAqB,aAAc,SAExIO,EAAOG,EAAgBG,EAAwBL,EAC/CI,EAAoBF,EAAgBG,EAAwBV,EAChE,OAAoBnG,gBAAoBmH,IAAYC,YAAS,CAC3DrD,KAAM,WACNqC,QAAS,CACPiB,KAAMC,YAAKlB,EAAQiB,KAAMjB,EAAQ,QAAQmB,OAAOC,YAAW5D,KAAU8C,GAAiBN,EAAQM,eAC9FpD,QAAS8C,EAAQ9C,QACjBmE,SAAUrB,EAAQqB,UAEpB7D,MAAOA,EACPkD,WAAYM,YAAS,CACnB,qBAAsBV,GACrBI,GACHP,KAAmBvG,eAAmBuG,EAAM,CAC1CmB,cAAkCC,IAAxBpB,EAAKP,MAAM0B,UAAmC,UAATV,EAAmBA,EAAOT,EAAKP,MAAM0B,WAEtFvB,YAA0BnG,eAAmB4G,EAAmB,CAC9Dc,cAA+CC,IAArCf,EAAkBZ,MAAM0B,UAAmC,UAATV,EAAmBA,EAAOJ,EAAkBZ,MAAM0B,WAEhHzB,IAAKA,GACJgB,OAiGUW,iBA5LK,SAAgBC,GAClC,MAAO,CAELR,KAAM,CACJzD,MAAOiE,EAAMC,QAAQC,KAAKC,WAI5B1E,QAAS,GAGTmE,SAAU,GAGVf,cAAe,GAGfuB,aAAc,CACZ,YAAa,CACXrE,MAAOiE,EAAMC,QAAQI,QAAQC,KAC7B,UAAW,CACTC,gBAAiBC,YAAKR,EAAMC,QAAQI,QAAQC,KAAMN,EAAMC,QAAQQ,OAAOC,cAEvE,uBAAwB,CACtBH,gBAAiB,iBAIvB,aAAc,CACZxE,MAAOiE,EAAMC,QAAQQ,OAAOb,WAKhCe,eAAgB,CACd,YAAa,CACX5E,MAAOiE,EAAMC,QAAQE,UAAUG,KAC/B,UAAW,CACTC,gBAAiBC,YAAKR,EAAMC,QAAQE,UAAUG,KAAMN,EAAMC,QAAQQ,OAAOC,cAEzE,uBAAwB,CACtBH,gBAAiB,iBAIvB,aAAc,CACZxE,MAAOiE,EAAMC,QAAQQ,OAAOb,cA8IF,CAChChF,KAAM,eADOmF,CAEZ7B","file":"static/js/18.969940fd.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles.scss\";\nimport { Link } from \"react-router-dom\";\nimport ArrowBack from \"../../../assets/files/SVG/Arrow Back.svg\";\nimport ArrowNext from \"../../../assets/files/SVG/Arrow Next.svg\";\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport WaterMark from \"../../../assets/files/SVG/M Watermark.svg\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { updateTrainerDetails, getTrainerDetails } from \"action/trainerAct\";\nimport { history } from \"helpers\";\nimport { Dropdown } from \"reactjs-dropdown-component\";\nimport \"./dropdown.scss\";\n\nconst worksMode = [\n    {\n        label: \"Yes\",\n        value: \"yes\",\n    },\n    {\n        label: \"No\",\n        value: \"no\",\n    },\n];\n\nconst TrainerBackgroundFC = ({ updateTrainerDetails, details }) => {\n    const [checkedBoxing, setCheckedBoxing] = React.useState(false);\n    const [checkedHIIT, setCheckedHIIT] = React.useState(false);\n    const [checkedYoga, setCheckedYoga] = React.useState(false);\n    const [checkedPilates, setCheckedPilates] = React.useState(false);\n\n    const [currentExperiencee, setCurrentExperiencee] = useState({\n        workMode: \"\",\n        workLocation: \"\",\n    });\n    const [trainerbackgroundData, setTrainerbackgroundData] = useState({\n        areaOfExpertise: [],\n        previousExperience: [],\n        certification: [],\n        clientAssessment: \"\",\n        trainingProcess: \"\",\n        interestInMotto: \"\",\n        currentExperience: \"\",\n        awaitingCertification: \"\",\n    });\n\n    console.log(trainerbackgroundData, \"trainerbackgroundData\");\n\n    const [selectedValue, setSelectedValue] = useState(\"a\");\n    const [inputFields, setInputField] = useState([\n        {\n            orgnization: \"\",\n            job: \"\",\n            years: \"\",\n        },\n    ]);\n\n    const [inputCertificatesFields, setinputCertificatesField] = useState([\n        {\n            certificate: \"\",\n            year: \"\",\n            upload: \"\",\n        },\n    ]);\n    const handleChangeInput = (index, event) => {\n        const values = [...inputFields];\n        values[index][event.target.name] = event.target.value;\n        setInputField(values);\n\n        console.log(inputFields);\n\n        setTrainerbackgroundData({\n            ...trainerbackgroundData,\n            previousExperience: inputFields,\n        });\n    };\n    const handleChangeCertificateInput = (index, event) => {\n        const values = [...inputCertificatesFields];\n        values[index][event.target.name] = event.target.value;\n        setinputCertificatesField(values);\n\n        setTrainerbackgroundData({\n            ...trainerbackgroundData,\n            certification: inputCertificatesFields,\n        });\n    };\n\n    const handleChange = (event) => {\n        setSelectedValue(event.target.value);\n    };\n\n    const handleAddFields = () => {\n        setInputField([\n            ...inputFields,\n            { orgnization: \"\", job: \"\", years: \"\" },\n        ]);\n    };\n\n    const handleAddCertificateFields = () => {\n        setinputCertificatesField([\n            ...inputCertificatesFields,\n            { certificate: \"\", year: \"\", upload: \"\" },\n        ]);\n\n        console.log(inputCertificatesFields);\n    };\n\n    // const handleRemoveFields = (index) => {\n    //     const values = [...inputFields];\n    //     values.splice(index, 1);\n    //     setInputField(values);\n    // };\n\n    const handleSubmit = () => {\n        const storeData = {\n            details: {\n                ...details,\n                areaOfExpertise: trainerbackgroundData.areaOfExpertise,\n                previousExperience: trainerbackgroundData.previousExperience,\n                certification: trainerbackgroundData.certification,\n                clientAssessment: trainerbackgroundData.clientAssessment,\n                trainingProcess: trainerbackgroundData.trainingProcess,\n                interestInMotto: trainerbackgroundData.interestInMotto,\n                currentExperience: currentExperiencee,\n                awaitingCertification:\n                    trainerbackgroundData.awaitingCertification,\n            },\n        };\n\n        updateTrainerDetails(storeData);\n\n        history.push(`/trainer/availability`);\n    };\n\n    useEffect(() => {\n        if (Object.keys(details).length > 5) {\n            let tempData = {\n                areaOfExpertise: details?.areaOfExpertise || [],\n                previousExperience: details?.previousExperience || [],\n                certification: details?.certificate || [],\n                clientAssessment: details.clientAssessment,\n                trainingProcess: details.trainingProcess,\n                interestInMotto: details.interestInMotto,\n                awaitingCertification: details.awaitingCertification,\n            };\n\n            details.currentExperience &&\n                setCurrentExperiencee(details.currentExperience);\n\n            details.previousExperience &&\n                setInputField(details.previousExperience);\n\n            details.certification &&\n                setinputCertificatesField(details.certification);\n\n            setTrainerbackgroundData(tempData);\n        }\n    }, []);\n\n    return (\n        <>\n            <div className=\"outter_container_bg\">\n                <div className=\"container\">\n                    <div className=\"links_wrapper\">\n                        <div className=\"outter_links\">\n                            <img src={ArrowBack} alt=\"icon\" />\n                            <div className=\"inner_links\">\n                                <Link to=\"/trainer/about\">\n                                    {\" \"}\n                                    Back to About You\n                                </Link>\n                                <div></div>\n                            </div>\n                        </div>\n                        <div className=\"outter_links\">\n                            <div className=\"inner_links\">\n                                <Link to=\"/trainer/availability\">\n                                    Go to Availability\n                                </Link>\n                                <div></div>\n                            </div>\n                            <img src={ArrowNext} alt=\"icon\" />\n                        </div>\n                    </div>\n                    <div className=\"main_wrapper\">\n                        <div className=\"wrapper_inneritems\">\n                            <h1>Detail out your training background</h1>\n\n                            <p>\n                                {/* We want to know it all! Share with us your\n                                experience & philosophy as a trainer to progress\n                                in your application process and join the Motto\n                                Family.{\" \"} */}\n                            </p>\n\n                            <div className=\"contents_wrapper\">\n                                <form>\n                                    <div className=\"item1\">\n                                        <h6>\n                                            Tell us what you train! Select all\n                                            the verticals that apply\n                                        </h6>\n                                        <div className=\"inputs_experience\">\n                                            <Checkbox\n                                                checked={checkedHIIT}\n                                                onChange={(e) => {\n                                                    setCheckedHIIT(\n                                                        e.target.checked\n                                                    );\n                                                    console.log(\n                                                        e.target.checked\n                                                    );\n\n                                                    if (e.target.checked) {\n                                                        setTrainerbackgroundData(\n                                                            {\n                                                                ...trainerbackgroundData,\n                                                                areaOfExpertise:\n                                                                    [\n                                                                        ...trainerbackgroundData.areaOfExpertise,\n                                                                        \"Strength & HIIT\",\n                                                                    ],\n                                                            }\n                                                        );\n\n                                                        console.log(\n                                                            trainerbackgroundData.areaOfExpertise\n                                                        );\n                                                    } else {\n                                                        const index =\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\n                                                                \"Strength & HIIT\"\n                                                            );\n                                                        // console.log(index);\n                                                        if (index > -1) {\n                                                            trainerbackgroundData.areaOfExpertise.splice(\n                                                                index,\n                                                                1\n                                                            );\n                                                        }\n                                                        console.log(\n                                                            trainerbackgroundData.areaOfExpertise\n                                                        );\n                                                    }\n\n                                                    console.log(\n                                                        trainerbackgroundData\n                                                    );\n                                                }}\n                                                style={{\n                                                    color: \"#53BFD2\",\n                                                }}\n\n                                                // onChange={() => {\n                                                //   setCheckState(\"Strength & HIIT\");\n                                                // }}\n                                            />\n                                            <div className=\"checkbox_label\">\n                                                Strength & HIIT\n                                            </div>\n                                            <Checkbox\n                                                checked={checkedBoxing}\n                                                // checked={true}\n                                                onChange={(e) => {\n                                                    setCheckedBoxing(\n                                                        e.target.checked\n                                                    );\n                                                    console.log(\n                                                        e.target.checked\n                                                    );\n\n                                                    if (e.target.checked) {\n                                                        console.log(\n                                                            \"setBoxing\"\n                                                        );\n                                                        setTrainerbackgroundData(\n                                                            {\n                                                                ...trainerbackgroundData,\n                                                                areaOfExpertise:\n                                                                    [\n                                                                        ...trainerbackgroundData.areaOfExpertise,\n                                                                        \"Boxing\",\n                                                                    ],\n                                                            }\n                                                        );\n\n                                                        console.log(\n                                                            trainerbackgroundData.areaOfExpertise\n                                                        );\n                                                    } else {\n                                                        console.log(\n                                                            \"unsetBoxing\"\n                                                        );\n\n                                                        const index =\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\n                                                                \"Boxing\"\n                                                            );\n                                                        // console.log(index);\n                                                        if (index > -1) {\n                                                            trainerbackgroundData.areaOfExpertise.splice(\n                                                                index,\n                                                                1\n                                                            );\n                                                        }\n                                                        console.log(\n                                                            trainerbackgroundData.areaOfExpertise\n                                                        );\n                                                    }\n\n                                                    console.log(\n                                                        trainerbackgroundData\n                                                    );\n                                                }}\n                                                style={{\n                                                    color: \"#53BFD2\",\n                                                }}\n                                            />\n                                            <div className=\"checkbox_label\">\n                                                Boxing\n                                            </div>\n                                            <Checkbox\n                                                checked={checkedYoga}\n                                                onChange={(e) => {\n                                                    setCheckedYoga(\n                                                        e.target.checked\n                                                    );\n\n                                                    if (e.target.checked) {\n                                                        setTrainerbackgroundData(\n                                                            {\n                                                                ...trainerbackgroundData,\n                                                                areaOfExpertise:\n                                                                    [\n                                                                        ...trainerbackgroundData.areaOfExpertise,\n                                                                        \"Yoga\",\n                                                                    ],\n                                                            }\n                                                        );\n                                                    } else {\n                                                        const index =\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\n                                                                \"Yoga\"\n                                                            );\n                                                        // console.log(index);\n                                                        if (index > -1) {\n                                                            trainerbackgroundData.areaOfExpertise.splice(\n                                                                index,\n                                                                1\n                                                            );\n                                                        }\n                                                    }\n                                                }}\n                                                style={{\n                                                    color: \"#53BFD2\",\n                                                }}\n                                            />\n                                            <div className=\"checkbox_label\">\n                                                Yoga\n                                            </div>\n                                            <Checkbox\n                                                checked={checkedPilates}\n                                                onChange={(e) => {\n                                                    setCheckedPilates(\n                                                        e.target.checked\n                                                    );\n\n                                                    if (e.target.checked) {\n                                                        setTrainerbackgroundData(\n                                                            {\n                                                                ...trainerbackgroundData,\n                                                                areaOfExpertise:\n                                                                    [\n                                                                        ...trainerbackgroundData.areaOfExpertise,\n                                                                        \"Pilates\",\n                                                                    ],\n                                                            }\n                                                        );\n                                                    } else {\n                                                        const index =\n                                                            trainerbackgroundData.areaOfExpertise.indexOf(\n                                                                \"Pilates\"\n                                                            );\n                                                        // console.log(index);\n                                                        if (index > -1) {\n                                                            trainerbackgroundData.areaOfExpertise.splice(\n                                                                index,\n                                                                1\n                                                            );\n                                                        }\n                                                    }\n                                                }}\n                                                style={{\n                                                    color: \"#53BFD2\",\n                                                }}\n                                            />\n                                            <div className=\"checkbox_label\">\n                                                Pilates\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"item2\">\n                                        <h6>Training experience</h6>\n                                        {inputFields.map((input, index) => {\n                                            return (\n                                                <div\n                                                    className=\"inputs_experience\"\n                                                    key={index}\n                                                >\n                                                    <input\n                                                        type=\"text\"\n                                                        placeholder=\"Name of the organization / GYM\"\n                                                        value={\n                                                            input.orgnization\n                                                        }\n                                                        name=\"orgnization\"\n                                                        onChange={(event) =>\n                                                            handleChangeInput(\n                                                                index,\n                                                                event\n                                                            )\n                                                        }\n                                                    />\n                                                    <input\n                                                        type=\"text\"\n                                                        placeholder=\"Job Title\"\n                                                        value={input.job}\n                                                        name=\"job\"\n                                                        onChange={(event) =>\n                                                            handleChangeInput(\n                                                                index,\n                                                                event\n                                                            )\n                                                        }\n                                                    />\n                                                    <input\n                                                        type=\"number\"\n                                                        placeholder=\"Years\"\n                                                        name=\"years\"\n                                                        value={input.years}\n                                                        onChange={(event) =>\n                                                            handleChangeInput(\n                                                                index,\n                                                                event\n                                                            )\n                                                        }\n                                                    />\n                                                </div>\n                                            );\n                                        })}\n\n                                        <h5 onClick={() => handleAddFields()}>\n                                            + Add Work Experience\n                                        </h5>\n                                        {/* {inputFields ? (\n                                        <span\n                                            onClick={() => handleRemoveFields()}\n                                        >\n                                            Remove\n                                        </span>\n                                    ) : null} */}\n                                    </div>\n                                    <div className=\"item3\">\n                                        <h6>Certifications</h6>\n                                        {inputCertificatesFields.map(\n                                            (inputCertificatesField, index) => (\n                                                <div\n                                                    className=\"inputs_background\"\n                                                    key={index}\n                                                >\n                                                    <input\n                                                        type=\"text\"\n                                                        placeholder=\"Certification Title\"\n                                                        value={\n                                                            inputCertificatesField.certificate\n                                                        }\n                                                        name=\"certificate\"\n                                                        onChange={(event) =>\n                                                            handleChangeCertificateInput(\n                                                                index,\n                                                                event\n                                                            )\n                                                        }\n                                                    />\n                                                    <input\n                                                        type=\"text\"\n                                                        placeholder=\"Year you were Certified\"\n                                                        value={\n                                                            inputCertificatesField.year\n                                                        }\n                                                        name=\"year\"\n                                                        onChange={(event) =>\n                                                            handleChangeCertificateInput(\n                                                                index,\n                                                                event\n                                                            )\n                                                        }\n                                                    />\n                                                </div>\n                                            )\n                                        )}\n\n                                        <h5\n                                            onClick={handleAddCertificateFields}\n                                        >\n                                            + Add Certificate's\n                                        </h5>\n                                    </div>\n                                    <div className=\"item4\">\n                                        <h6>\n                                            Are you currently enrolled in any\n                                            continued education programs?\n                                        </h6>\n                                        <div className=\"inputs_experience\">\n                                            <textarea\n                                                type=\"text\"\n                                                name=\"comment\"\n                                                placeholder=\"Tell us about any awaiting certifications \"\n                                                value={\n                                                    trainerbackgroundData.awaitingCertification\n                                                }\n                                                onChange={(e) =>\n                                                    setTrainerbackgroundData({\n                                                        ...trainerbackgroundData,\n                                                        awaitingCertification:\n                                                            e.target.value,\n                                                    })\n                                                }\n                                            />\n                                        </div>\n                                    </div>\n                                    <div className=\"item5\">\n                                        <h6>\n                                            Do you have a facility to train new\n                                            & outside clients?\n                                        </h6>\n                                        <div className=\"inputs_experience_drop\">\n                                            <Dropdown\n                                                required\n                                                className=\"select_location\"\n                                                title=\"Select Your Answer\"\n                                                list={worksMode}\n                                                value={\n                                                    currentExperiencee.workMode\n                                                }\n                                                onChange={(e) => {\n                                                    setCurrentExperiencee({\n                                                        ...currentExperiencee,\n                                                        workMode: e.value,\n                                                    });\n\n                                                    // setTrainerbackgroundData({...trainerbackgroundData, currentExperience: currentExperiencee})\n                                                }}\n                                            />\n                                            {currentExperiencee.workMode ===\n                                            \"yes\" ? (\n                                                <>\n                                                    <input\n                                                        type=\"text\"\n                                                        placeholder=\"Details of facility\"\n                                                        value={\n                                                            currentExperiencee.workLocation\n                                                        }\n                                                        name=\"answer\"\n                                                        onChange={(e) => {\n                                                            setCurrentExperiencee(\n                                                                {\n                                                                    ...currentExperiencee,\n                                                                    workLocation:\n                                                                        e.target\n                                                                            .value,\n                                                                }\n                                                            );\n                                                            setTrainerbackgroundData(\n                                                                {\n                                                                    ...trainerbackgroundData,\n                                                                    currentExperience:\n                                                                        currentExperiencee,\n                                                                }\n                                                            );\n                                                        }}\n                                                    />\n                                                </>\n                                            ) : null}\n                                        </div>\n                                    </div>\n                                    <div className=\"item6\">\n                                        <h6>\n                                            Why are you interested in joining\n                                            Motto?\n                                        </h6>\n                                        <div className=\"inputs_experience\">\n                                            <textarea\n                                                maxlength=\"150\"\n                                                type=\"text\"\n                                                name=\"comment\"\n                                                placeholder=\"Tell us all about it in not more than 150 words\"\n                                                value={\n                                                    trainerbackgroundData.interestInMotto\n                                                }\n                                                onChange={(e) =>\n                                                    setTrainerbackgroundData({\n                                                        ...trainerbackgroundData,\n                                                        interestInMotto:\n                                                            e.target.value,\n                                                    })\n                                                }\n                                            />\n                                        </div>\n                                    </div>\n                                    <div className=\"item6\">\n                                        <h6>\n                                            Describe how you assess a client\n                                            before their first session?\n                                        </h6>\n                                        <div className=\"inputs_experience\">\n                                            <textarea\n                                                type=\"text\"\n                                                name=\"comment\"\n                                                maxlength=\"150\"\n                                                placeholder=\"Tell us all about it in not more than 150 words\"\n                                                value={\n                                                    trainerbackgroundData.clientAssessment\n                                                }\n                                                onChange={(e) =>\n                                                    setTrainerbackgroundData({\n                                                        ...trainerbackgroundData,\n                                                        clientAssessment:\n                                                            e.target.value,\n                                                    })\n                                                }\n                                            />\n                                        </div>\n                                    </div>\n                                    <div className=\"item6\">\n                                        <h6>\n                                            Describe your training process &\n                                            philosophy\n                                        </h6>\n                                        <div className=\"inputs_experience\">\n                                            <textarea\n                                                type=\"text\"\n                                                name=\"comment\"\n                                                maxlength=\"150\"\n                                                placeholder=\"Tell us all about it in not more than 150 words\"\n                                                value={\n                                                    trainerbackgroundData.trainingProcess\n                                                }\n                                                onChange={(e) =>\n                                                    setTrainerbackgroundData({\n                                                        ...trainerbackgroundData,\n                                                        trainingProcess:\n                                                            e.target.value,\n                                                    })\n                                                }\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <div className=\"submit_button\">\n                                        <button\n                                            type=\"submit\"\n                                            style={{\n                                                textDecoration: \"none\",\n                                                color: \"#FFFFFF\",\n                                            }}\n                                            type=\"submit\"\n                                            onClick={handleSubmit}\n                                        >\n                                            Continue\n                                            <ArrowHoverBlacked />\n                                        </button>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <img src={WaterMark} alt=\"icon\" className=\"bg_watermark\" />\n                </div>\n            </div>\n        </>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    details: state.trainerReducer.details,\n    trainerPersonalData: state.trainerReducer.data,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators(\n        {\n            updateTrainerDetails,\n            getTrainerDetails,\n        },\n        dispatch\n    );\n};\n\nconst TrainerBackground = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TrainerBackgroundFC);\n\nexport default TrainerBackground;\n","export default __webpack_public_path__ + \"static/media/Arrow Back.eda9c053.svg\";","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = /*#__PURE__*/React.createElement(CheckBoxIcon, null);\nvar defaultIcon = /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = /*#__PURE__*/React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      iconProp = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  var icon = indeterminate ? indeterminateIconProp : iconProp;\n  var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  return /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: icon.props.fontSize === undefined && size === \"small\" ? size : icon.props.fontSize\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: indeterminateIcon.props.fontSize === undefined && size === \"small\" ? size : indeterminateIcon.props.fontSize\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);"],"sourceRoot":""}