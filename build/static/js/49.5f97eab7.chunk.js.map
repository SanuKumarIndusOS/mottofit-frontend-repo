{"version":3,"sources":["component/TrainerSignUp/Banner/index.js","component/TrainerSignUp/Banner/useForm.js","component/TrainerSignUp/Banner/validation.js","assets/files/SignUp/Phone Icon.svg"],"names":["BannerTrainer","connect","dispatch","bindActionCreators","loginOrSignupAct","loginOrSignUp","submitForm","history","useHistory","useForm","validateInfo","data","handleFormSubmit","error","setData","onChangeValue","e","persist","target","name","value","useState","passwordShown","setPasswordShown","confirmPasswordShown","setConfirmPasswordShown","apiError","setApiError","register","errors","handleSubmit","watch","a","payload","email","password","cpassword","phoneNumber","signUpType","console","log","trainerSignUp","AuthApi","Object","keys","length","then","push","catch","message","className","onSubmit","placeholder","type","onChange","src","Person","alt","Mail","Phone","Password","onClick","to","validate","callback","setError","preventDefault","errorData","validation","values","test"],"mappings":"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","file":"static/js/49.5f97eab7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles.scss\";\r\nimport Person from \"../../../assets/files/SignUp/Person Icon.svg\";\r\nimport Mail from \"../../../assets/files/SignUp/Email Icon.svg\";\r\nimport Phone from \"../../../assets/files/SignUp/Phone Icon.svg\";\r\nimport Password from \"../../../assets/files/SignUp/Password Icon.svg\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n// import { useForm } from \"react-hook-form\";\r\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport BlueHoverButton from \"../../common/BlueArrowButton\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginOrSignUp } from \"action/authAct\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { AuthApi } from \"service/apiVariables\";\r\nimport useForm from \"./useForm\";\r\nimport validateInfo from  \"./validation\";\r\n\r\n// import PhoneFormatter from \"react-headless-phone-input/lazy\";\r\n// import PhoneInput from \"react-phone-number-input/input\";\r\n// import \"react-phone-number-input/style.css\";\r\n\r\nconst BannerTrainerFC = ({ loginOrSignupAct, submitForm }) => {\r\n    const history = useHistory();\r\n\r\n    const {data,handleFormSubmit,error,setData} = useForm(validateInfo, submitForm);\r\n\r\n    // const [data, setData] = useState({\r\n    //     name: \"\",\r\n    //     email: \"\",\r\n    //     phoneNumber: \"\",\r\n    //     password: \"\",\r\n    //     cpassword: \"\",\r\n    //     signUpType: \"email\",\r\n    // });\r\n\r\n    const onChangeValue = (e) => {\r\n        e.persist();\r\n        setData({ ...data, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const [passwordShown, setPasswordShown] = useState(false);\r\n    const [confirmPasswordShown, setConfirmPasswordShown] = useState(false);\r\n    const [apiError, setApiError] = useState(\"\");\r\n    const { register, errors, handleSubmit, watch } = useForm();\r\n    const showPassword = () => {\r\n        setPasswordShown(passwordShown ? false : true);\r\n    };\r\n    const showConfirmPassword = () => {\r\n        setConfirmPasswordShown(confirmPasswordShown ? false : true);\r\n    };\r\n\r\n    async function trainerSignUp() {\r\n        const payload = {\r\n            name: data.name,\r\n            email: data.email,\r\n            password: data.password,\r\n            cpassword: data.cpassword,\r\n            phoneNumber: data.phoneNumber,\r\n            signUpType: data.signUpType,\r\n        };\r\n        console.log(payload);\r\n\r\n        // const requestOptions = {\r\n        //   method: \"POST\",\r\n        //   headers: {\r\n        //     \"Content-Type\": \"application/json\",\r\n        //     Accept: \"application/json\",\r\n        //   },\r\n        //   body: JSON.stringify(item),\r\n        // };\r\n\r\n        \r\n\r\n        const { trainerSignUp } = AuthApi;\r\n        if(Object.keys(error).length === 0){\r\n            \r\n            loginOrSignupAct(trainerSignUp, payload)\r\n            .then(({ data }) => {\r\n                // console.log(data);\r\n              history.push(\"/trainer/about\");\r\n            })\r\n            .catch((error) => {\r\n                setApiError(error.message);\r\n            });\r\n        }\r\n\r\n\r\n        \r\n\r\n        // fetch(\"http://doodlebluelive.com:2307/v1/trainer/sign-up\", requestOptions)\r\n        //   .then(async (response) => {\r\n        //     const data = await response.json();\r\n        //     localStorage.setItem(\"user-info\", JSON.stringify(data));\r\n        //     if (response.ok) {\r\n        //     } else {\r\n        //       setApiError(\"Email already registered\", response.statusText);\r\n        //     }\r\n        //   })\r\n    }\r\n\r\n    // const handleChange = (e) => {\r\n    //     const { name, value } = e.target;\r\n    //     setData({\r\n    //         ...data,\r\n    //         [name]: value,\r\n    //     });\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"banner_container_trainer\">\r\n                <div className=\"wrapper_main container\">\r\n                    <div className=\"item_left\">\r\n                        <h2>Sign Up to be a part of the Motto Family</h2>\r\n                        <h6>\r\n                            Create an account to start the application process\r\n                            of becoming a Motto trainer in one of our live\r\n                            cities.\r\n                        </h6>\r\n                    </div>\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"item_right\">\r\n                            <div className=\"inner_wrapper \">\r\n                                <div className=\"inner_items\">\r\n                                    <h3>Train with Motto!</h3>\r\n                                    <p>\r\n                                        Sign up to apply to become a Motto\r\n                                        Trainer\r\n                                    </p>\r\n                                    <div className=\"form_items_trainer\">\r\n                                        <form onSubmit={handleFormSubmit}>\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Fullname\"\r\n                                                    type=\"text\"\r\n                                                    value={data.name}\r\n                                                    name=\"name\"\r\n                                                    onChange={onChangeValue}\r\n                                                    // ref={register({\r\n                                                    //     pattern: /^[A-Za-z_ ]+$/i,\r\n                                                    //     required: true,\r\n                                                    //     minLength: 2,\r\n                                                    // })}\r\n                                                />\r\n                                                <img src={Person} alt=\"icon\" />\r\n                                                {error.name && (\r\n                                                    <span>\r\n                                                        {error.name}\r\n                                                    </span>\r\n                                                )}\r\n                                                {/* {errors.name?.type ===\r\n                                                    \"required\" && (\r\n                                                    <span>\r\n                                                        This field is required\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.name?.type ===\r\n                                                    \"minLength\" && (\r\n                                                    <span>\r\n                                                        This field should\r\n                                                        contain more then one\r\n                                                        charater\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.name?.type ===\r\n                                                    \"pattern\" && (\r\n                                                    <span>\r\n                                                        This field accept only\r\n                                                        alphabets\r\n                                                    </span>\r\n                                                )} */}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Email\"\r\n                                                    type=\"email\"\r\n                                                    value={data.email}\r\n                                                    name=\"email\"\r\n                                                    onChange={onChangeValue}\r\n                                                    // ref={register({\r\n                                                    //     pattern: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/i,\r\n                                                    //     required: true,\r\n                                                    //     minLength: 8,\r\n                                                    // })}\r\n                                                />\r\n                                                <img src={Mail} alt=\"icon\" />\r\n                                                {error.email && (\r\n                                                    <span>\r\n                                                        {error.email}\r\n                                                    </span>\r\n                                                )}\r\n                                                {/* {errors.email?.type ===\r\n                                                    \"required\" && (\r\n                                                    <span>\r\n                                                        This field is required\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.email?.type ===\r\n                                                    \"minLength\" && (\r\n                                                    <span>\r\n                                                        Please enter a valid\r\n                                                        email address\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.email?.type ===\r\n                                                    \"pattern\" && (\r\n                                                    <span>\r\n                                                        Please enter a valid\r\n                                                        email address\r\n                                                    </span>\r\n                                                )} */}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                {/* <PhoneInput\r\n                                                    placeholder=\"Enter phone number\"\r\n                                                    value={data.phoneNumber}\r\n                                                    onChange={(e) =>\r\n                                                        setData({\r\n                                                            ...data,\r\n                                                        })\r\n                                                    }\r\n                                                    name=\"phone\"\r\n                                                    defaultCountry=\"US\"\r\n                                                /> */}\r\n                                                <input\r\n                                                    placeholder=\"Phone\"\r\n                                                    type=\"tel\"\r\n                                                    value={data.phoneNumber}\r\n                                                    name=\"phoneNumber\"\r\n                                                    onChange={onChangeValue}\r\n                                                    // ref={register({\r\n                                                    //     required: true,\r\n                                                    //     minLength: 6,\r\n                                                    //     maxLength: 11,\r\n                                                    // })}\r\n                                                />\r\n                                                <img src={Phone} alt=\"icon\" />\r\n                                                {error.phoneNumber && (\r\n                                                    <span>\r\n                                                        {\r\n                                                            error.phoneNumber\r\n                                                        }\r\n                                                    </span>\r\n                                                )}\r\n                                                {/* {errors.phoneNumber?.type ===\r\n                                                    \"required\" && (\r\n                                                    <span>\r\n                                                        This field is required\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.phoneNumber?.type ===\r\n                                                    \"minLength\" && (\r\n                                                    <span>\r\n                                                        Enter a valid number\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.phoneNumber?.type ===\r\n                                                    \"maxLength\" && (\r\n                                                    <span>\r\n                                                        This field exceed max\r\n                                                        length\r\n                                                    </span>\r\n                                                )} */}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Create Password\"\r\n                                                    type={\r\n                                                        passwordShown\r\n                                                            ? \"text\"\r\n                                                            : \"password\"\r\n                                                    }\r\n                                                    value={data.password}\r\n                                                    name=\"password\"\r\n                                                    onChange={onChangeValue}\r\n                                                    // ref={register({\r\n                                                    //     required: true,\r\n                                                    //     minLength: 6,\r\n                                                    //     maxLength: 16,\r\n                                                    //     pattern: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/,\r\n                                                    // })}\r\n                                                />\r\n                                                <img\r\n                                                    src={Password}\r\n                                                    alt=\"icon\"\r\n                                                    onClick={showPassword}\r\n                                                />\r\n                                                         {error.password && (\r\n                                                    <span>\r\n                                                        {\r\n                                                            error.password\r\n                                                        }\r\n                                                    </span>\r\n                                                )}\r\n                                                {/* {errors.password?.type ===\r\n                                                    \"required\" && (\r\n                                                    <span>\r\n                                                        This field is required\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.password?.type ===\r\n                                                    \"minLength\" && (\r\n                                                    <span>\r\n                                                        Password should be more\r\n                                                        then 6 Charcters\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.password?.type ===\r\n                                                    \"maxLength\" && (\r\n                                                    <span>\r\n                                                        This field exceed max\r\n                                                        length\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.password?.type ===\r\n                                                    \"pattern\" && (\r\n                                                    <span>\r\n                                                        Password should contain\r\n                                                        atleast one one captial\r\n                                                        letter, number and\r\n                                                        special character\r\n                                                    </span>\r\n                                                )} */}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Confirm Password\"\r\n                                                    type={\r\n                                                        confirmPasswordShown\r\n                                                            ? \"text\"\r\n                                                            : \"password\"\r\n                                                    }\r\n                                                    value={data.cpassword}\r\n                                                    name=\"cpassword\"\r\n                                                    onChange={onChangeValue}\r\n                                                    // ref={register({\r\n                                                    //     validate: (value) =>\r\n                                                    //         value ===\r\n                                                    //         watch(\"password\"),\r\n                                                    //     required: true,\r\n                                                    //     minLength: 6,\r\n                                                    //     maxLength: 16,\r\n                                                    //     pattern: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/,\r\n                                                    // })}\r\n                                                />\r\n                                                <img\r\n                                                    src={Password}\r\n                                                    alt=\"icon\"\r\n                                                    onClick={\r\n                                                        showConfirmPassword\r\n                                                    }\r\n                                                />\r\n                                                   {error.cpassword && (\r\n                                                    <span>\r\n                                                        {\r\n                                                            error.cpassword\r\n                                                        }\r\n                                                    </span>\r\n                                                )}\r\n                                                {/* {errors.cpassword?.type ===\r\n                                                    \"required\" && (\r\n                                                    <span>\r\n                                                        This field is required\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.cpassword?.type ===\r\n                                                    \"minLength\" && (\r\n                                                    <span>\r\n                                                        Password should be more\r\n                                                        then 6 Charcters\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.cpassword?.type ===\r\n                                                    \"maxLength\" && (\r\n                                                    <span>\r\n                                                        This field exceed max\r\n                                                        length\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.cpassword?.type ===\r\n                                                    \"pattern\" && (\r\n                                                    <span>\r\n                                                        Password should contain\r\n                                                        atleast one one captial\r\n                                                        letter, number and\r\n                                                        special character\r\n                                                    </span>\r\n                                                )}\r\n                                                {errors.cpassword?.type !==\r\n                                                    errors.password && (\r\n                                                    <span>\r\n                                                        The passwords do not\r\n                                                        match\r\n                                                    </span>\r\n                                                )} */}\r\n                                            </div>\r\n                                            {apiError && (\r\n                                                <span className=\"errorMessage\">\r\n                                                    {apiError}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            <div className=\"submit_button\">\r\n                                                <button type=\"submit\"\r\n                                                      onClick={trainerSignUp}\r\n                                            \r\n                                                >\r\n                                                    <p>Continue to Account</p>\r\n                                                    <ArrowHoverBlacked />\r\n                                                </button>\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                    <div className=\"login_items\">\r\n                                        <h4>Already have an account?</h4>\r\n\r\n                                        <Link to=\"/\">\r\n                                            Sign In now\r\n                                            <BlueHoverButton />\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators(\r\n        {\r\n            loginOrSignupAct: loginOrSignUp,\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst BannerTrainer = connect(null, mapDispatchToProps)(BannerTrainerFC);\r\n\r\nexport default BannerTrainer;\r\n","import { useState, useEffect} from 'react';\r\n\r\nconst useForm = (validate, callback) => {\r\n    // const [aboutTrainerData, setAboutTrainerData] = useState({\r\n    //     name:\"\",\r\n    //     location: \"\",\r\n    //     dob: \"\",\r\n    //     email: \"\",\r\n    //     gender: \"\",\r\n    //     phone: \"\",\r\n    //     websiteURL: \"\",\r\n    //     instagram: \"\",\r\n    // });\r\n\r\n\r\n   \r\n    const [data, setData] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        phoneNumber: \"\",\r\n        password: \"\",\r\n        cpassword: \"\",\r\n        signUpType: \"email\",\r\n    });\r\n    \r\n\r\n    // trainer background\r\n\r\n    // const [currentExperiencee, setCurrentExperiencee] = useState({\r\n    //     workMode: \"\",\r\n    //     workLocation: \"\",\r\n    // });\r\n    \r\n\r\n    // const [trainerbackgroundData, setTrainerbackgroundData] = useState({\r\n    //     areaOfExpertise: \"\",\r\n    //     previousExperience: [],\r\n    //     certification: [],\r\n    //     clientAssessment: \"\",\r\n    //     trainingProcess: \"\",\r\n    //     interestInMotto: \"\",\r\n    //     currentExperience: \"\",\r\n    // });\r\n\r\n    // const [inputFields, setInputField] = useState([\r\n    //     {\r\n    //         orgnization: \"\",\r\n    //         job: \"\",\r\n    //         years: \"\",\r\n    //     },\r\n    // ]);\r\n\r\n    // const [inputCertificatesFields, setinputCertificatesField] = useState([\r\n    //     {\r\n    //         certificate: \"\",\r\n    //         year: \"\",\r\n    //         upload: \"\",\r\n    //     },\r\n    // ]);\r\n\r\n    // trainer background end\r\n\r\n\r\n    // trainer avaialability\r\n\r\n    // const [trainerAvailabilityData, setTrainerAvailabilityData ] = useState({\r\n    //     hoursPerWeek: \"\",\r\n    //     preferedTrainingMode: \"Virtual\",\r\n    //     trainingFacilityLocation: \"\",\r\n    //     willingToTravel: \"0\",\r\n    //     servicableLocation: \"\",\r\n    // });\r\n\r\n    const [error, setError] = useState({\r\n        name:\"\",\r\n        email:\"\",\r\n        phoneNumber:\"\",\r\n        password:\"\",\r\n        cpassword:\"\"\r\n    })\r\n    const [isSubmit, setSubmit] = useState(false)\r\n\r\n    // const handleChange = e => {\r\n    //     const { name, value} = e.target\r\n    //     setAboutTrainerData({\r\n    //         ...aboutTrainerData,\r\n    //         [name]:value\r\n    //     })\r\n    // }\r\n    const handleFormSubmit = e => {\r\n      \r\n        e.preventDefault();\r\n\r\n         const errorData = validate(data);\r\n         setError(errorData)\r\n        // setSubmit(true)\r\n        console.log(data);\r\n        console.log(errorData);\r\n        console.log(error);\r\n        console.log(setError);\r\n        \r\n        \r\n    }\r\n\r\n    // const handleTrainerBackgroundData = e => {\r\n    //     e.preventDefault();\r\n    //     setError(validate(trainerbackgroundData))\r\n    //     setSubmit(true)\r\n    // }\r\n\r\n    // const handleTrainerAvailability = e => {\r\n    //     e.preventDefault();\r\n    //     setError(validate(trainerAvailabilityData))\r\n    //     setSubmit(true)\r\n    // }\r\n\r\n// trainer background\r\n\r\n    // const handleChangeInput = (index, event) => {\r\n    //     const values = [...inputFields];\r\n    //     values[index][event.target.name] = event.target.value;\r\n    //     setInputField(values);\r\n\r\n    //     console.log(inputFields);\r\n\r\n    //     setTrainerbackgroundData({\r\n    //         ...trainerbackgroundData,\r\n    //         previousExperience: inputFields,\r\n    //     });\r\n    // };\r\n\r\n    // const handleAddCertificateFields = () => {\r\n    //     setinputCertificatesField([\r\n    //         ...inputCertificatesFields,\r\n    //         { certificate: \"\", year: \"\", upload: \"\" },\r\n    //     ]);\r\n\r\n    //     console.log(inputCertificatesFields);\r\n    // };\r\n\r\n    // const handleChangeCertificateInput = (index, event) => {\r\n    //     const values = [...inputCertificatesFields];\r\n    //     values[index][event.target.name] = event.target.value;\r\n    //     setinputCertificatesField(values);\r\n\r\n    //     // console.log(inputCertificatesFields);\r\n    //     setTrainerbackgroundData({\r\n    //         ...trainerbackgroundData,\r\n    //         certification: inputCertificatesFields,\r\n    //     });\r\n    // };\r\n\r\n    \r\n    // const handleChangeExperience = (e) => {\r\n    //     setCurrentExperiencee({\r\n    //         ...currentExperiencee,\r\n    //         workMode:\r\n    //             e.target.value,\r\n    //     });\r\n\r\n        \r\n    // const handleAddFields = () => {\r\n    //     setInputField([\r\n    //         ...inputFields,\r\n    //         { orgnization: \"\", job: \"\", years: \"\" },\r\n    //     ]);\r\n    // };\r\n\r\n    // trainer background\r\n\r\n\r\n    // useEffect(()=>{\r\n    //     if(Object.keys(error).length === 0 && \r\n    //     isSubmit) {\r\n    //         callback();\r\n    //     }\r\n    // }, [error])}\r\n    return {data, handleFormSubmit, error,setData }\r\n}\r\nexport default useForm;\r\n\r\n","const validation = ( values) => {\r\n    let errors = {} ;\r\n\r\n    if(!values.name){\r\n        errors.name='This field is required'\r\n    }\r\n    else if(values.name.length <= 1){\r\n        errors.name='This field should contain more than one character'\r\n    }\r\n        //  } else if(!/^([a-z']+(-| )?)+$/i.test(values.name)){\r\n    //      errors.name=\" Enter a valid name\"\r\n    //  }\r\n     else if(!/^[a-zA-Z]+\\s[a-zA-Z]+\\s?$/g.test(values.name)){\r\n        errors.name=\" Enter a valid name\"\r\n    }\r\n\r\n\r\n   // ^([a-zA-Z]{2,}\\s[a-zA-Z]{1,}'?-?[a-zA-Z]{2,}\\s?([a-zA-Z]{1,})?)\r\n   // else if(!/^[A-Za-z_ ]+$/i.test(values.name)){\r\n    //     errors.name=\" This field accept only alphabets\"\r\n    // }\r\n\r\n    // else if(!/^([a-z']+(-| )?)+$/i.test(values.name)){\r\n    //     errors.name=\" Enter a valid name\"\r\n    // }\r\n   //   ^\\s*([A-Za-z]{1,}([\\.,] |[-']| ))+[A-Za-z]+\\.?\\s*$\r\n    \r\n\r\n    if(!values.email){\r\n        errors.email = '   This field is required'\r\n    }else if(!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/i.test(values.email)){\r\n        errors.email = ' Please enter a valid email address'\r\n    }else if(values.email.length < 8) {\r\n        errors.email = \" This field should contain greater then 8 charater\"\r\n    }\r\n\r\n    if(!values.phoneNumber){\r\n        errors.phoneNumber = '   This field is required'\r\n    }    else if(!/^[0-9]*$/i.test(values.phoneNumber)){\r\n            errors.phoneNumber = 'Invalid Number'\r\n    }\r\n    else if(values.phoneNumber.length < 10){\r\n        errors.phoneNumber = 'Enter a valid number'\r\n    } else if (values.phoneNumber.length  >= 11) {\r\n        errors.phoneNumber = \" This field exceed max length\"\r\n    }\r\n    //  else if(!/^[0-9]*$/i.test(values.phone)){\r\n    //     errors.phoneNumber = 'Invalid Number'\r\n\r\n    // else if(!/^\\+(?:[0-9]●?){6,14}[0-9]$/i.test(values.phoneNumber)){\r\n    //     errors.phoneNumber = 'Invalid Number'\r\n    \r\n\r\n\r\n    \r\n\r\n    if(!values.password){\r\n        errors.password='This field is required'\r\n    }else if(values.password.length < 6){\r\n        errors.password=' Password should be more then 6 Charcters'\r\n    } else if (values.password.length > 16){\r\n        errors.password = \" This field exceed max length\"\r\n    } else if (!/^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/.test(values.password)){\r\n        errors.password=\" Password should contain atleast one one captial letter, number and special character\"\r\n    }\r\n    \r\n    if(!values.cpassword){\r\n        errors.cpassword='This field is required'\r\n    }else if(values.cpassword.length < 6){\r\n        errors.cpassword=' Password should be more then 6 Charcters'\r\n    } else if (values.cpassword.length > 16){\r\n        errors.cpassword = \" This field exceed max length\"\r\n    } else if (!/^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/.test(values.cpassword)){\r\n        errors.cpassword=\" Password should contain atleast one one captial letter, number and special character\"\r\n    } else if ( values.password !== values.cpassword){\r\n        errors.cpassword=\"  The passwords do not match\"\r\n    }\r\n   \r\n\r\n    return errors;\r\n}\r\n\r\nexport default validation;\r\n","export default __webpack_public_path__ + \"static/media/Phone Icon.f207d1b4.svg\";"],"sourceRoot":""}