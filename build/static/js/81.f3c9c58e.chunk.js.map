{"version":3,"sources":["component/TrainerSignUp/Banner/index.js","assets/files/SignUp/Phone Icon.svg"],"names":["BannerTrainer","connect","dispatch","bindActionCreators","loginOrSignupAct","loginOrSignUp","history","submitForm","useHistory","useState","name","email","phoneNumber","password","cpassword","signUpType","data","setData","error","setErrors","onChangeValue","e","persist","target","value","tempErrors","undefined","passwordShown","setPasswordShown","confirmPasswordShown","setConfirmPasswordShown","apiError","setApiError","handleSubmit","a","preventDefault","payload","validateFields","trainerSignUp","AuthApi","then","push","catch","message","fieldInvalidList","validate","passwordValidation","format","pattern","flags","length","minimum","tooShort","maximum","tooLong","presence","allowEmpty","equality","attribute","comparator","v1","v2","JSON","stringify","validationRules","errors","console","log","className","onSubmit","placeholder","type","onChange","src","Person","alt","Mail","disableDropdown","countryCodeEditable","country","inputProps","Phone","Password","onClick","to"],"mappings":"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","file":"static/js/81.f3c9c58e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles.scss\";\r\nimport Person from \"../../../assets/files/SignUp/Person Icon.svg\";\r\nimport Mail from \"../../../assets/files/SignUp/Email Icon.svg\";\r\nimport Phone from \"../../../assets/files/SignUp/Phone Icon.svg\";\r\nimport Password from \"../../../assets/files/SignUp/Password Icon.svg\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport BlueHoverButton from \"../../common/BlueArrowButton\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginOrSignUp } from \"action/authAct\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { AuthApi } from \"service/apiVariables\";\r\n// import useForm from \"./useForm\";\r\n// import validateInfo from \"./validation\";\r\nimport ReactPhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport validate from \"service/validation\";\r\n\r\nconst BannerTrainerFC = ({ loginOrSignupAct, submitForm }) => {\r\n    const history = useHistory();\r\n\r\n    const [data, setData] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        phoneNumber: \"\",\r\n        password: \"\",\r\n        cpassword: \"\",\r\n        signUpType: \"email\",\r\n    });\r\n\r\n    const [error, setErrors] = useState({});\r\n\r\n    // const { data, handleFormSubmit, error, setData, dataSubmit } = useForm(\r\n    //     validateInfo,\r\n    //     submitForm\r\n    // );\r\n\r\n    const onChangeValue = (e) => {\r\n        e.persist && e.persist();\r\n        const { name, value } = e.target || e || {};\r\n\r\n        let tempErrors = { ...error };\r\n\r\n        tempErrors[name] = undefined;\r\n        setData({ ...data, [name]: value });\r\n        setErrors({ ...error, ...tempErrors });\r\n    };\r\n\r\n    const [passwordShown, setPasswordShown] = useState(false);\r\n    const [confirmPasswordShown, setConfirmPasswordShown] = useState(false);\r\n    const [apiError, setApiError] = useState(\"\");\r\n    const showPassword = () => {\r\n        setPasswordShown(passwordShown ? false : true);\r\n    };\r\n    const showConfirmPassword = () => {\r\n        setConfirmPasswordShown(confirmPasswordShown ? false : true);\r\n    };\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n        const payload = {\r\n            name: data.name,\r\n            email: data.email,\r\n            password: data.password,\r\n            cpassword: data.cpassword,\r\n            phoneNumber: data.phoneNumber,\r\n            signUpType: data.signUpType,\r\n        };\r\n\r\n        if (!validateFields(payload)) return;\r\n\r\n        const { trainerSignUp } = AuthApi;\r\n        // console.log(payload);\r\n\r\n        // if (dataSubmit) {\r\n        loginOrSignupAct(trainerSignUp, payload)\r\n            .then(({ data }) => {\r\n                history.push(\"/trainer/about\");\r\n            })\r\n            .catch((error) => {\r\n                setApiError(error.message);\r\n            });\r\n        // }\r\n    }\r\n\r\n    const validationRules = () => {\r\n        let passwordValidation = {\r\n            format: {\r\n                pattern:\r\n                    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!_#%*?&])[A-Za-z\\d@_#$!%*?&]*$/,\r\n                flags: \"i\",\r\n                message:\r\n                    \"^Password must contain at least one uppercase letter, one lowercase letter, one number and one special character\",\r\n            },\r\n            length: {\r\n                minimum: 8,\r\n                tooShort: \"must contain alteast 8 character\",\r\n                maximum: 12,\r\n                tooLong: \"must contain less than 12 character\",\r\n            },\r\n        };\r\n        return {\r\n            name: {\r\n                presence: {\r\n                    allowEmpty: false,\r\n                    message: \"^Name is required\",\r\n                },\r\n                format: {\r\n                    pattern: /^[a-zA-Z ]*$/,\r\n                    flags: \"i\",\r\n                    message: \"^Enter a valid name\",\r\n                },\r\n                length: {\r\n                    minimum: 3,\r\n                    tooShort: \"must contain alteast 3 character\",\r\n                    maximum: 35,\r\n                    tooLong: \"must contain less than 35 character\",\r\n                },\r\n            },\r\n            phoneNumber: {\r\n                presence: {\r\n                    allowEmpty: false,\r\n                    message: \"^Phone number is required\",\r\n                },\r\n                format: {\r\n                    pattern: /^[1-9][0-9]*$/,\r\n                    flags: \"i\",\r\n                    message: \"^Invalid number\",\r\n                },\r\n                length: {\r\n                    minimum: 8,\r\n                    tooShort: \"Invalid number\",\r\n                    maximum: 15,\r\n                    tooLong: \"Invalid number\",\r\n                },\r\n            },\r\n            email: {\r\n                presence: {\r\n                    allowEmpty: false,\r\n                    message: \"^Email is required\",\r\n                },\r\n                email: true,\r\n            },\r\n            password: {\r\n                presence: {\r\n                    allowEmpty: false,\r\n                    message: \"^Password is required\",\r\n                },\r\n                ...passwordValidation,\r\n            },\r\n            cpassword: {\r\n                presence: {\r\n                    allowEmpty: false,\r\n                    message: \"^Confirm password is required\",\r\n                },\r\n                equality: {\r\n                    attribute: \"password\",\r\n                    message: \"^Passwords doesn't match\",\r\n                    comparator: function (v1, v2) {\r\n                        return JSON.stringify(v1) === JSON.stringify(v2);\r\n                    },\r\n                },\r\n                ...passwordValidation,\r\n            },\r\n        };\r\n    };\r\n\r\n    const validateFields = (data) => {\r\n        let fieldInvalidList = validate(data, validationRules());\r\n\r\n        if (fieldInvalidList !== undefined) {\r\n            let errors = {\r\n                ...fieldInvalidList,\r\n            };\r\n\r\n            console.log(errors);\r\n            setErrors({ ...errors, ...fieldInvalidList });\r\n        }\r\n\r\n        return !fieldInvalidList;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"banner_container_trainer\">\r\n                <div className=\"wrapper_main container\">\r\n                    <div className=\"item_left\">\r\n                        <h2>Sign Up to be a part of the Motto Family</h2>\r\n                        <h6>\r\n                            Create an account to start the application process\r\n                            of becoming a Motto trainer in one of our live\r\n                            cities.\r\n                        </h6>\r\n                    </div>\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"item_right\">\r\n                            <div className=\"inner_wrapper \">\r\n                                <div className=\"inner_items\">\r\n                                    <h3>Train with Motto!</h3>\r\n                                    <p>\r\n                                        Sign up to apply to become a Motto\r\n                                        Trainer\r\n                                    </p>\r\n                                    <div className=\"form_items_trainer\">\r\n                                        <form onSubmit={handleSubmit}>\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Full Name\"\r\n                                                    type=\"text\"\r\n                                                    value={data.name}\r\n                                                    name=\"name\"\r\n                                                    onChange={onChangeValue}\r\n                                                    className=\"fullname\"\r\n                                                />\r\n                                                <img src={Person} alt=\"icon\" />\r\n                                                {error.name && (\r\n                                                    <span>{error.name[0]}</span>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Email\"\r\n                                                    type=\"email\"\r\n                                                    value={data.email}\r\n                                                    name=\"email\"\r\n                                                    onChange={onChangeValue}\r\n                                                />\r\n                                                <img src={Mail} alt=\"icon\" />\r\n                                                {error.email && (\r\n                                                    <span>\r\n                                                        {error.email[0]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <ReactPhoneInput\r\n                                                    disableDropdown\r\n                                                    countryCodeEditable={false}\r\n                                                    country=\"us\"\r\n                                                    placeholder=\"Phone Number\"\r\n                                                    inputProps={{\r\n                                                        name: \"phoneNumber\",\r\n                                                    }}\r\n                                                    value={data.phoneNumber}\r\n                                                    name=\"phoneNumber\"\r\n                                                    onChange={(e) => {\r\n                                                        onChangeValue({\r\n                                                            target: {\r\n                                                                name: \"phoneNumber\",\r\n                                                                value: e,\r\n                                                            },\r\n                                                        });\r\n                                                    }}\r\n                                                />\r\n\r\n                                                <img src={Phone} alt=\"icon\" />\r\n                                                {error.phoneNumber && (\r\n                                                    <span>\r\n                                                        {error.phoneNumber[0]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Create Password\"\r\n                                                    type={\r\n                                                        passwordShown\r\n                                                            ? \"text\"\r\n                                                            : \"password\"\r\n                                                    }\r\n                                                    value={data.password}\r\n                                                    name=\"password\"\r\n                                                    onChange={onChangeValue}\r\n                                                />\r\n                                                <img\r\n                                                    src={Password}\r\n                                                    alt=\"icon\"\r\n                                                    onClick={showPassword}\r\n                                                />\r\n                                                {error.password && (\r\n                                                    <span>\r\n                                                        {error.password[0]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <div className=\"input_items_trainer\">\r\n                                                <input\r\n                                                    placeholder=\"Confirm Password\"\r\n                                                    type={\r\n                                                        confirmPasswordShown\r\n                                                            ? \"text\"\r\n                                                            : \"password\"\r\n                                                    }\r\n                                                    value={data.cpassword}\r\n                                                    name=\"cpassword\"\r\n                                                    onChange={onChangeValue}\r\n                                                />\r\n                                                <img\r\n                                                    src={Password}\r\n                                                    alt=\"icon\"\r\n                                                    onClick={\r\n                                                        showConfirmPassword\r\n                                                    }\r\n                                                />\r\n                                                {error.cpassword && (\r\n                                                    <span>\r\n                                                        {error.cpassword[0]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n                                            {apiError && (\r\n                                                <span className=\"errorMessage\">\r\n                                                    {apiError}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            <div className=\"submit_button\">\r\n                                                <button\r\n                                                    type=\"submit\"\r\n                                                    onClick={handleSubmit}\r\n                                                >\r\n                                                    <p className=\"mb-0\">\r\n                                                        Continue to Account\r\n                                                    </p>\r\n                                                    <ArrowHoverBlacked />\r\n                                                </button>\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                    <div className=\"login_items\">\r\n                                        <h4>Already have an account?</h4>\r\n\r\n                                        <Link to=\"/\">\r\n                                            Sign In now\r\n                                            <BlueHoverButton />\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators(\r\n        {\r\n            loginOrSignupAct: loginOrSignUp,\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst BannerTrainer = connect(null, mapDispatchToProps)(BannerTrainerFC);\r\n\r\nexport default BannerTrainer;\r\n","export default __webpack_public_path__ + \"static/media/Phone Icon.f207d1b4.svg\";"],"sourceRoot":""}