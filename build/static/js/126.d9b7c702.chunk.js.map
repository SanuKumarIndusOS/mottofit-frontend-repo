{"version":3,"sources":["HOC/LoaderWrapper.js","action/home.js","pages/Auth/Login.js"],"names":["defaultProps","page","filter","search","LoaderWrapper","WrappedComponent","props","state","loading","componentAPIprops","getComponentProps","isLoading","componentProps","loaderKey","every","key","callActions","this","then","data","setState","compProp","className","Component","history","location","query","convertStringToObject","Promise","resolve","reject","all","actions","map","action","handler","match","params","initialLoad","getDirectPropsRelatedData","catch","index","Boolean","reduce","acc","propIndex","propsKey","getHomePageDetails","dispatch","getState","api","console","log","type","HomeActionType","updateHomePageData","payload","getPageDetails","name","LoginClass","onClick","e","pageNavigationByName","id","component","connect","home","bindActionCreators"],"mappings":"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","file":"static/js/126.d9b7c702.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { convertStringToObject } from \"service/helperFunctions\"\r\n\r\nlet defaultProps = {\r\n    page: 1, filter: '', search: ''\r\n}\r\n\r\n\r\nexport const LoaderWrapper = WrappedComponent => {\r\n\r\n    return props => {\r\n\r\n        return class Temp extends Component {\r\n\r\n            constructor(props) {\r\n                super(props)\r\n            }\r\n\r\n            state = {\r\n                loading: true,\r\n                componentAPIprops:{}\r\n            }\r\n\r\n            componentWillMount() {\r\n\r\n                callActions(props, this.props).then((data) => {\r\n                    if (!props.loaderKey) {\r\n                        this.setState({\r\n                            loading: false,\r\n                            componentAPIprops:data\r\n                        })\r\n                    }\r\n\r\n                })\r\n            }\r\n\r\n            getComponentProps = () => {\r\n                return {...this.props,...this.state.componentAPIprops}\r\n            }\r\n\r\n            componentWillReceiveProps(compProp) {\r\n                if (props.loaderKey) {\r\n\r\n                    if (this.isLoading(props, compProp)) {\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            isLoading = ({ loaderKey }, componentProps) => {\r\n                return loaderKey.every((key) => componentProps[key] !== '')\r\n            }       \r\n\r\n\r\n            render() {\r\n\r\n\r\n                let { loading } = this.state\r\n\r\n\r\n                if (loading) {\r\n                    //loader\r\n                    return (\r\n                        <div className=\"page-loader\">\r\n                            <div className=\"position-relative w-100 h-100\">\r\n                                <div className=\"loader-circle\"></div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    )\r\n                } else {\r\n\r\n                    return (\r\n                        <>\r\n                            <WrappedComponent {...this.getComponentProps()} />\r\n\r\n                        </>\r\n                    )\r\n\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n//handling api call\r\nconst callActions = (props, componentProps) => {\r\n\r\n    let { history = { location: { search: '' } } } = componentProps\r\n\r\n    let query = convertStringToObject(history.location.search)   \r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        Promise.all(props.actions.map((action) => {  \r\n            \r\n            if(typeof action === 'object'&&action.handler){\r\n                \r\n            return action.handler({...defaultProps, ...componentProps.match ? componentProps.match.params : {}, initialLoad: true, match: componentProps.match, ...query })\r\n\r\n            }   \r\n\r\n            return componentProps[action]({...defaultProps, ...componentProps.match ? componentProps.match.params : {}, initialLoad: true, match: componentProps.match, ...query })\r\n\r\n        })).then((data) => {\r\n            resolve(getDirectPropsRelatedData(data,props.actions))\r\n        }).catch((data) => {\r\n\r\n            resolve(true)\r\n\r\n        })\r\n\r\n    })\r\n\r\n}\r\n\r\nconst getDirectPropsRelatedData = (data,actions) =>{\r\n\r\n    let propsIndex = actions.map((action,index)=>{\r\n        if(typeof action==='object' && action.handler){\r\n            return index\r\n        }\r\n        return false \r\n    }).filter(Boolean)\r\n\r\n\r\n    return propsIndex.reduce((acc,propIndex)=>{\r\n\r\n        let propsLabel = actions[propIndex].propsKey\r\n\r\n        acc[propsLabel] = data[propIndex]\r\n\r\n        return acc\r\n    },{})\r\n\r\n}","import { HomeActionType } from \"service/actionType\"\r\n\r\nexport const getHomePageDetails = (query) => (dispatch, getState, { api }) => {\r\n    console.log('called')\r\n    return new Promise((resolve, reject) => {\r\n\r\n        dispatch({ type: HomeActionType.updateHomePageData, payload: 'test' })\r\n\r\n        resolve(true)\r\n\r\n    })\r\n\r\n}\r\n\r\nexport const getPageDetails = () =>{\r\n   return  new Promise((resolve,reject)=>{\r\n\r\n        resolve({ name:'viswaram' })\r\n\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from \"redux\"\r\nimport { getHomePageDetails,getPageDetails } from \"action/home\"\r\nimport { LoaderWrapper } from \"HOC/LoaderWrapper\"\r\nimport { pageNavigationByName } from \"helpers\"\r\nclass LoginClass extends Component {\r\n\r\n    state = {\r\n\r\n    }\r\n  \r\n    render() {\r\n        \r\n        let { data = '' } = this.props\r\n        \r\n        return (\r\n            <>\r\n                Login {data}\r\n\r\n                <button onClick={e=>pageNavigationByName({ params:{id:1 },name:'LoginDashboard' })}>Click</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    data: state.home.data\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({\r\n        getHomePageDetails\r\n    }, dispatch)\r\n}\r\n\r\n\r\nlet actions = ['getHomePageDetails',{ handler:getPageDetails,propsKey:'pageDetails' }]\r\n\r\nlet component = LoaderWrapper(LoginClass)({ actions })\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(component)\r\n"],"sourceRoot":""}