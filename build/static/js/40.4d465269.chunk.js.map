{"version":3,"sources":["component/SignUp/Banner/index.js","component/common/ButtonIcon/ArrowHover.jsx","component/SignUp/Banner/useForm.js","component/SignUp/Banner/validation.js","assets/files/SignUp/Phone Icon.svg"],"names":["SignUp","connect","dispatch","bindActionCreators","loginOrSignupAct","loginOrSignUp","submitForm","useForm","validateInfo","data","handleFormSubmit","error","setData","useState","passwordShown","setPasswordShown","confirmPasswordShown","setConfirmPasswordShown","apiError","setApiError","onChangeValue","register","errors","handleSubmit","watch","e","persist","target","name","value","useHistory","a","payload","firstName","lastName","email","phoneNo","password","cpassword","location","signUpType","userSignUp","AuthApi","Object","keys","length","then","console","log","catch","message","className","onSubmit","placeholder","type","onChange","src","Person","alt","Mail","Phone","Password","onClick","Facebook","Google","signUp","to","ArrowHover","focusable","imageRendering","baseProfile","version","preserveAspectRatio","viewBox","x","y","width","height","transform","stroke","d","validate","callback","setError","preventDefault","errorData","validation","values","test"],"mappings":"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","file":"static/js/40.4d465269.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Person from \"../../../assets/files/SignUp/Person Icon.svg\";\r\nimport Mail from \"../../../assets/files/SignUp/Email Icon.svg\";\r\nimport Phone from \"../../../assets/files/SignUp/Phone Icon.svg\";\r\nimport Password from \"../../../assets/files/SignUp/Password Icon.svg\";\r\nimport Facebook from \"../../../assets/files/SignUp/Fb Logo.svg\";\r\nimport Google from \"../../../assets/files/SignUp/Google Logo.svg\";\r\nimport \"./styles.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// import { useForm } from \"react-hook-form\";\r\nimport ArrowHover from \"../../common/ButtonIcon/ArrowHover\";\r\nimport ArrowHoverBlacked from \"../../common/BlackCircleButton/ArrowHoverBlacked\";\r\nimport { api } from \"service/api\";\r\nimport { AuthApi } from \"service/apiVariables\";\r\nimport { loginOrSignUp } from \"action/authAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport useForm from \"./useForm\";\r\nimport validateInfo from  \"./validation\";\r\n\r\n\r\nconst SignUpFC = ({ loginOrSignupAct,submitForm }) => {\r\n  \r\n    const {data,handleFormSubmit,error,setData} = useForm(validateInfo, submitForm);\r\n\r\n    const [passwordShown, setPasswordShown] = useState(false);\r\n    const [confirmPasswordShown, setConfirmPasswordShown] = useState(false);\r\n    const [apiError, setApiError] = useState(\"\");\r\n    const { register, errors, handleSubmit, watch } = useForm();\r\n    const onChangeValue = (e) => {\r\n        e.persist();\r\n        setData({ ...data, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const history = useHistory();\r\n\r\n    async function signUp() {\r\n        const payload = {\r\n            firstName: data.firstName,\r\n            lastName: data.lastName,\r\n            email: data.email,\r\n            phoneNo: data.phoneNo,\r\n            password: data.password,\r\n            cpassword: data.cpassword,\r\n            location: data.location,\r\n            signUpType: data.signUpType,\r\n        };\r\n        // console.log(item);\r\n        // const requestOptions = {\r\n        //   method: \"POST\",\r\n        //   headers: {\r\n        //     \"Content-Type\": \"application/json\",\r\n        //     Accept: \"application/json\",\r\n        //   },\r\n        //   body: JSON.stringify(item),\r\n        // };\r\n\r\n        const { userSignUp } = AuthApi;\r\n\r\n        if(Object.keys(error).length === 0){\r\n        loginOrSignupAct(userSignUp, payload)\r\n            .then((data) => console.log(data))\r\n            .catch((error) => {\r\n                setApiError(\"Sorry, something went wrong.\", error.message);\r\n            });\r\n        }\r\n        // fetch(\"http://doodlebluelive.com:2307/v1/user/sign-up\", requestOptions)\r\n        //   .then(async (response) => {\r\n        //     const data = await response.json();\r\n        //     localStorage.setItem(\"user-info\", JSON.stringify(data));\r\n\r\n        //     if (response.ok) {\r\n        //       history.push(\"/trainer/find\");\r\n        //     } else {\r\n        //       setApiError(\"Email already registered\", response.statusText);\r\n        //     }\r\n        //   })\r\n    }\r\n\r\n    const showPassword = () => {\r\n        setPasswordShown(passwordShown ? false : true);\r\n    };\r\n    const showConfirmPassword = () => {\r\n        setConfirmPasswordShown(confirmPasswordShown ? false : true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* {redirect ? <Redirect to={\"/findtrainer\"} /> : null} */}\r\n            <div className=\"main_container\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"inner_wrapper\">\r\n                        <div className=\"inner_items\">\r\n                            <h2>Sign Up with Motto!</h2>\r\n                            <p>\r\n                                Fill up the following details to create your\r\n                                account\r\n                            </p>\r\n                            <div className=\"form_items\">\r\n                                <form onSubmit={handleFormSubmit}>\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Name\"\r\n                                            type=\"text\"\r\n                                            value={data.firstName}\r\n                                            name=\"firstName\"\r\n                                            onChange={onChangeValue}\r\n                                            // ref={register({\r\n                                            //     pattern: /^[A-Za-z]+$/i,\r\n                                            //     required: true,\r\n                                            //     minLength: 2,\r\n                                            // })}\r\n                                        />\r\n                                        <img src={Person} alt=\"icon\" />\r\n                                        {/* {errors.firstName && (\r\n                                            <span>\r\n                                                {errors.firstName.message}\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.firstName?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )}\r\n                                        {errors.firstName?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>\r\n                                                This field should contain more\r\n                                                then one charater\r\n                                            </span>\r\n                                        )} */}\r\n                                        {/* {errors.firstName?.type ===\r\n                                            \"pattern\" && (\r\n                                            <span>\r\n                                                This field accept only alphabets\r\n                                            </span>\r\n                                        )} */}\r\n                                           {error.firstName && (\r\n                                                    <span>\r\n                                                        {error.firstName}\r\n                                                    </span>\r\n                                                )}\r\n                                    </div>\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"LastName\"\r\n                                            type=\"text\"\r\n                                            value={data.lastName}\r\n                                            name=\"lastName\"\r\n                                            onChange={onChangeValue}\r\n                                            // ref={register({\r\n                                            //     pattern: /^[A-Za-z]+$/i,\r\n                                            //     required: true,\r\n                                            //     minLength: 2,\r\n                                            // })}\r\n                                        />\r\n                                        <img src={Person} alt=\"icon\" />\r\n                                        {error.lastName && (\r\n                                                    <span>\r\n                                                        {error.lastName}\r\n                                                    </span>\r\n                                                )}\r\n                                        {/* {errors.lastName && (\r\n                                            <span>\r\n                                                {errors.lastName.message}\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.lastName?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )}\r\n                                        {errors.lastName?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>\r\n                                                This field should contain more\r\n                                                then one charater\r\n                                            </span>\r\n                                        )} */}\r\n                                        {/* {errors.lastName?.type ===\r\n                                            \"pattern\" && (\r\n                                            <span>\r\n                                                This field accept only alphabets\r\n                                            </span>\r\n                                        )} */}\r\n                                    </div>\r\n\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Location\"\r\n                                            type=\"text\"\r\n                                            value={data.location}\r\n                                            name=\"location\"\r\n                                            onChange={onChangeValue}\r\n                                            // ref={register({\r\n                                            //     pattern: /^[A-Za-z]+$/i,\r\n                                            //     required: true,\r\n                                            //     minLength: 2,\r\n                                            // })}\r\n                                        />\r\n                                        <img src={Person} alt=\"icon\" />\r\n                                        {error.location && (\r\n                                                    <span>\r\n                                                        {error.location}\r\n                                                    </span>\r\n                                                )}\r\n                                        \r\n                                        {/* {errors.location && (\r\n                                            <span>\r\n                                                {errors.location.message}\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.location?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )} */}\r\n                                        {/* {errors.location?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>\r\n                                                This field should contain more\r\n                                                then one charater\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.location?.type ===\r\n                                            \"pattern\" && (\r\n                                            <span>\r\n                                                This field accept only alphabets\r\n                                            </span>\r\n                                        )} */}\r\n                                    </div>\r\n\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Email\"\r\n                                            type=\"email\"\r\n                                            value={data.email}\r\n                                            name=\"email\"\r\n                                            onChange={onChangeValue}\r\n                                            // ref={register({\r\n                                            //     required:\r\n                                            //         \"This filed is required\",\r\n                                            //     minLength: {\r\n                                            //         value: 2,\r\n                                            //         message:\r\n                                            //             \"Enter a valid name\",\r\n                                            //     },\r\n                                            // })}\r\n                                        />\r\n                                        <img src={Mail} alt=\"icon\" />\r\n\r\n                                        {error.email && (\r\n                                                    <span>\r\n                                                        {error.email}\r\n                                                    </span>\r\n                                                )}\r\n                                        {/* {errors.email && (\r\n                                            <span>{errors.email.message}</span>\r\n                                        )} */}\r\n                                    </div>\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Phone\"\r\n                                            type=\"text\"\r\n                                            value={data.phoneNo}\r\n                                            name=\"phoneNo\"\r\n                                            onChange={onChangeValue}\r\n                                            // ref={register({\r\n                                            //     required: true,\r\n                                            //     minLength: 6,\r\n                                            //     maxLength: 11,\r\n                                            // })}\r\n                                        />\r\n                                        <img src={Phone} alt=\"icon\" />\r\n                                        {error.phoneNo && (\r\n                                                    <span>\r\n                                                        {error.phoneNo}\r\n                                                    </span>\r\n                                                )}\r\n\r\n                                        {/* {errors.phoneNo && (\r\n                                            <span>\r\n                                                {errors.phoneNo.message}\r\n                                            </span>\r\n                                        )} */}\r\n                                        {/* {errors.phoneNo?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )}\r\n                                        {errors.phoneNo?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>Enter a valid number</span>\r\n                                        )}\r\n                                        {errors.phoneNo?.type ===\r\n                                            \"maxLength\" && (\r\n                                            <span>\r\n                                                This field exceed max length\r\n                                            </span>\r\n                                        )} */}\r\n                                    </div>\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Create Password\"\r\n                                            type={\r\n                                                passwordShown\r\n                                                    ? \"text\"\r\n                                                    : \"password\"\r\n                                            }\r\n                                            value={data.password}\r\n                                            name=\"password\"\r\n                                            onChange={onChangeValue}\r\n                                            // ref={register({\r\n                                            //     required: true,\r\n                                            //     minLength: 6,\r\n                                            //     maxLength: 16,\r\n                                            //     // pattern: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/,\r\n                                            // })}\r\n                                        />\r\n                                        <img\r\n                                            src={Password}\r\n                                            alt=\"icon\"\r\n                                            onClick={showPassword}\r\n                                        />\r\n                                             {error.password && (\r\n                                                    <span>\r\n                                                        {error.password}\r\n                                                    </span>\r\n                                                )}\r\n\r\n                                        {/* {errors.password?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )}\r\n                                        {errors.password?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>\r\n                                                Password should be more then 6\r\n                                                Charcters\r\n                                            </span>\r\n                                        )} */}\r\n                                        {/* {errors.password?.type ===\r\n                                            \"maxLength\" && (\r\n                                            <span>\r\n                                                This field exceed max length\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.password?.type ===\r\n                                            \"pattern\" && (\r\n                                            <span>\r\n                                                Password should contain atleast\r\n                                                one one captial letter, number\r\n                                                and special character\r\n                                            </span>\r\n                                        )} */}\r\n                                    </div>\r\n                                    <div className=\"input_items\">\r\n                                        <input\r\n                                            placeholder=\"Confirm Password\"\r\n                                            type={\r\n                                                confirmPasswordShown\r\n                                                    ? \"text\"\r\n                                                    : \"password\"\r\n                                            }\r\n                                            name=\"cpassword\"\r\n                                            value={data.cpassword}\r\n                                            onChange={onChangeValue}\r\n                                            // ref={register({\r\n                                            //     validate: (value) =>\r\n                                            //         value === watch(\"password\"),\r\n\r\n                                            //     // validate: value =>\r\n                                            //     // value === password.current || \"The passwords do not match\",\r\n                                            //     required: true,\r\n                                            //     minLength: 6,\r\n                                            //     maxLength: 16,\r\n                                            //     // pattern: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/,\r\n                                            // })}\r\n                                            \r\n                                        />\r\n                                        <img\r\n                                            src={Password}\r\n                                            alt=\"icon\"\r\n                                            onClick={showConfirmPassword}\r\n                                        />\r\n\r\n                                            {error.cpassword && (\r\n                                                    <span>\r\n                                                        {error.cpassword}\r\n                                                    </span>\r\n                                                )}\r\n                                        {/* {errors.cpassword?.type ===\r\n                                            \"required\" && (\r\n                                            <span>This field is required</span>\r\n                                        )} */}\r\n                                        {/* {errors.cpassword?.type ===\r\n                                            \"minLength\" && (\r\n                                            <span>\r\n                                                Password should be more then 6\r\n                                                Charcters\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.cpassword?.type ===\r\n                                            \"maxLength\" && (\r\n                                            <span>\r\n                                                This field exceed max length\r\n                                            </span>\r\n                                        )} */}\r\n                                        {/* {errors.cpassword?.type ===\r\n                                            \"pattern\" && (\r\n                                            <span>\r\n                                                Password should contain atleast\r\n                                                one one captial letter, number\r\n                                                and special character\r\n                                            </span>\r\n                                        )}\r\n                                        {errors.cpassword?.type !==\r\n                                            errors.password && (\r\n                                            <span>\r\n                                                The passwords do not match\r\n                                            </span>\r\n                                        )} */}\r\n                                    </div>\r\n                                    {apiError && (\r\n                                        <span className=\"errorMessage\">\r\n                                            {apiError}\r\n                                        </span>\r\n                                    )}\r\n\r\n                                    <div className=\"or_items\">\r\n                                        <div className=\"hr_line\"></div>\r\n                                        <div>\r\n                                            <p>or</p>\r\n                                        </div>\r\n                                        <div className=\"hr_line\"></div>\r\n                                    </div>\r\n                                    <div className=\"social_buttons\">\r\n                                        <button className=\"facebook-auth\">\r\n                                            <img src={Facebook} alt=\"icon\" />\r\n                                            Sign Up with Facebook\r\n                                        </button>\r\n\r\n                                        <button className=\"google-auth\">\r\n                                            <img src={Google} alt=\"icon\" />\r\n                                            Sign up with Google\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"submit_button\">\r\n                                        <button\r\n                                            type=\"submit\"\r\n                                            onClick={signUp()}\r\n                                        >\r\n                                            Continue to Account{\" \"}\r\n                                            <ArrowHoverBlacked />\r\n                                        </button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                            <div className=\"login_content_signup\">\r\n                                <h1>Already have an account?</h1>\r\n\r\n                                <Link to=\"/\">\r\n                                    Sign In now\r\n                                    <ArrowHover />\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators(\r\n        {\r\n            loginOrSignupAct: loginOrSignUp,\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst SignUp = connect(null, mapDispatchToProps)(SignUpFC);\r\n\r\nexport default SignUp;\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nfunction ArrowHover() {\r\n    return (\r\n        <>\r\n            <div>\r\n                <span className='arrow-hover'>\r\n                    <svg\r\n                        className=\"arrow-icon\"\r\n                        focusable=\"false\"\r\n                        imageRendering=\"auto\"\r\n                        baseProfile=\"basic\"\r\n                        version=\"1.1\"\r\n                        preserveAspectRatio=\"xMidYMid meet\"\r\n                        viewBox=\"0 0 62 35\"\r\n                    >\r\n                        <title>Arrow Icon</title>\r\n                        <rect x=\"0\" y=\"14.7\" width=\"55.2\" height=\"4.55\"></rect>\r\n                        <g transform=\"translate(40.9 0)\">\r\n                            <path\r\n                                stroke=\"none\"\r\n                                d=\"M.35 3L14.3 17.2 0 31.25 3.35 34.25 20.85 17.15 3.5 0 .35 3Z\"\r\n                            ></path>\r\n                        </g>\r\n                    </svg>\r\n                </span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ArrowHover;\r\n","import { useState, useEffect} from 'react';\r\n\r\nconst useForm = (validate, callback) => {\r\n\r\n    const [data, setData] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        phoneNo: \"\",\r\n        password: \"\",\r\n        cpassword: \"\",\r\n        location: \"\",\r\n        signUpType: \"email\",\r\n    });\r\n\r\n\r\n    const [error, setError] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        phoneNo: \"\",\r\n        password: \"\",\r\n        cpassword: \"\",\r\n        location: \"\",\r\n        signUpType: \"email\",\r\n    })\r\n    const [isSubmit, setSubmit] = useState(false)\r\n\r\n\r\n    const handleFormSubmit = e => {\r\n        e.preventDefault();\r\n\r\n         const errorData = validate(data);\r\n         setError(errorData)\r\n        // setSubmit(true)\r\n        console.log(data);\r\n        console.log(errorData);\r\n        console.log(error);\r\n        console.log(setError);     \r\n    }\r\n\r\n\r\n\r\n    // useEffect(()=>{\r\n    //     if(Object.keys(error).length === 0 && \r\n    //     isSubmit) {\r\n    //         callback();\r\n    //     }\r\n    // }, [error])}\r\n    return {data, handleFormSubmit, error,setData }\r\n}\r\nexport default useForm;\r\n\r\n","const validation = ( values) => {\r\n    let errors = {} ;\r\n\r\n    // firstName: \"\",\r\n    // lastName: \"\",\r\n    // email: \"\",\r\n    // phoneNo: \"\",\r\n    // password: \"\",\r\n    // cpassword: \"\",\r\n    // location: \"\",\r\n\r\n    if(!values.firstName){\r\n        errors.firstName='This field is required'\r\n    }else if(values.firstName.length <= 1){\r\n        errors.firstName='This field should contain more than one character'\r\n     } else if(!/^[A-Za-z]+$/i.test(values.firstName)){\r\n         errors.firstName=\"  This field accepts only alphabets\"\r\n     }\r\n\r\n     if(!values.lastName){\r\n        errors.lastName='This field is required'\r\n    }else if(values.lastName.length <= 1){\r\n        errors.lastName='This field should contain more than one character'\r\n     } else if(!/^[A-Za-z]+$/i.test(values.lastName)){\r\n         errors.lastName=\"This field accepts only alphabets\"\r\n     }\r\n\r\n     if(!values.location){\r\n        errors.location='This field is required'\r\n    }else if(values.location.length <= 1){\r\n        errors.location='This field should contain more than one character'\r\n     } else if(!/^[A-Za-z]+$/i.test(values.location)){\r\n         errors.location=\"This field accepts only alphabets\"\r\n     }\r\n  \r\n\r\n    if(!values.email){\r\n        errors.email = 'This field is required'\r\n    }else if(!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/i.test(values.email)){\r\n        errors.email = ' Please enter a valid email address'\r\n    }else if(values.email.length < 8) {\r\n        errors.email = \" This field should contain greater then 8 character\"\r\n    }\r\n\r\n    if(!values.phoneNo){\r\n        errors.phoneNo = 'This field is required'\r\n    }    else if(!/^[0-9]*$/i.test(values.phoneNo)){\r\n            errors.phoneNo = 'Invalid Number'\r\n    }\r\n    else if(values.phoneNo.length < 10){\r\n        errors.phoneNo = 'Enter a valid number'\r\n    } else if (values.phoneNo.length  >= 11) {\r\n        errors.phoneNo = \" This field exceed max length\"\r\n    }\r\n  \r\n    if(!values.password){\r\n        errors.password='This field is required'\r\n    }else if(values.password.length < 6){\r\n        errors.password=' Password should be more then 6 Charcters'\r\n    } else if (values.password.length > 16){\r\n        errors.password = \" This field exceed max length\"\r\n    } else if (!/^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/.test(values.password)){\r\n        errors.password=\" Password should contain atleast one one captial letter, number and special character\"\r\n    }\r\n    \r\n    if(!values.cpassword){\r\n        errors.cpassword='This field is required'\r\n    }else if(values.cpassword.length < 6){\r\n        errors.cpassword=' Password should be more then 6 Charcters'\r\n    } else if (values.cpassword.length > 16){\r\n        errors.cpassword = \" This field exceed max length\"\r\n    } else if (!/^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/.test(values.cpassword)){\r\n        errors.cpassword=\" Password should contain atleast one one captial letter, number and special character\"\r\n    } else if ( values.password !== values.cpassword){\r\n        errors.cpassword=\"  The passwords do not match\"\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport default validation;\r\n","export default __webpack_public_path__ + \"static/media/Phone Icon.f207d1b4.svg\";"],"sourceRoot":""}