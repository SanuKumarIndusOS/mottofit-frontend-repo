{"version":3,"sources":["component/TrainerDashBoard/DashboardCompontents/TrainerMessages/index.js","assets/files/TrainerDashboard/Message/Jenny.png","assets/files/TrainerDashboard/Message/Availability Icon.svg","assets/files/TrainerDashboard/Message/Location Icon.svg","assets/files/TrainerDashboard/Message/Image 1.png","assets/files/TrainerDashboard/Message/Shedule Icon.svg"],"names":["Chatt","require","RightChat","props","className","data","src","Jonn","alt","TrainerMessage","connect","dispatch","bindActionCreators","trainerChannel","useState","individual_list","setIndividual","socialGroup_list","setSocialGroup_list","admin_list","setAdmin_list","Channel","setChannel","messages","setMessages","text_thread","setText_thread","chattoken","setToken","useEffect","fetch","method","headers","Headers","Authorization","localStorage","getItem","then","response","json","individualClient","socialGroups","admins","sendText","sendMessage","on","handleMessageAdded","message","channelID","a","Client","create","client","channel","getChannelByUniqueName","res","join","getMessages","PopulateContacts","loadMessages","messagesEndRef","useRef","defaultTab","onChange","tabId","console","log","tabFor","map","item","Jenny","onClick","SheduleIcon","Date","toDateString","AvailabilityIcon","toLocaleTimeString","LocationIcon","ref","type","placeholder","value","event","target"],"mappings":"kSAaMA,EAAQC,EAAQ,KAibhBC,EAAY,SAACC,GACjB,OACE,mCACE,sBAAKC,UAAU,qBAAf,UACE,qBAAKA,UAAU,eAAf,SACE,6BAAKD,EAAME,SAGb,qBAAKC,IAAKC,UAAMC,IAAI,eA2BtBC,EAAiBC,YAAQ,MATJ,SAACC,GAC1B,OAAOC,YACL,CACEC,iCAEFF,KAImBD,EAldK,SAAC,GAAwB,IAAtBG,EAAqB,EAArBA,eAC7B,EAAyCC,mBAAS,IAAlD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAgDF,mBAAS,IAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAA4BR,qBAA5B,mBACA,GADA,UACgCA,mBAAS,KAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAsCV,mBAAS,IAA/C,mBAAOW,EAAP,KAAoBC,EAApB,KACA,EAA8BZ,mBAAS,IAAvC,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAoCd,mBAAS,IAA7C,6BAGAe,qBAAU,WACRC,MACE,wFACA,CACEC,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACnBC,cAAeC,aAAaC,QAAQ,SACpC,eAAgB,wCAInBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAChC,GACLuB,EAASvB,EAAI,cAwDjBQ,IAAiBwB,MAAK,SAAChC,GACrBW,EAAcX,EAAKmC,kBACnBtB,EAAoBb,EAAKoC,cACzBrB,EAAcf,EAAKqC,aAEpB,IAEH,IAAMC,EAAW,WAGftB,EAAQuB,YAAYnB,GAEpBJ,EAAQwB,GAAG,eAAgBC,GAI3BpB,EAAe,MAGXoB,EAAqB,SAACC,GAC1BvB,GAAY,SAACD,GAAD,4BAAkBA,GAAlB,CAA4BwB,QArGQ,4CAwGlD,WAA4BC,GAA5B,SAAAC,EAAA,sDACEzB,EAAY,IAGZxB,EAAMkD,OAAOC,OAAOxB,GAAWU,MAAK,SAACe,GACnC,IAAIC,EACJD,EAAOE,uBAAuBN,GAAWX,MAAK,SAACkB,GAE7CjC,EADA+B,EAAUE,GAEVF,EAAQG,UAGVJ,EAAOP,GAAG,gBAAgB,SAAUQ,OAEpCD,EAAOP,GAAG,gBAAV,uCAA2B,WAAOQ,GAAP,eAAAJ,EAAA,sEAEHI,EAAQI,cAFL,OAEnBV,EAFmB,OAIzBvB,EAAYuB,EAAO,OAJM,2CAA3B,uDAQAK,EAAOP,GAAG,kBAAkB,SAAUQ,UAtB1C,4CAxGkD,sBAoIlD,SAASK,EAAiBV,IApIwB,oCAqIhDW,CAAaX,GAGf,IAAMY,EAAiBC,mBAKvB,OACE,mCACE,qBAAKzD,UAAU,mCAAf,SACE,sBAAKA,UAAU,2BAAf,UACE,0CACA,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,eAAC,IAAD,CACE0D,WAAW,MACXC,SAAU,SAACC,GACTC,QAAQC,IAAIF,IAHhB,UAME,eAAC,IAAD,WACE,cAAC,IAAD,CAAKG,OAAO,MAAZ,iBACA,cAAC,IAAD,CAAKA,OAAO,MAAZ,gCACA,cAAC,IAAD,CAAKA,OAAO,QAAZ,2BACA,cAAC,IAAD,CAAKA,OAAO,OAAZ,sBAEF,sBAAK/D,UAAU,gBAAf,UACE,cAAC,IAAD,CAAU4D,MAAM,MAAhB,SACE,sBAAK5D,UAAU,oBAAf,UACE,qBAAKA,UAAU,eAAf,SAEG,sBACIW,GADJ,YAEIE,GAFJ,YAGIE,IACHiD,KAAI,SAACC,GACL,OACE,qBAAKjE,UAAU,eAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKE,IAAKgE,UAAO9D,IAAI,SACrB,qBACEJ,UAAU,sBACVmE,QAAS,kBACPb,EAAiBW,EAAI,oBAHzB,SAME,6BAAKA,EAAI,QAAY,GAAhB,uBAOjB,qBAAKjE,UAAU,gBAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,mEACA,sBAAKA,UAAU,uBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKE,IAAKkE,UAAahE,IAAI,SAC3B,oCAAM,IAAIiE,MAAOC,qBAEnB,sBAAKtE,UAAU,uBAAf,UACE,qBAAKE,IAAKqE,UAAkBnE,IAAI,SAChC,8BAAK,IAAIiE,MAAOG,0BAElB,sBAAKxE,UAAU,uBAAf,UACE,qBAAKE,IAAKuE,UAAcrE,IAAI,SAC5B,sDAIN,sBAAKJ,UAAU,yBAAf,UACGmB,EAAS6C,KAAI,SAACC,GACb,OAAO,cAACnE,EAAD,CAAWG,KAAMgE,EAAI,MAAJ,UAE1B,qBAAKS,IAAKlB,OAEZ,sBAAKxD,UAAU,sBAAf,UACE,uBACE2E,KAAK,OACLC,YAAY,2BACZC,MAAOxD,EACPsC,SAAU,SAACmB,GACTxD,EAAewD,EAAMC,OAAOF,UAGhC,qBAAKV,QAAS5B,EAAd,SACE,cAAC,UAAD,mBAOZ,cAAC,IAAD,CAAUqB,MAAM,MAAhB,SACE,sBAAK5D,UAAU,oBAAf,UACE,qBAAKA,UAAU,eAAf,SAEGW,EAAgBqD,KAAI,SAACC,GACpB,OACE,qBAAKjE,UAAU,eAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKE,IAAKgE,UAAO9D,IAAI,SACrB,qBACEJ,UAAU,sBACVmE,QAAS,kBACPb,EAAiBW,EAAI,oBAHzB,SAME,6BAAKA,EAAI,QAAY,GAAhB,uBAOjB,qBAAKjE,UAAU,gBAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,mEACA,sBAAKA,UAAU,uBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKE,IAAKkE,UAAahE,IAAI,SAC3B,oCAAM,IAAIiE,MAAOC,qBAEnB,sBAAKtE,UAAU,uBAAf,UACE,qBAAKE,IAAKqE,UAAkBnE,IAAI,SAChC,8BAAK,IAAIiE,MAAOG,0BAElB,sBAAKxE,UAAU,uBAAf,UACE,qBAAKE,IAAKuE,UAAcrE,IAAI,SAC5B,sDAIN,sBAAKJ,UAAU,yBAAf,UACGmB,EAAS6C,KAAI,SAACC,GACb,OAAO,cAACnE,EAAD,CAAWG,KAAMgE,EAAI,MAAJ,UAE1B,qBAAKS,IAAKlB,OAEZ,sBAAKxD,UAAU,sBAAf,UACE,uBACE2E,KAAK,OACLC,YAAY,2BACZC,MAAOxD,EACPsC,SAAU,SAACmB,GACTxD,EAAewD,EAAMC,OAAOF,UAGhC,qBAAKV,QAAS5B,EAAd,SACE,cAAC,UAAD,mBAOZ,cAAC,IAAD,CAAUqB,MAAM,QAAhB,SACE,sBAAK5D,UAAU,oBAAf,UACE,qBAAKA,UAAU,eAAf,SAEGa,EAAiBmD,KAAI,SAACC,GACrB,OACE,qBAAKjE,UAAU,eAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKE,IAAKgE,UAAO9D,IAAI,SACrB,qBACEJ,UAAU,sBACVmE,QAAS,kBACPb,EAAiBW,EAAI,oBAHzB,SAME,6BAAKA,EAAI,QAAY,GAAhB,uBAOjB,qBAAKjE,UAAU,gBAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,mEACA,sBAAKA,UAAU,uBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKE,IAAKkE,UAAahE,IAAI,SAC3B,oCAAM,IAAIiE,MAAOC,qBAEnB,sBAAKtE,UAAU,uBAAf,UACE,qBAAKE,IAAKqE,UAAkBnE,IAAI,SAChC,8BAAK,IAAIiE,MAAOG,0BAElB,sBAAKxE,UAAU,uBAAf,UACE,qBAAKE,IAAKuE,UAAcrE,IAAI,SAC5B,sDAIN,sBAAKJ,UAAU,yBAAf,UACGmB,EAAS6C,KAAI,SAACC,GACb,OAAO,cAACnE,EAAD,CAAWG,KAAMgE,EAAI,MAAJ,UAE1B,qBAAKS,IAAKlB,OAEZ,sBAAKxD,UAAU,sBAAf,UACE,uBACE2E,KAAK,OACLC,YAAY,2BACZC,MAAOxD,EACPsC,SAAU,SAACmB,GACTxD,EAAewD,EAAMC,OAAOF,UAGhC,qBAAKV,QAAS5B,EAAd,SACE,cAAC,UAAD,mBAOZ,cAAC,IAAD,CAAUqB,MAAM,OAAhB,SACE,sBAAK5D,UAAU,oBAAf,UACE,qBAAKA,UAAU,eAAf,SAEGe,EAAWiD,KAAI,SAACC,GACf,OACE,qBAAKjE,UAAU,eAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKE,IAAKgE,UAAO9D,IAAI,SACrB,qBACEJ,UAAU,sBACVmE,QAAS,kBACPb,EAAiBW,EAAI,oBAHzB,SAME,6BAAKA,EAAI,QAAY,GAAhB,uBAOjB,qBAAKjE,UAAU,gBAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,mEACA,sBAAKA,UAAU,uBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKE,IAAKkE,UAAahE,IAAI,SAC3B,oCAAM,IAAIiE,MAAOC,qBAEnB,sBAAKtE,UAAU,uBAAf,UACE,qBAAKE,IAAKqE,UAAkBnE,IAAI,SAChC,8BAAK,IAAIiE,MAAOG,0BAElB,sBAAKxE,UAAU,uBAAf,UACE,qBAAKE,IAAKuE,UAAcrE,IAAI,SAC5B,sDAIN,sBAAKJ,UAAU,yBAAf,UACGmB,EAAS6C,KAAI,SAACC,GACb,OAAO,cAACnE,EAAD,CAAWG,KAAMgE,EAAI,MAAJ,UAE1B,qBAAKS,IAAKlB,OAEZ,sBAAKxD,UAAU,sBAAf,UACE,uBACE2E,KAAK,OACLC,YAAY,2BACZC,MAAOxD,EACPsC,SAAU,SAACmB,GACTxD,EAAewD,EAAMC,OAAOF,UAGhC,qBAAKV,QAAS5B,EAAd,SACE,cAAC,UAAD,yBAShB,qBAAKvC,UAAU,oBA6CdK,a,iCCnef,OAAe,cAA0B,mC,iCCAzC,OAAe,cAA0B,+C,iCCAzC,OAAe,cAA0B,2C,iCCAzC,OAAe,cAA0B,qC,iCCAzC,OAAe,cAA0B,0C","file":"static/js/46.8fec0707.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Tabs, Tab, TabPanel, TabList } from \"react-web-tabs\";\nimport \"react-web-tabs/dist/react-web-tabs.css\";\nimport \"./style.scss\";\nimport Jenny from \"../../../../assets/files/TrainerDashboard/Message/Jenny.png\";\nimport Jonn from \"../../../../assets/files/TrainerDashboard/Message/Image 1.png\";\nimport SheduleIcon from \"../../../../assets/files/TrainerDashboard/Message/Shedule Icon.svg\";\nimport AvailabilityIcon from \"../../../../assets/files/TrainerDashboard/Message/Availability Icon.svg\";\nimport LocationIcon from \"../../../../assets/files/TrainerDashboard/Message/Location Icon.svg\";\nimport BlueHoverButton from \"../../../common/BlueArrowButton/index\";\nimport { trainerChannel } from \"action/trainerAct\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nconst Chatt = require(\"twilio-chat\");\n\nconst TrainerMessageClass = ({ trainerChannel }) => {\n  const [individual_list, setIndividual] = useState([]);\n  const [socialGroup_list, setSocialGroup_list] = useState([]);\n  const [admin_list, setAdmin_list] = useState([]);\n  const [Channel, setChannel] = useState([]);\n  const [Client, setClient] = useState();\n  const [messages, setMessages] = useState([]);\n  const [text_thread, setText_thread] = useState([]);\n  const [chattoken, setToken] = useState(\"\");\n  const [channel_id, setChannel_id] = useState(\"\");\n\n  // Make Id dynamic\n  useEffect(() => {\n    fetch(\n      \"http://doodlebluelive.com:2338/v1/token?identity=7f007fd1-7042-4c1c-b8ea-3d739cf9f707\",\n      {\n        method: \"get\",\n        headers: new Headers({\n          Authorization: localStorage.getItem(\"token\"),\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        }),\n      }\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setToken(data[\"chatToken\"]);\n\n        // var channel;\n\n        // Chatt.Client.create(data[\"chatToken\"]).then((client) => {\n        //   // Use client\n\n        //   // client.getChannelByUniqueName(channel_id).then((res) => {\n        //   //   console.log(res);\n        //   //   channel = res;\n        //   //   setChannel(channel);\n        //   //   channel.join();\n        //   // });\n\n        //   setClient(client);\n\n        //   // client.on(\"channelJoined\", async (channel) => {\n        //   //   // getting list of all messages since this is an existing channel\n        //   //   console.log(\"joined\");\n        //   //   const message = await channel.getMessages();\n        //   //   // this.setState({ messages: messages.items || [] });\n        //   //   setMessages(message[\"items\"]);\n        //   //   console.log(message[\"items\"][0]);\n        //   //   // scrollToBottom();\n        //   // });\n        // });\n      });\n\n    // Twilio initialisation\n    // var token = chattoken;\n    // var channel;\n    // Chatt.Client.create(chattoken).then((client) => {\n    //   // Use client\n\n    //   client\n    //     .getChannelByUniqueName(\"CH968a07b6614642508c1cfda691f4c698\")\n    //     .then((res) => {\n    //       console.log(res);\n    //       channel = res;\n    //       setChannel(channel);\n    //       channel.join();\n    //     });\n\n    //   setClient(client);\n\n    //   client.on(\"channelJoined\", async (channel) => {\n    //     // getting list of all messages since this is an existing channel\n    //     console.log(\"joined\");\n    //     const message = await channel.getMessages();\n    //     // this.setState({ messages: messages.items || [] });\n    //     setMessages(message[\"items\"]);\n    //     console.log(message[\"items\"][0]);\n    //   });\n    // });\n\n    // Get Contact_list\n    trainerChannel().then((data) => {\n      setIndividual(data.individualClient);\n      setSocialGroup_list(data.socialGroups);\n      setAdmin_list(data.admins);\n    });\n  }, []);\n\n  const sendText = () => {\n    var temp = {};\n    temp.state = text_thread;\n    Channel.sendMessage(text_thread);\n\n    Channel.on(\"messageAdded\", handleMessageAdded);\n    //  const message = () => Channel.getMessages();\n    //  setMessages([])\n\n    setText_thread(\" \");\n  };\n\n  const handleMessageAdded = (message) => {\n    setMessages((messages) => [...messages, message]);\n  };\n\n  async function loadMessages(channelID) {\n    setMessages([]);\n    // setChannel_id(channel_id);\n\n    Chatt.Client.create(chattoken).then((client) => {\n      var channel;\n      client.getChannelByUniqueName(channelID).then((res) => {\n        channel = res;\n        setChannel(channel);\n        channel.join();\n      });\n\n      client.on(\"channelAdded\", function (channel) {});\n\n      client.on(\"channelJoined\", async (channel) => {\n        // getting list of all messages since this is an existing channel\n        const message = await channel.getMessages();\n        // this.setState({ messages: messages.items || [] });\n        setMessages(message[\"items\"]);\n        // scrollToBottom();\n      });\n\n      client.on(\"channelRemoved\", function (channel) {\n        //  setMessages([])\n      });\n    });\n  }\n\n  function PopulateContacts(channelID) {\n    loadMessages(channelID);\n  }\n\n  const messagesEndRef = useRef();\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <>\n      <div className=\"container main_message_container\">\n        <div className=\"message_outter_container\">\n          <h2>Messages</h2>\n          <div className=\"message_inner\">\n            <div className=\"message_wrapper\">\n              <Tabs\n                defaultTab=\"one\"\n                onChange={(tabId) => {\n                  console.log(tabId);\n                }}\n              >\n                <TabList>\n                  <Tab tabFor=\"one\">All</Tab>\n                  <Tab tabFor=\"two\">INDIVIDUAL CLIENTS</Tab>\n                  <Tab tabFor=\"three\">SOCIAL GROUPS</Tab>\n                  <Tab tabFor=\"four\">ADMIN</Tab>\n                </TabList>\n                <div className=\"message_inner\">\n                  <TabPanel tabId=\"one\">\n                    <div className=\"message_inner_one\">\n                      <div className=\"message_left\">\n                        {/* Todo Change to ALL */}\n                        {[\n                          ...individual_list,\n                          ...socialGroup_list,\n                          ...admin_list,\n                        ].map((item) => {\n                          return (\n                            <div className=\"contact_item\">\n                              <div className=\"inner_link\">\n                                <img src={Jenny} alt=\"icon\" />\n                                <div\n                                  className=\"message_link_notify\"\n                                  onClick={() =>\n                                    PopulateContacts(item[\"channelUniqueName\"])\n                                  }\n                                >\n                                  <h3>{item[\"members\"][0][\"userName\"]}</h3>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                      <div className=\"message_right\">\n                        <div className=\"message_right_chatarea\">\n                          <div className=\"message_right_header\">\n                            <h2>Strength & HIIT with Jeremy Clark</h2>\n                            <div className=\"message_header_times\">\n                              <div className=\"message_header_items\">\n                                <img src={SheduleIcon} alt=\"icon\" />\n                                <h5> {new Date().toDateString()}</h5>\n                              </div>\n                              <div className=\"message_header_items\">\n                                <img src={AvailabilityIcon} alt=\"icon\" />\n                                <h5>{new Date().toLocaleTimeString()}</h5>\n                              </div>\n                              <div className=\"message_header_items\">\n                                <img src={LocationIcon} alt=\"icon\" />\n                                <h5>Chennai, TN</h5>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"message_right_textarea\">\n                            {messages.map((item) => {\n                              return <RightChat data={item[\"state\"][\"body\"]} />;\n                            })}\n                            <div ref={messagesEndRef} />\n                          </div>\n                          <div className=\"message_right_input\">\n                            <input\n                              type=\"text\"\n                              placeholder=\"Type your message here..\"\n                              value={text_thread}\n                              onChange={(event) => {\n                                setText_thread(event.target.value);\n                              }}\n                            />\n                            <div onClick={sendText}>\n                              <BlueHoverButton />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </TabPanel>\n                  <TabPanel tabId=\"two\">\n                    <div className=\"message_inner_one\">\n                      <div className=\"message_left\">\n                        {/* Todo Change to ALL */}\n                        {individual_list.map((item) => {\n                          return (\n                            <div className=\"contact_item\">\n                              <div className=\"inner_link\">\n                                <img src={Jenny} alt=\"icon\" />\n                                <div\n                                  className=\"message_link_notify\"\n                                  onClick={() =>\n                                    PopulateContacts(item[\"channelUniqueName\"])\n                                  }\n                                >\n                                  <h3>{item[\"members\"][0][\"userName\"]}</h3>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                      <div className=\"message_right\">\n                        <div className=\"message_right_chatarea\">\n                          <div className=\"message_right_header\">\n                            <h2>Strength & HIIT with Jeremy Clark</h2>\n                            <div className=\"message_header_times\">\n                              <div className=\"message_header_items\">\n                                <img src={SheduleIcon} alt=\"icon\" />\n                                <h5> {new Date().toDateString()}</h5>\n                              </div>\n                              <div className=\"message_header_items\">\n                                <img src={AvailabilityIcon} alt=\"icon\" />\n                                <h5>{new Date().toLocaleTimeString()}</h5>\n                              </div>\n                              <div className=\"message_header_items\">\n                                <img src={LocationIcon} alt=\"icon\" />\n                                <h5>Chennai, TN</h5>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"message_right_textarea\">\n                            {messages.map((item) => {\n                              return <RightChat data={item[\"state\"][\"body\"]} />;\n                            })}\n                            <div ref={messagesEndRef} />\n                          </div>\n                          <div className=\"message_right_input\">\n                            <input\n                              type=\"text\"\n                              placeholder=\"Type your message here..\"\n                              value={text_thread}\n                              onChange={(event) => {\n                                setText_thread(event.target.value);\n                              }}\n                            />\n                            <div onClick={sendText}>\n                              <BlueHoverButton />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </TabPanel>\n                  <TabPanel tabId=\"three\">\n                    <div className=\"message_inner_one\">\n                      <div className=\"message_left\">\n                        {/* Todo Change to ALL */}\n                        {socialGroup_list.map((item) => {\n                          return (\n                            <div className=\"contact_item\">\n                              <div className=\"inner_link\">\n                                <img src={Jenny} alt=\"icon\" />\n                                <div\n                                  className=\"message_link_notify\"\n                                  onClick={() =>\n                                    PopulateContacts(item[\"channelUniqueName\"])\n                                  }\n                                >\n                                  <h3>{item[\"members\"][0][\"userName\"]}</h3>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                      <div className=\"message_right\">\n                        <div className=\"message_right_chatarea\">\n                          <div className=\"message_right_header\">\n                            <h2>Strength & HIIT with Jeremy Clark</h2>\n                            <div className=\"message_header_times\">\n                              <div className=\"message_header_items\">\n                                <img src={SheduleIcon} alt=\"icon\" />\n                                <h5> {new Date().toDateString()}</h5>\n                              </div>\n                              <div className=\"message_header_items\">\n                                <img src={AvailabilityIcon} alt=\"icon\" />\n                                <h5>{new Date().toLocaleTimeString()}</h5>\n                              </div>\n                              <div className=\"message_header_items\">\n                                <img src={LocationIcon} alt=\"icon\" />\n                                <h5>Chennai, TN</h5>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"message_right_textarea\">\n                            {messages.map((item) => {\n                              return <RightChat data={item[\"state\"][\"body\"]} />;\n                            })}\n                            <div ref={messagesEndRef} />\n                          </div>\n                          <div className=\"message_right_input\">\n                            <input\n                              type=\"text\"\n                              placeholder=\"Type your message here..\"\n                              value={text_thread}\n                              onChange={(event) => {\n                                setText_thread(event.target.value);\n                              }}\n                            />\n                            <div onClick={sendText}>\n                              <BlueHoverButton />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </TabPanel>\n                  <TabPanel tabId=\"four\">\n                    <div className=\"message_inner_one\">\n                      <div className=\"message_left\">\n                        {/* Todo Change to ALL */}\n                        {admin_list.map((item) => {\n                          return (\n                            <div className=\"contact_item\">\n                              <div className=\"inner_link\">\n                                <img src={Jenny} alt=\"icon\" />\n                                <div\n                                  className=\"message_link_notify\"\n                                  onClick={() =>\n                                    PopulateContacts(item[\"channelUniqueName\"])\n                                  }\n                                >\n                                  <h3>{item[\"members\"][0][\"userName\"]}</h3>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                      <div className=\"message_right\">\n                        <div className=\"message_right_chatarea\">\n                          <div className=\"message_right_header\">\n                            <h2>Strength & HIIT with Jeremy Clark</h2>\n                            <div className=\"message_header_times\">\n                              <div className=\"message_header_items\">\n                                <img src={SheduleIcon} alt=\"icon\" />\n                                <h5> {new Date().toDateString()}</h5>\n                              </div>\n                              <div className=\"message_header_items\">\n                                <img src={AvailabilityIcon} alt=\"icon\" />\n                                <h5>{new Date().toLocaleTimeString()}</h5>\n                              </div>\n                              <div className=\"message_header_items\">\n                                <img src={LocationIcon} alt=\"icon\" />\n                                <h5>Chennai, TN</h5>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"message_right_textarea\">\n                            {messages.map((item) => {\n                              return <RightChat data={item[\"state\"][\"body\"]} />;\n                            })}\n                            <div ref={messagesEndRef} />\n                          </div>\n                          <div className=\"message_right_input\">\n                            <input\n                              type=\"text\"\n                              placeholder=\"Type your message here..\"\n                              value={text_thread}\n                              onChange={(event) => {\n                                setText_thread(event.target.value);\n                              }}\n                            />\n                            <div onClick={sendText}>\n                              <BlueHoverButton />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </TabPanel>\n                </div>\n              </Tabs>\n              <div className=\"\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\nconst RightChat = (props) => {\n  return (\n    <>\n      <div className=\"message_chat_right\">\n        <div className=\"message_text\">\n          <h5>{props.data}</h5>\n        </div>\n\n        <img src={Jonn} alt=\"icon\" />\n      </div>\n    </>\n  );\n};\n// const LeftChat = (props) => {\n//     return (\n//         <>\n//             <div className=\"message_chat_right\">\n//                 <div className=\"message_text\">\n//                     <h5>{props.data}</h5>\n//                 </div>\n\n//                 <img src={Jonn} alt=\"icon\" />\n//             </div>\n//         </>\n//     );\n// };\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      trainerChannel,\n    },\n    dispatch\n  );\n};\n\nconst TrainerMessage = connect(null, mapDispatchToProps)(TrainerMessageClass);\n\nexport default TrainerMessage;\n","export default __webpack_public_path__ + \"static/media/Jenny.c50273b9.png\";","export default __webpack_public_path__ + \"static/media/Availability Icon.76c74f78.svg\";","export default __webpack_public_path__ + \"static/media/Location Icon.eb3488a6.svg\";","export default __webpack_public_path__ + \"static/media/Image 1.5667afc3.png\";","export default __webpack_public_path__ + \"static/media/Shedule Icon.229e7bab.svg\";"],"sourceRoot":""}