{"version":3,"sources":["component/common/Message/ChatItem.js","component/common/Message/ChatBox.js","assets/files/TrainerDashboard/Message/Availability Icon.svg","assets/files/TrainerDashboard/Message/Location Icon.svg","assets/files/TrainerDashboard/Message/Image 1.png","assets/files/TrainerDashboard/Message/Shedule Icon.svg"],"names":["ChatItem","CurrentMessageComponent","currentChannelMembers","currMsg","type","state","date","msgTime","moment","timestamp","format","isMyMsg","author","localStorage","getItem","currentChatItemOwner","filter","userIdenity","className","body","src","profilePicture","Jonn","alt","onError","e","target","onerror","ChatBoxClass","props","scrollToMessageListBottom","messagesEndRef","current","scrollTo","scrollHeight","handleChange","value","activeChannel","setState","message","typing","handleSendMessage","preventDefault","console","log","sendMessage","String","then","formatMessage","messages","lastMsgDate","formattedMessage","reduce","prevMsgArray","tempPrevMsgArray","currYear","getFormatDate","msgYear","tempMsgDate","msgDate","React","createRef","prevProps","this","activeChannelMessages","length","isLoading","setTimeout","typingMembers","channelData","isDataPresent","tempMsg","sid","chatTitle","SheduleIcon","Date","startTime","toDateString","AvailabilityIcon","toLocaleTimeString","LocationIcon","venue","toString","ref","map","item","index","now","id","onSubmit","placeholder","onChange","Component","ChatBox","connect","clientData","messagingReducer","chatClientInstance","dispatch","bindActionCreators","trainerChannel"],"mappings":"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","file":"static/js/124.83add4a0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport Jonn from \"../../../assets/files/TrainerDashboard/Message/Image 1.png\";\r\n\r\nexport const ChatItem = ({\r\n  currentChannelMembers = [],\r\n  currMsg: { type, state, date },\r\n}) => {\r\n  let CurrentMessageComponent;\r\n\r\n  if (type === \"message\") {\r\n    let msgCreatedDate = moment(state.timestamp);\r\n\r\n    let msgTime = msgCreatedDate.format(\"LT\");\r\n\r\n    const isMyMsg = state?.author === localStorage.getItem(\"user-id\");\r\n\r\n    const currentChatItemOwner =\r\n      currentChannelMembers.filter(\r\n        ({ userIdenity }) => userIdenity === state.author\r\n      )[0] || {};\r\n\r\n    CurrentMessageComponent = (\r\n      <div className={`message_chat_${isMyMsg ? \"right\" : \"left\"}`}>\r\n        <div className=\"message_text\">\r\n          <h5>{state?.body || \"\"}</h5>\r\n          <span className=\"msg-time\">{msgTime}</span>\r\n        </div>\r\n\r\n        <img\r\n          src={currentChatItemOwner?.profilePicture || Jonn}\r\n          alt=\"icon\"\r\n          onError={(e) => {\r\n            e.target.onerror = null;\r\n            e.target.src = Jonn;\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  } else {\r\n    CurrentMessageComponent = (\r\n      <div className=\"w-100 d-flex align-items-center justify-content-center my-3\">\r\n        <span className=\"info-badge\">{date}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>{CurrentMessageComponent}</div>;\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport LocationIcon from \"../../../assets/files/TrainerDashboard/Message/Location Icon.svg\";\r\nimport SheduleIcon from \"../../../assets/files/TrainerDashboard/Message/Shedule Icon.svg\";\r\nimport AvailabilityIcon from \"../../../assets/files/TrainerDashboard/Message/Availability Icon.svg\";\r\nimport BlueHoverButton from \"../BlueArrowButton\";\r\n\r\nimport { ChatItem } from \"./ChatItem\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { trainerChannel } from \"action/trainerAct\";\r\nimport { connect } from \"react-redux\";\r\nimport { getFormatDate } from \"service/helperFunctions\";\r\n\r\nclass ChatBoxClass extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.messagesEndRef = React.createRef();\r\n    this.state = {\r\n      message: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // console.log(this.props, prevProps);\r\n    if (\r\n      this.props.activeChannelMessages.length !==\r\n      prevProps.activeChannelMessages.length\r\n    ) {\r\n      this.scrollToMessageListBottom();\r\n      console.log(\"hrllo\");\r\n    }\r\n    if (this.props.isLoading === false && prevProps.isLoading === true) {\r\n      setTimeout(() => {\r\n        this.scrollToMessageListBottom();\r\n        console.log(\"hrllo\", this.props.isLoading, prevProps.isLoading);\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.scrollToMessageListBottom();\r\n  }\r\n\r\n  scrollToMessageListBottom = () => {\r\n    this.messagesEndRef.current?.scrollTo(\r\n      0,\r\n      this.messagesEndRef.current?.scrollHeight\r\n    );\r\n  };\r\n\r\n  handleChange = ({ target: { value } }) => {\r\n    const { activeChannel } = this.props;\r\n\r\n    this.setState({\r\n      message: value,\r\n    });\r\n    activeChannel && activeChannel.typing();\r\n  };\r\n\r\n  handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    const { message } = this.state;\r\n\r\n    const { activeChannel } = this.props;\r\n\r\n    if (!activeChannel) {\r\n      return console.log(\"Chat Service is not configured.\");\r\n    }\r\n\r\n    if (activeChannel) {\r\n      activeChannel.sendMessage(String(message)).then(() => {\r\n        this.setState({\r\n          message: \"\",\r\n        });\r\n        this.scrollToMessageListBottom();\r\n      });\r\n    }\r\n  };\r\n\r\n  formatMessage = (messages = []) => {\r\n    var lastMsgDate = \"\";\r\n    let formattedMessage = messages.reduce((prevMsgArray, currMsg) => {\r\n      let tempPrevMsgArray = [...prevMsgArray];\r\n\r\n      const { timestamp } = currMsg.state;\r\n\r\n      let currYear = getFormatDate(null, \"YYYY\");\r\n\r\n      let msgYear = getFormatDate(timestamp, \"YYYY\");\r\n\r\n      let tempMsgDate = getFormatDate(timestamp, \"MMMM DD\");\r\n\r\n      let msgDate =\r\n        currYear === msgYear ? tempMsgDate : `${tempMsgDate}, ${msgYear}`;\r\n\r\n      if (lastMsgDate === msgDate) {\r\n        tempPrevMsgArray = [\r\n          ...tempPrevMsgArray,\r\n          { type: \"message\", ...currMsg },\r\n        ];\r\n      } else {\r\n        lastMsgDate = msgDate;\r\n        tempPrevMsgArray = [\r\n          ...tempPrevMsgArray,\r\n          { type: \"timestamp\", date: msgDate },\r\n          { type: \"message\", ...currMsg },\r\n        ];\r\n      }\r\n\r\n      return tempPrevMsgArray;\r\n    }, []);\r\n\r\n    return formattedMessage;\r\n  };\r\n  render() {\r\n    const {\r\n      activeChannelMessages = [],\r\n      typingMembers = [],\r\n      currentChannelMembers = [],\r\n      isLoading = false,\r\n      activeChannel = {},\r\n      channelData = {},\r\n      isDataPresent = false,\r\n    } = this.props;\r\n\r\n    const { message } = this.state;\r\n\r\n    const tempMsg = this.formatMessage(activeChannelMessages);\r\n\r\n    const messages = activeChannelMessages;\r\n\r\n    if (!isDataPresent) return null;\r\n    return (\r\n      <div className=\"message_right_chatarea\">\r\n        {activeChannel?.sid ? (\r\n          <>\r\n            {!isLoading ? (\r\n              <>\r\n                <div className=\"message_right_header\">\r\n                  <h2>{channelData?.chatTitle || \"Title\"}</h2>\r\n                  <div className=\"message_header_times\">\r\n                    <div className=\"message_header_items\">\r\n                      <img src={SheduleIcon} alt=\"icon\" />\r\n                      <h5>\r\n                        {\" \"}\r\n                        {new Date(channelData?.startTime).toDateString()}\r\n                      </h5>\r\n                    </div>\r\n                    <div className=\"message_header_items\">\r\n                      <img src={AvailabilityIcon} alt=\"icon\" />\r\n                      <h5>\r\n                        {new Date(channelData?.startTime).toLocaleTimeString()}\r\n                      </h5>\r\n                    </div>\r\n                    <div className=\"message_header_items\">\r\n                      <img src={LocationIcon} alt=\"icon\" />\r\n                      <h5>{channelData?.venue}</h5>\r\n                    </div>\r\n                  </div>\r\n                  <p>\r\n                    {typingMembers.length > 0 && (\r\n                      <span className=\"ml-auto text-primary fw-600\">{`${typingMembers.toString()} ${\r\n                        typingMembers.length > 1 ? \"are\" : \"is\"\r\n                      } typing...`}</span>\r\n                    )}\r\n                  </p>\r\n                </div>\r\n                <div\r\n                  className=\"message_right_textarea\"\r\n                  ref={this.messagesEndRef}\r\n                >\r\n                  {tempMsg?.length > 0 ? (\r\n                    tempMsg.map((item, index) => {\r\n                      return (\r\n                        <ChatItem\r\n                          item={item}\r\n                          currentChannelMembers={currentChannelMembers}\r\n                          key={`${Date.now()}_${index}`}\r\n                          currMsg={item}\r\n                        />\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <div className=\"w-100 h-100 d-flex align-items-center justify-content-center\">\r\n                      <span className=\"info-badge\">No message</span>\r\n                    </div>\r\n                  )}\r\n                  <div id=\"end-message\" />\r\n                </div>\r\n                <form className=\"w-100\" onSubmit={this.handleSendMessage}>\r\n                  <div className=\"message_right_input\">\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Type your message here..\"\r\n                      value={message}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    <div className=\"submit-btn-block\">\r\n                      <button className=\"transparent-btn\">\r\n                        <BlueHoverButton />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </>\r\n            ) : (\r\n              <div className=\"w-100 h-100 d-flex align-items-center justify-content-center\">\r\n                <span className=\"info-badge\">{`${\r\n                  isLoading ? \"Loading...\" : \"Connecting...\"\r\n                }`}</span>\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div className=\"w-100 h-100 d-flex align-items-center justify-content-center\">\r\n            <span className=\"info-badge\">{`${\r\n              isLoading ? \"Loading...\" : \"Select a chat to start messaging\"\r\n            }`}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  clientData: state.messagingReducer.clientData,\r\n  activeChannel: state.messagingReducer.activeChannel,\r\n  activeChannelMessages: state.messagingReducer.activeChannelMessages,\r\n  typingMembers: state.messagingReducer.typingMembers,\r\n  chatClientInstance: state.messagingReducer.chatClientInstance,\r\n  currentChannelMembers: state.messagingReducer.currentChannelMembers,\r\n  isLoading: state.messagingReducer.isLoading,\r\n  channelData: state.messagingReducer.channelData,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      trainerChannel,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nconst ChatBox = connect(mapStateToProps, mapDispatchToProps)(ChatBoxClass);\r\n\r\nexport default ChatBox;\r\n","export default __webpack_public_path__ + \"static/media/Availability Icon.ad0517cb.svg\";","export default __webpack_public_path__ + \"static/media/Location Icon.cbb0b32d.svg\";","export default __webpack_public_path__ + \"static/media/Image 1.5667afc3.png\";","export default __webpack_public_path__ + \"static/media/Shedule Icon.7b9fb7aa.svg\";"],"sourceRoot":""}